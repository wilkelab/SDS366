{
  "hash": "06b5993f26084ad959ca239a2c988363",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Getting things into the right order\"\nauthor: \"Claus O. Wilke\"\nformat: live-html\nengine: knitr\nwebr:\n  render-df: gt-interactive\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n\n## Introduction\n\nIn this worksheet, we will discuss how to manipulate factor levels such that plots show visual elements in the correct order.\n\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| warning: false\n#| edit: false\nlibrary(tidyverse)\nlibrary(palmerpenguins)\nlibrary(gapminder)\nlibrary(ggridges)\n```\n:::\n\n\n\n\nWe will be working with the dataset `penguins`, which contains data on individual penguins on Antarctica.\n\n```r\npenguins\n```\n\n::: {.column-page}\n\n\n\n::: {.cell}\n```{webr}\n#| echo: false\npenguins\n```\n:::\n\n\n\n:::\n\nWe will also be working with the dataset `gapminder`, which contains information about life expectancy, population number, and GDP for 142 different countries.\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\ngapminder\n```\n:::\n\n\n\n\nFinally, we will be working with the dataset `Aus_athletes`, which contains various physiological measurements made on athletes competing in different sports.\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\nAus_athletes\n```\n:::\n\n\n\n\n## Manual reordering\n\nThe simplest form of reordering is manual, where we state explicitly in which order we want some graphical element to appear. We reorder manually with the function `fct_relevel()`, which takes as arguments the variable to reorder and the levels we want to reorder, in the order in which we want them to appear.\n\nHere is a simple example. We create a factor `x` with levels `\"A\"`, `\"B\"`, `\"C\"`, in that order, and then we reorder the levels to `\"B\"`, `\"C\"`, `\"A\"`.\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\nx <- factor(c(\"A\", \"B\", \"A\", \"C\", \"B\"))\nx\nfct_relevel(x, \"B\", \"C\", \"A\")\n```\n:::\n\n\n\n\nTry this out for yourself. Place the levels into a few different orderings. Also try listing only some of the levels to reorder.\n\n\n\n\n::: {.cell exercise='factor-example'}\n```{webr}\n#| exercise: factor-example\nx <- factor(c(\"A\", \"B\", \"A\", \"C\", \"B\"))\nx\n\nfct_relevel(x, ___)\n```\n:::\n\n\n\n\n::: { .solution exercise=\"factor-example\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nx <- factor(c(\"A\", \"B\", \"A\", \"C\", \"B\"))\nx\n\nfct_relevel(x, \"C\", \"A\", \"B\")\n```\n:::\n:::\n\nNow we apply this concept to a ggplot graph. We will work with the following boxplot visualization of the distribution of bill length versus penguin species. \n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\npenguins |>\n  ggplot(aes(species, bill_length_mm)) +\n  geom_boxplot(na.rm = TRUE) # na.rm = TRUE prevents warning about missing values\n```\n:::\n\n\n\n\nUse the function `fct_relevel()` to place the three species into the order Chinstrap, Gentoo, Adelie. (*Hint:* You will have to use a `mutate()` statement to modify the `species` column.)\n\n\n\n\n::: {.cell exercise='penguins-ordered-manual'}\n```{webr}\n#| exercise: penguins-ordered-manual\n\n```\n:::\n\n\n\n\n::: { .hint exercise=\"penguins-ordered-manual\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\npenguins |>\n  mutate(\n    species = fct_relevel(___)\n  ) |>\n  ggplot(aes(species, bill_length_mm)) +\n  geom_boxplot(na.rm = TRUE)\n```\n:::\n:::\n\n::: { .solution exercise=\"penguins-ordered-manual\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\npenguins |>\n  mutate(\n    species = fct_relevel(species, \"Chinstrap\", \"Gentoo\", \"Adelie\")\n  ) |>\n  ggplot(aes(species, bill_length_mm)) +\n  geom_boxplot(na.rm = TRUE)\n```\n:::\n:::\n\nNow flip the x and y axes, making sure that the order remains Chinstrap, Gentoo, Adelie from top to bottom.\n\n\n\n\n::: {.cell exercise='penguins-ordered-manual2'}\n```{webr}\n#| exercise: penguins-ordered-manual2\n\n```\n:::\n\n\n\n\n::: { .hint exercise=\"penguins-ordered-manual2\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\npenguins |>\n  mutate(\n    species = fct_relevel(species, ___)\n  ) |>\n  ggplot(aes(bill_length_mm, species)) +\n  geom_boxplot(na.rm = TRUE)\n```\n:::\n:::\n\n::: { .solution exercise=\"penguins-ordered-manual2\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\npenguins |>\n  mutate(\n    species = fct_relevel(species, \"Adelie\", \"Gentoo\", \"Chinstrap\")\n  ) |>\n  ggplot(aes(bill_length_mm, species)) +\n  geom_boxplot(na.rm = TRUE)\n```\n:::\n:::\n\n## Reordering based on frequency\n\nManual reordering is cumbersome if there are many levels that need to be reorderd. Therefore, we often use functions that can reorder automatically based on some quantitative criterion. For example, we can use `fct_infreq()` to order a factor based on the number of occurrences of each level in the dataset. And we can reverse the order of a factor using the function `fct_rev()`. These two functions are particularly useful for making bar plots.\n\nConsider the following plot of the number of athletes competing in various sports in the `Aus_athletes` dataset. This plot is problematic because the sports are arranged in an arbitrary (here: alphabetic) order that is not meaningful for the data shown.\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\nAus_athletes |>\n  ggplot(aes(y = sport)) +\n  geom_bar()\n```\n:::\n\n\n\n\nReorder the `sport` column so that the sport with the most athletes appears on top and the sport with the least athletes at the bottom.\n\n\n\n\n::: {.cell exercise='aus-athletes-ordered'}\n```{webr}\n#| exercise: aus-athletes-ordered\n\n```\n:::\n\n\n\n\n::: { .hint exercise=\"aus-athletes-ordered\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nAus_athletes |>\n  mutate(\n    sport = ___\n  ) |>\n  ggplot(aes(y = sport)) +\n  geom_bar()\n```\n:::\n:::\n\n::: { .solution exercise=\"aus-athletes-ordered\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nAus_athletes |>\n  mutate(\n    sport = fct_rev(fct_infreq(sport))\n  ) |>\n  ggplot(aes(y = sport)) +\n  geom_bar()\n```\n:::\n:::\n\n## Reordering based on numerical values\n\nAnother common problem we encounter is that we want to order a factor based on some other numerical variable, possibly after we have calculated some summary statistic such as the median, minimum, or maximum.\n\nAs an example for this problem, we consider a plot of the life expectancy in various countries in the Americas over time, shown as colored tiles.\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\ngapminder |>\n  filter(continent == \"Americas\") |>\n  ggplot(aes(year, country, fill = lifeExp)) + \n  geom_tile() +\n  scale_fill_viridis_c(option = \"A\")\n```\n:::\n\n\n\n\nThe default alphabetic ordering creates a meaningless color pattern that is difficult to read. It would make more sense to order the countries by some function of the life expectancy values, such as the minimum, median, or maximum value. We can do this with the function `fct_reorder()`, which takes three arguments: The factor to reorder, the numerical variable on which to base the ordering, and the name of a function (such as `min`, `median`, `max`) to be applied to calculate the ordering statistic.\n\nModify the above plot so the countries are ordered by their median life expectancy over the observed time period.\n\n\n\n\n::: {.cell exercise='life-expectancy-tiles'}\n```{webr}\n#| exercise: life-expectancy-tiles\n\n```\n:::\n\n\n\n\n::: { .hint exercise=\"life-expectancy-tiles\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\ngapminder |>\n  filter(continent == \"Americas\") |>\n  mutate(\n    country = fct_reorder(___, ___, ___)\n  ) |>\n  ggplot(aes(year, country, fill = lifeExp)) + \n  geom_tile() +\n  scale_fill_viridis_c(option = \"A\")\n```\n:::\n:::\n\n::: { .solution exercise=\"life-expectancy-tiles\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\ngapminder |>\n  filter(continent == \"Americas\") |>\n  mutate(\n    country = fct_reorder(country, lifeExp, median)\n  ) |>\n  ggplot(aes(year, country, fill = lifeExp)) + \n  geom_tile() +\n  scale_fill_viridis_c(option = \"A\")\n```\n:::\n:::\n\nTry other orderings, such as `min`, `max`, or `mean`.\n\nNext, instead of plotting this data as colored tiles, plot it as lines, using facets to make separate panels for each country.\n\n\n\n\n::: {.cell exercise='life-expectancy-lines'}\n```{webr}\n#| exercise: life-expectancy-lines\n\n```\n:::\n\n\n\n\n::: { .hint exercise=\"life-expectancy-lines\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\ngapminder |>\n  filter(continent == \"Americas\") |>\n  mutate(country = fct_reorder(country, lifeExp, median)) |>\n  ggplot(___) + \n  geom____() +\n  facet_wrap(___)\n```\n:::\n:::\n\n::: { .solution exercise=\"life-expectancy-lines\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\ngapminder |>\n  filter(continent == \"Americas\") |>\n  mutate(country = fct_reorder(country, lifeExp, median)) |>\n  ggplot(aes(year, lifeExp)) + \n  geom_line() +\n  facet_wrap(vars(country))\n```\n:::\n:::\n\nAgain, try various orderings, including `min`, `max`, or `mean`.\n\n\n## Lumping of factor levels\n\nFinally, we sometimes have factors with too many levels and we want to combine some into a catch-all level such as \"Other\". We illustrate this concept with the following plot, which shows BMI (body-mass index) versus height for male athletes, broken down by sport.\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\nAus_athletes |>\n  filter(sex == \"m\") |>\n  ggplot(aes(height, bmi, color = sport)) +\n  geom_point()\n```\n:::\n\n\n\n\nWe want to modify this plot so that all sports other than basketball and water polo are shown as \"Other\". To achieve this goal, you will have to create a new column called `sport_lump` that contains a lumped version of the `sport` factor.\n\nThe function that does the lumping is called `fct_other()`, and it takes as argument the variable to lump and an argument `keep` listing the values to keep or alternatively an argument `drop` listing the values to drop. Since you want to keep only basketball and water polo, use the variant with the `keep` argument.\n\n\n\n\n::: {.cell exercise='athletes-sport-lump'}\n```{webr}\n#| exercise: athletes-sport-lump\nAus_athletes |>\n  filter(sex == \"m\") |>\n  mutate(\n    sport_lump = ___\n  ) |>\n  ggplot(aes(height, bmi, color = sport_lump)) +\n  geom_point()\n```\n:::\n\n\n\n\n::: { .hint exercise=\"athletes-sport-lump\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nAus_athletes |>\n  filter(sex == \"m\") |>\n  mutate(\n    sport_lump = fct_other(sport, keep = ___)\n  ) |>\n  ggplot(aes(height, bmi, color = sport_lump)) +\n  geom_point()\n```\n:::\n:::\n\n::: { .solution exercise=\"athletes-sport-lump\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nAus_athletes |>\n  filter(sex == \"m\") |>\n  mutate(\n    sport_lump = fct_other(sport, keep = c(\"basketball\", \"water polo\"))\n  ) |>\n  ggplot(aes(height, bmi, color = sport_lump)) +\n  geom_point()\n```\n:::\n:::\n\nNow use the variant of the `fct_other()` function with the `drop` argument. Drop field, rowing, and tennis from the sports considered individually.\n\n\n\n\n::: {.cell exercise='athletes-sport-lump2'}\n```{webr}\n#| exercise: athletes-sport-lump2\n\n```\n:::\n\n\n\n\n::: { .hint exercise=\"athletes-sport-lump2\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nAus_athletes |>\n  filter(sex == \"m\") |>\n  mutate(\n    sport_lump = fct_other(sport, drop = ___)\n  ) |>\n  ggplot(aes(height, bmi, color = sport_lump)) +\n  geom_point()\n```\n:::\n:::\n\n::: { .solution exercise=\"athletes-sport-lump2\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nAus_athletes |>\n  filter(sex == \"m\") |>\n  mutate(\n    sport_lump = fct_other(sport, drop = c(\"field\", \"rowing\", \"tennis\"))\n  ) |>\n  ggplot(aes(height, bmi, color = sport_lump)) +\n  geom_point()\n```\n:::\n:::\n\nFinally, try other lumping functions also. For example, the function `fct_lump_n()` retains the *n* most frequent levels and lump all others into `\"Other\"`. See if you can create a meaningful example with the `Aus_athletes` dataset that uses the `fct_lump_n()` function. *Hint:* Try to make a bar plot, similar to the one we made in the section on reordering based on frequency.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}