{
  "hash": "8c592bd3b4774970cc9f96ccab02cd4b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Visualizing amounts\"\nauthor: \"Claus O. Wilke\"\nformat: live-html\nengine: knitr\nwebr:\n  render-df: gt-interactive\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n\n## Introduction\n\nIn this worksheet, we will discuss how to display distributions of data values using histograms and density plots.\n\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| warning: false\n#| edit: false\nlibrary(tidyverse)\n```\n:::\n\n\n\n\nNext we set up the data.\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\n#| warning: false\ntitanic <- read_csv(\"https://wilkelab.org/SDS366/datasets/titanic.csv\") |>\n  select(age, sex, class, survived) |>\n  arrange(age, sex, class)\n```\n:::\n\n\n\n\nWe will be working with the `titanic` dataset which contains information about passengers on the Titanic, including their age, sex, the class in which they traveled on the ship, and whether they survived or not:\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\ntitanic\n```\n:::\n\n\n\n\n## Histograms\n\nWe start by drawing a histogram of the passenger ages (column `age` in the dataset `titanic`). We can do this in ggplot with the geom `geom_histogram()`. Try this for yourself.\n\n\n\n\n::: {.cell exercise='titanic-hist'}\n```{webr}\n#| exercise: titanic-hist\nggplot(titanic, aes(___)) +\n  ___\n```\n:::\n\n\n\n\n::: { .solution exercise=\"titanic-hist\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(titanic, aes(age)) +\n  geom_histogram()\n```\n:::\n:::\n\nIf you don't specify how many bins you want or how wide you want them to be, `geom_histogram()` will make an automatic choice, but it will also give you a warning that the automatic choice is probably not good. Make a better choice by setting the `binwidth` and `center` parameters. Try the values 5 and 2.5, respectively.\n\n\n\n\n::: {.cell exercise='titanic-hist2'}\n```{webr}\n#| exercise: titanic-hist2\nggplot(titanic, aes(age)) +\n  geom_histogram(___)\n```\n:::\n\n\n\n\n::: { .hint exercise=\"titanic-hist2\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nggplot(titanic, aes(age)) +\n  geom_histogram(binwidth = ___, center = ___)\n```\n:::\n:::\n\n::: { .solution exercise=\"titanic-hist2\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(titanic, aes(age)) +\n  geom_histogram(binwidth = 5, center = 2.5)\n```\n:::\n:::\n\nTry a few more different binwidths, e.g. 1 or 10. What are good values for `center` that go with these choices?\n\n## Density plots\n\nDensity plots are a good alternative to histograms. We can create them with `geom_density()`. Try this out by drawing a density plot of the passenger ages (column `age` in the dataset `titanic`). Also, by default `geom_density()` does not draw a filled area under the density line. We can change this by setting an explicit fill color, e.g. \"cornsilk\".\n\n\n\n\n::: {.cell exercise='titanic-dens'}\n```{webr}\n#| exercise: titanic-dens\nggplot(titanic, aes(___)) +\n  ___\n```\n:::\n\n\n\n\n::: { .hint exercise=\"titanic-dens\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nggplot(titanic, aes(age)) +\n  geom_density(___)\n```\n:::\n:::\n\n::: { .solution exercise=\"titanic-dens\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(titanic, aes(age)) +\n  geom_density(fill = \"cornsilk\")\n```\n:::\n:::\n\nJust like for histograms, there are options to modify how much detail a density plot shows. A small binwidth in a histogram corresponds to a low bandwidth (`bw`) in a density plot and similarly a large binwidth corresponds to a high bandwidth. In addition, you can change the kernel, e.g. `kernel = \"rectangular\"` or `kernel = \"triangular\"`. Try this out by using a bandwidth of 1 and a triangular kernel.\n\n\n\n\n::: {.cell exercise='titanic-dens2'}\n```{webr}\n#| exercise: titanic-dens2\n```\n:::\n\n\n\n\n::: { .hint exercise=\"titanic-dens2\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nggplot(titanic, aes(age)) +\n  geom_density(fill = \"cornsilk\", bw = ___, kernel = ___)\n```\n:::\n:::\n\n::: { .solution exercise=\"titanic-dens2\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(titanic, aes(age)) +\n  geom_density(fill = \"cornsilk\", bw = 1, kernel = \"triangular\")\n```\n:::\n:::\n\nTry a few more different bandwidth and kernel choices, e.g. 0.1 or 10, or rectangular or gaussian kernels. How does the density plot depend on these choices?\n\n## Small multiples (facets)\n\nWe can also draw separate histograms for passengers meeting different criteria, for example for passengers traveling in the different classes. Whenever we draw multiple plot panels containing the same type of plot but for different subsets of the data, we speak of \"small multiples\". In ggplot, we generate small multiples with the function `facet_wrap()`. The function `facet_wrap()` takes as its argument a list of data columns to subdivide the data by. This list is provided as an R formula. It's Ok if you don't know what an R formula is. Simply think of it as the name of the column with a tilde (`~`) in front. For example, `~class` means draw a separate panel for each class, `~survived` means draw a separate panel for each survival status, and `~class + survived` means draw a separate panel for each combination of class and survival status.\n\nAs an example, the following code generates small multiple histograms by class:\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| label: titanic-histogram-example\n#| edit: false\nggplot(titanic, aes(age)) +\n  geom_histogram(binwidth = 5, center = 2.5) +\n  facet_wrap(~class)\n```\n:::\n\n\n\n\nNow use the same principle to draw small multiple histograms by survival status.\n\n\n\n\n::: {.cell exercise='titanic-hist-surv'}\n```{webr}\n#| exercise: titanic-hist-surv\nggplot(titanic, aes(age)) +\n  geom_histogram(binwidth = 5, center = 2.5) +\n  ___\n```\n:::\n\n\n\n\n::: { .hint exercise=\"titanic-hist-surv\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nggplot(titanic, aes(age)) +\n  geom_histogram(binwidth = 5, center = 2.5) +\n  facet_wrap(___)\n```\n:::\n:::\n\n::: { .solution exercise=\"titanic-hist-surv\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(titanic, aes(age)) +\n  geom_histogram(binwidth = 5, center = 2.5) +\n  facet_wrap(~survived)\n```\n:::\n:::\n\nNow make a plot that breaks down the data by both survival status and class.\n\n\n\n\n::: {.cell exercise='titanic-hist-survclass'}\n```{webr}\n#| exercise: titanic-hist-survclass\n```\n:::\n\n\n\n\n::: { .hint exercise=\"titanic-hist-survclass\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nggplot(titanic, aes(age)) +\n  geom_histogram(binwidth = 5, center = 2.5) +\n  facet_wrap(___)\n```\n:::\n:::\n\n::: { .solution exercise=\"titanic-hist-survclass\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(titanic, aes(age)) +\n  geom_histogram(binwidth = 5, center = 2.5) +\n  facet_wrap(~survived + class)\n```\n:::\n:::\n\nFinally, do the same but drawing density plots rather than histograms.\n\n\n\n\n\n::: {.cell exercise='titanic-dens-survclass'}\n```{webr}\n#| exercise: titanic-dens-survclass\n```\n:::\n\n\n\n\n::: { .hint exercise=\"titanic-dens-survclass\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nggplot(titanic, aes(age)) +\n  ___ +\n  facet_wrap(~survived + class)\n```\n:::\n:::\n\n::: { .solution exercise=\"titanic-dens-survclass\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(titanic, aes(age)) +\n  geom_density(fill = \"cornsilk\", bw = 2) +\n  facet_wrap(~survived + class)\n```\n:::\n:::\n\notice the difference between this plot and the corresponding histogram plot. Histograms show absolute counts whereas the density plots are normalized so that the area under the curve is 1. As a consequence, the density plot does not provide an accurate representation of the number of passengers in each grouping. This can be changed. See next section.\n\n## Manipulating stats\n\nYou may have noticed that neither `geom_histogram()` nor `geom_density()` require you to define an aesthetic mapping for the `y` variable. This is because under the hood, a statistical transformation (called a \"stat\") calculates the histogram or density from the raw data and then sets the appropriate y mapping.\n\nSometimes it can be useful to access or modify this mapping directly. We tell ggplot that we want to map a value calculated by a stat, rather than one that is in the original data, by writing `after_stat(...)` inside the `aes()` function. So, for example, the default y mapping for `geom_density()` is `y = after_stat(density)`. An alternative mapping, `y = after_stat(count)` scales densities by the number of points in each grouping, thus producing something more similar to a histogram. You can see the difference between these two choices in the following two examples:\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| label: titanic-dens-example1\n#| edit: false\n# use the default y mapping\nggplot(titanic, aes(age, y = after_stat(density))) + \n  geom_density(fill = \"cornsilk\", bw = 2) +\n  facet_wrap(~survived + class)\n```\n:::\n\n::: {.cell edit='false'}\n```{webr}\n#| label: titanic-dens-example2\n#| edit: false\n# use a modified y mapping\nggplot(titanic, aes(age, y = after_stat(count))) + \n  geom_density(fill = \"cornsilk\", bw = 2) +\n  facet_wrap(~survived + class)\n```\n:::\n\n\n\n\nThe same options of `after_stat(count)` and `after_stat(density)` exist for `geom_histogram()` as well. Try this by making histograms that use the calculated density for the y value. \n\n\n\n\n::: {.cell exercise='titanic-hist-after-stat'}\n```{webr}\n#| exercise: titanic-hist-after-stat\n```\n:::\n\n\n\n\n::: { .hint exercise=\"titanic-hist-after-stat\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nggplot(titanic, aes(age, y = ___)) + \n  geom_histogram(binwidth = 5, center = 2.5) +\n  facet_wrap(~survived + class)\n```\n:::\n:::\n\n::: { .solution exercise=\"titanic-hist-after-stat\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(titanic, aes(age, y = after_stat(density))) + \n  geom_histogram(binwidth = 5, center = 2.5) +\n  facet_wrap(~survived + class)\n```\n:::\n:::\n\nNow, instead, try mapping the calculated counts onto the `fill` aesthetic.\n\n\n\n\n::: {.cell exercise='titanic-hist-after-stat-fill'}\n```{webr}\n#| exercise: titanic-hist-after-stat-fill\n\n```\n:::\n\n\n\n\n::: { .hint exercise=\"titanic-hist-after-stat-fill\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nggplot(titanic, aes(age, fill = ___)) + \n  geom_histogram(binwidth = 5, center = 2.5) +\n  facet_wrap(~survived + class)\n```\n:::\n:::\n\n::: { .solution exercise=\"titanic-hist-after-stat-fill\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(titanic, aes(age, fill = after_stat(count))) + \n  geom_histogram(binwidth = 5, center = 2.5) +\n  facet_wrap(~survived + class)\n```\n:::\n:::\n\nFinally, we can make our own combination of geoms and stats, by setting the `stat` argument of a geom, e.g. `stat = \"density\"` to use the density stat. To try this out, draw a density plot using `geom_point()`, and also map the calculated density values onto the point color.\n\n\n\n\n::: {.cell exercise='titanic-dens-points'}\n```{webr}\n#| exercise: titanic-dens-points\nggplot(titanic, aes(age, ___)) +\n  geom_point(___) +\n  facet_wrap(~survived + class)\n```\n:::\n\n\n\n\n::: { .hint exercise=\"titanic-dens-points\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nggplot(titanic, aes(age, color = ___)) +\n  geom_point(stat = \"density\") +\n  facet_wrap(~survived + class)\n```\n:::\n:::\n\n::: { .solution exercise=\"titanic-dens-points\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(titanic, aes(age, color = after_stat(density))) +\n  geom_point(stat = \"density\") +\n  facet_wrap(~survived + class)\n```\n:::\n:::\n",
    "supporting": [
      "visualizing-distributions-1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}