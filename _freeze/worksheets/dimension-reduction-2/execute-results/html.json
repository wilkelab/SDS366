{
  "hash": "0eff5bf8626eed481b20f307bf416640",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Dimension reduction 2\"\nauthor: \"Claus O. Wilke\"\nformat: live-html\nengine: knitr\nwebr:\n  render-df: gt-interactive\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n\n## Introduction\n\nIn this worksheet, we will discuss how to perform t-SNE (t-distributed stochastic neighbor embedding), a type of non-linear dimension reduction.\n\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| warning: false\n#| edit: false\nlibrary(tidyverse)\nlibrary(Rtsne)\n```\n:::\n\n\n\n\nNext we set up the data.\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\n#| warning: false\nspirals <- read_csv(\"https://wilkelab.org/SDS366/datasets/spirals.csv\")\nblue_jays <- read_csv(\"https://wilkelab.org/SDS366/datasets/blue_jays.csv\")\n\n```\n:::\n\n\n\n\nWe will be working with two datasets, `spirals` and `blue_jays`. The dataset `spirals` contains made-up data in two dimensions that forms three intertwined spirals.\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\nspirals\n```\n:::\n\n\n\n\nThe dataset `blue_jays` contains various measurements taken on blue jay birds.\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\nblue_jays\n```\n:::\n\n\n\n\n\n## Performing t-SNE on the `spirals` dataset\n\nWe start by taking a closer look at the `spirals` dataset. It has three columns, `x`, `y`, and `group`. When we create a scatterplot of `y` against `x` and color by `group` we see three intertwined spirals.\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\nggplot(spirals, aes(x, y, color = group)) +\n  geom_point()\n```\n:::\n\n\n\n\nWe perform t-SNE on this dataset with the function `Rtsne()`. Data preparation is similar to PCA: First, we discard all non-numeric columns. Then, we scale the variables to zero mean and unit variance.\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\n# choose a random seed to make results reproducible\nset.seed(5623)\n\n# prepare data and run t-SNE\ntsne_fit <- spirals |>\n  select(where(is.numeric)) |>\n  scale() |>\n  Rtsne()\n\n# extract coordinates from the `tsne_fit` object and plot\ntsne_fit$Y |>\n  as.data.frame() |>\n  # put non-numeric data columns back in to the dataset\n  cbind(select(spirals, -where(is.numeric))) |>\n  ggplot(aes(V1, V2, color = group)) +\n  geom_point()\n```\n:::\n\n\n\n\nThe result looks quite similar to the plot of the raw data. That is the case because we have not customized t-SNE. The main parameter that we change when running t-SNE is the perplexity value (`perplexity`), and its default of 30 is relativley large for the spirals data. We can also change the random seed and the number of iterations until the algorithm is considered converged  (`max_iter`, higher is better).\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\n# random seed\nset.seed(8423)\n\n# run t-SNE with different perplexity and total number of iterations\ntsne_fit <- spirals |>\n  select(where(is.numeric)) |>\n  scale() |>\n  Rtsne(perplexity = 5, max_iter = 500)\n\n# extract coordinates from the `tsne_fit` object and plot\ntsne_fit$Y |>\n  as.data.frame() |>\n  # put non-numeric data columns back in to the dataset\n  cbind(select(spirals, -where(is.numeric))) |>\n  ggplot(aes(V1, V2, color = group)) +\n  geom_point()\n```\n:::\n\n\n\n\nNow, to see how the parameter settings change the t-SNE results, run the above code for a few different values of the three custom config parameters we have set up. Pay attention to how the output changes as you change each of these parameters.\n\n\n\n\n::: {.cell exercise='tsne-exercise'}\n```{webr}\n#| exercise: tsne-exercise\n\n```\n:::\n\n\n\n\n::: { .solution exercise=\"tsne-exercise\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\n# random seed\nset.seed(1255)\n\n# run t-SNE with different perplexity and total number of iterations\ntsne_fit <- spirals |>\n  select(where(is.numeric)) |>\n  scale() |>\n  Rtsne(perplexity = 8, max_iter = 1000)\n\n# extract coordinates from the `tsne_fit` object and plot\ntsne_fit$Y |>\n  as.data.frame() |>\n  # put non-numeric data columns back in to the dataset\n  cbind(select(spirals, -where(is.numeric))) |>\n  ggplot(aes(V1, V2, color = group)) +\n  geom_point()\n```\n:::\n:::\n\n## Performing t-SNE on the `blue_jays` dataset\n\nNext we will perform t-SNE on the `blue_jays` dataset. See if you can adapt the code from the spirals data to work with the `blue_jays` dataset.\n\n\n\n\n::: {.cell exercise='tsne-blue-jays'}\n```{webr}\n#| exercise: tsne-blue-jays\n\n```\n:::\n\n\n\n\n::: { .hint exercise=\"tsne-blue-jays\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\n# random seed\nset.seed(1255)\n\n# run t-SNE with different perplexity and total number of iterations\ntsne_fit <- ___ |>\n  select(where(is.numeric)) |>\n  scale() |>\n  Rtsne(perplexity = 8, max_iter = 1000)\n\n# extract coordinates from the `tsne_fit` object and plot\ntsne_fit$Y |>\n  as.data.frame() |>\n  # put non-numeric data columns back in to the dataset\n  cbind(select(___, -where(is.numeric))) |>\n  ggplot(aes(V1, V2, color = ___)) +\n  geom_point()\n```\n:::\n:::\n\n::: { .solution exercise=\"tsne-blue-jays\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\n# random seed\nset.seed(1255)\n\n# run t-SNE with different perplexity and total number of iterations\ntsne_fit <- blue_jays |>\n  select(where(is.numeric)) |>\n  scale() |>\n  Rtsne(perplexity = 8, max_iter = 1000)\n\n# extract coordinates from the `tsne_fit` object and plot\ntsne_fit$Y |>\n  as.data.frame() |>\n  # put non-numeric data columns back in to the dataset\n  cbind(select(blue_jays, -where(is.numeric))) |>\n  ggplot(aes(V1, V2, color = sex)) +\n  geom_point()\n```\n:::\n:::\n\nAs before, change the t-SNE configuration parameters and see what effect different choices have on the results you obtain.\n\n\n\n\n::: {.cell exercise='tsne-blue-jays2'}\n```{webr}\n#| exercise: tsne-blue-jays2\n\n```\n:::\n\n\n\n\n::: { .hint exercise=\"tsne-blue-jays2\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\n# random seed\nset.seed(___)\n\n# run t-SNE with different perplexity and total number of iterations\ntsne_fit <- blue_jays |>\n  select(where(is.numeric)) |>\n  scale() |>\n  Rtsne(\n    perplexity = ___,\n    max_iter = ___\n  )\n\n# extract coordinates from the `tsne_fit` object and plot\ntsne_fit$Y |>\n  as.data.frame() |>\n  # put non-numeric data columns back in to the dataset\n  cbind(select(blue_jays, -where(is.numeric))) |>\n  ggplot(aes(V1, V2, color = sex)) +\n  geom_point()\n```\n:::\n:::\n\n::: { .solution exercise=\"tsne-blue-jays2\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\n# random seed\nset.seed(9327)\n\n# run t-SNE with different perplexity and total number of iterations\ntsne_fit <- blue_jays |>\n  select(where(is.numeric)) |>\n  scale() |>\n  Rtsne(\n    perplexity = 6,\n    max_iter = 2000\n  )\n\n# extract coordinates from the `tsne_fit` object and plot\ntsne_fit$Y |>\n  as.data.frame() |>\n  # put non-numeric data columns back in to the dataset\n  cbind(select(blue_jays, -where(is.numeric))) |>\n  ggplot(aes(V1, V2, color = sex)) +\n  geom_point()\n```\n:::\n:::\n",
    "supporting": [
      "dimension-reduction-2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}