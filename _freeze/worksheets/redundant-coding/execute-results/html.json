{
  "hash": "4454d119339e47456c8efab1666b33fb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Redundant coding, text annotations\"\nauthor: \"Claus O. Wilke\"\nformat: live-html\nengine: knitr\nwebr:\n  render-df: gt-interactive\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n## Introduction\n\nIn this worksheet, we will discuss how to encode data using multiple visual channels (such as color and point shape), and we will also discuss text annotations.\n\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| warning: false\n#| edit: false\nlibrary(tidyverse)\nlibrary(ggrepel)\n```\n:::\n\n\n\nWe will be working with two datasets, `iris` and `cars93`. The `iris` dataset contains measurements on the flowers of three *Iris* species.\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\niris\n```\n:::\n\n\n\n**Hint:** Pay attention to the column names in the `iris` dataset. They are all capitalized (e.g., `Species`), and the first four use a point as a separator (e.g., `Sepal.Length`). It is easy to misspell them and then the R code doesn't work correctly.\n\nThe `cars93` dataset contains information about various passenger cars that were on the market in 1993.\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\n#| warning: false\ncars93 <- read_csv(\"https://wilkelab.org/SDS366/datasets/cars93.csv\")\ncars93\n```\n:::\n\n\n\n## Mapping variables to color and shape\n\nFirst, we will do an exercise to practice using multiple visual channels (color and shape) to represent the same qualitative variable. We will do this exercise with the `iris` dataset.\n\nMake a plot of `Sepal.Width` versus `Sepal.Length` for the three species in the `iris` dataset. Map `Species` to both `color` and `shape`.\n\n\n\n::: {.cell exercise='iris-scatter'}\n```{webr}\n#| exercise: iris-scatter\n\n```\n:::\n\n\n\n::: { .hint exercise=\"iris-scatter\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nggplot(iris, aes(Sepal.Length, Sepal.Width, ___)) +\n  geom_point()\n```\n:::\n:::\n\n::: { .solution exercise=\"iris-scatter\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species, shape = Species)) +\n  geom_point()\n```\n:::\n:::\n\nYou can set the shapes with `scale_shape_manual()`, just like you do with colors. There are five special shapes, 21 through 25, that have a line color and a fill color. Modify the plot from the previous exercise so it uses these shapes. Hint: This means you should use the `fill` aesthetic rather than the `color` aesthetic.\n\n\n\n::: {.cell exercise='iris-scatter2'}\n```{webr}\n#| exercise: iris-scatter2\n\n```\n:::\n\n\n\n::: { .hint exercise=\"iris-scatter2\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nggplot(iris, aes(Sepal.Length, Sepal.Width, ___)) +\n  geom_point() +\n  scale_shape_manual(values = ___)\n```\n:::\n:::\n\n::: { .solution exercise=\"iris-scatter2\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(iris, aes(Sepal.Length, Sepal.Width, fill = Species, shape = Species)) +\n  geom_point() +\n  scale_shape_manual(values = c(21, 23, 25))\n```\n:::\n:::\n\n## Manually applying text labels\n\nWe can place text labels with `geom_text()`. Oftentimes it makes sense to manually fine-tune exactly where the text labels will be located. To practice this, we will work with a simple dataset that contains three points:\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\ndata <- tibble(\n  x = c(1, 2, 3),\n  y = c(1, 3, 2),\n  label = c(\"alpha\", \"beta\", \"gamma\")\n)\n```\n:::\n\n\n\nPlot these three points with `geom_point()`, and use `geom_text()` to add the label text to the right side of each point. Remember that `hjust = 0` plots text left-justified. Hints: Add `xlim(1, 4)` to ensure the text labels don't run beyond the edge of the plot panel.\n\n\n\n::: {.cell exercise='labeled-three-points'}\n```{webr}\n#| exercise: labeled-three-points\n\n```\n:::\n\n\n\n::: { .hint exercise=\"labeled-three-points\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nggplot(data, aes(x, y)) +\n  geom_point() +\n  geom_text(___) +\n  xlim(1, 4)\n```\n:::\n:::\n\n::: { .hint exercise=\"labeled-three-points\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nggplot(data, aes(x, y)) +\n  geom_point() +\n  geom_text(aes(label = ___), hjust = ___) +\n  xlim(1, 4)\n```\n:::\n:::\n\n::: { .solution exercise=\"labeled-three-points\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(data, aes(x, y)) +\n  geom_point() +\n  geom_text(aes(label = label), hjust = 0) +\n  xlim(1, 4)\n```\n:::\n:::\n\nNow place the text labels centered below the points. Remember: `hjust = 0.5` means horizontally centered, and `vjust = 1` means vertically below the reference point. You may also have to adjust x and y limits to make sure all labels are within the plot area.\n\n\n\n::: {.cell exercise='labeled-three-points2'}\n```{webr}\n#| exercise: labeled-three-points2\n\n```\n:::\n\n\n\n::: { .hint exercise=\"labeled-three-points2\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nggplot(data, aes(x, y)) +\n  geom_point() +\n  geom_text(\n    aes(label = label),\n    ___\n  ) +\n  xlim(0.5, 3.5) +\n  ylim(0.5, 3)\n```\n:::\n:::\n\n::: { .hint exercise=\"labeled-three-points2\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nggplot(data, aes(x, y)) +\n  geom_point() +\n  geom_text(\n    aes(label = label),\n    hjust = ___,\n    vjust = ___\n  ) +\n  xlim(0.5, 3.5) +\n  ylim(0.5, 3)\n```\n:::\n:::\n\n::: { .solution exercise=\"labeled-three-points2\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(data, aes(x, y)) +\n  geom_point() +\n  geom_text(\n    aes(label = label),\n    hjust = 0.5,\n    vjust = 1\n  ) +\n  xlim(0.5, 3.5) +\n  ylim(0.5, 3)\n```\n:::\n:::\n\nFinally, place each label in a different relative orientation to the point. Place \"alpha\" horizontally centered underneath the point, \"beta\" vertically centered left of the point, and \"gamma\" horizontally centered above the point. This will require adding justification data columns to the data table and then mapping them to `hjust` and `vjust` in `geom_text()`.\n\n\n\n::: {.cell exercise='labeled-three-points3'}\n```{webr}\n#| exercise: labeled-three-points3\ndata <- tibble(\n  x = c(1, 2, 3),\n  y = c(1, 3, 2),\n  label = c(\"alpha\", \"beta\", \"gamma\"),\n  ___\n)\n\nggplot(data, aes(x, y)) +\n  geom_point() +\n  geom_text(\n    ___\n  ) +\n  xlim(0.5, 3.5) +\n  ylim(0.5, 3)\n```\n:::\n\n\n\n::: { .hint exercise=\"labeled-three-points3\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\ndata <- tibble(\n  x = c(1, 2, 3),\n  y = c(1, 3, 2),\n  label = c(\"alpha\", \"beta\", \"gamma\"),\n  hjust = ___,\n  vjust = ___\n)\n\nggplot(data, aes(x, y)) +\n  geom_point() +\n  geom_text(\n    aes(label = ___, ___)\n  ) +\n  xlim(0.5, 3.5) +\n  ylim(0.5, 3)\n```\n:::\n:::\n\n::: { .hint exercise=\"labeled-three-points3\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\ndata <- tibble(\n  x = c(1, 2, 3),\n  y = c(1, 3, 2),\n  label = c(\"alpha\", \"beta\", \"gamma\"),\n  hjust = c(0.5, 1, 0.5),\n  vjust = c(1, 0.5, 0)\n)\n\nggplot(data, aes(x, y)) +\n  geom_point() +\n  geom_text(\n    aes(label = ___, ___)\n  ) +\n  xlim(0.5, 3.5) +\n  ylim(0.5, 3)\n```\n:::\n:::\n\n::: { .solution exercise=\"labeled-three-points3\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\ndata <- tibble(\n  x = c(1, 2, 3),\n  y = c(1, 3, 2),\n  label = c(\"alpha\", \"beta\", \"gamma\"),\n  hjust = c(0.5, 1, 0.5),\n  vjust = c(1, 0.5, 0)\n)\n\nggplot(data, aes(x, y)) +\n  geom_point() +\n  geom_text(\n    aes(label = label, hjust = hjust, vjust = vjust)\n  ) +\n  xlim(0.5, 3.5) +\n  ylim(0.5, 3)\n```\n:::\n:::\n\n## Non-overlapping text labels\n\nWhen there are many points to be labeled, we frequently run into the issue that labels overlap and become unreadable. This problem can be resolved with `geom_text_repel()` from the **ggrepel** package. This geom ensures that none of the text labels overlap. It is also highly customizable, and nearly any labeling problem can be solved with it.\n\nConsider the following plot of fuel-tank capacity versus price, for cars costing more than $30k.\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\ncars93 |>\n  filter(Price > 30) |>\n  ggplot(aes(Price, Fuel.tank.capacity)) +\n  geom_point()\n```\n:::\n\n\n\nUse `geom_text_repel()` to add a text label to each point that shows the make of the car (column `Make`). Hint: Set `max.overlaps = Inf` to avoid a warning about unlabeled data points.\n\n\n\n::: {.cell exercise='text-repel'}\n```{webr}\n#| exercise: text-repel\ncars93 |>\n  filter(Price > 30) |>\n  ggplot(aes(Price, Fuel.tank.capacity)) +\n  geom_point() +\n  geom_text_repel(\n    ___\n  )\n```\n:::\n\n\n\n::: { .hint exercise=\"text-repel\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\ncars93 |>\n  filter(Price > 30) |>\n  ggplot(aes(Price, Fuel.tank.capacity)) +\n  geom_point() +\n  geom_text_repel(\n    aes(label = ___),\n    max.overlaps = ___\n  )\n```\n:::\n:::\n\n::: { .solution exercise=\"text-repel\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\ncars93 |>\n  filter(Price > 30) |>\n  ggplot(aes(Price, Fuel.tank.capacity)) +\n  geom_point() +\n  geom_text_repel(\n    aes(label = Make),\n    max.overlaps = Inf\n  )\n```\n:::\n:::\n\nThe value of the argument `box.padding` determines how far the labels are drawn from the data points. The default is `box.padding = 0.25`. Try out what larger values do. E.g., use 0.8 or 1.2.\n\n\n\n::: {.cell exercise='text-repel2'}\n```{webr}\n#| exercise: text-repel2\n\n```\n:::\n\n\n\n::: { .hint exercise=\"text-repel2\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\ncars93 |>\n  filter(Price > 30) |>\n  ggplot(aes(Price, Fuel.tank.capacity)) +\n  geom_point() +\n  geom_text_repel(\n    aes(label = Make),\n    max.overlaps = Inf,\n    ___\n  )\n```\n:::\n:::\n\n::: { .solution exercise=\"text-repel2\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\ncars93 |>\n  filter(Price > 30) |>\n  ggplot(aes(Price, Fuel.tank.capacity)) +\n  geom_point() +\n  geom_text_repel(\n    aes(label = Make),\n    max.overlaps = Inf,\n    box.padding = 0.8\n  )\n\ncars93 |>\n  filter(Price > 30) |>\n  ggplot(aes(Price, Fuel.tank.capacity)) +\n  geom_point() +\n  geom_text_repel(\n    aes(label = Make),\n    max.overlaps = Inf,\n    box.padding = 1.2\n  )\n```\n:::\n:::\n\nSee if you can pull the text labels towards the left edge of the plot. This will require using the arguments `force_pull`, `hjust`, `nudge_x`, and `direction`. It will also require manual setting of the x limits. For additional hints, see the **ggrepel** documentation [here.](https://ggrepel.slowkow.com/articles/examples.html#align-labels-on-the-top-or-bottom-edge-1)\n\n\n\n::: {.cell exercise='text-repel3'}\n```{webr}\n#| exercise: text-repel3\n\n```\n:::\n\n\n\n::: { .hint exercise=\"text-repel3\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\ncars93 |>\n  filter(Price > 30) |>\n  ggplot(aes(Price, Fuel.tank.capacity)) +\n  geom_point() +\n  geom_text_repel(\n    aes(label = Make),\n    max.overlaps = Inf,\n    ___\n  ) +\n  ___\n```\n:::\n:::\n\n::: { .hint exercise=\"text-repel3\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\ncars93 |>\n  filter(Price > 30) |>\n  ggplot(aes(Price, Fuel.tank.capacity)) +\n  geom_point() +\n  geom_text_repel(\n    aes(label = Make),\n    max.overlaps = Inf,\n    force_pull = ___,\n    hjust = ___,\n    nudge_x = ___,\n    direction = ___\n  ) +\n  xlim(___)\n```\n:::\n:::\n\n\n::: { .solution exercise=\"text-repel3\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\ncars93 |>\n  filter(Price > 30) |>\n  ggplot(aes(Price, Fuel.tank.capacity)) +\n  geom_point() +\n  geom_text_repel(\n    aes(label = Make),\n    max.overlaps = Inf,\n    force_pull = 0,\n    hjust = 1,\n    nudge_x = -10,\n    direction = \"y\"\n  ) +\n  xlim(20, 65)\n```\n:::\n:::\n\nExperiment with the various options for `force_pull`, `hjust`/`vjust`, `nudge_x`/`nudge_y`, and `direction` to get a sense of how they work.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}