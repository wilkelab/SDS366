{
  "hash": "c3b859ff1bb1d1c9129f6d47086a86eb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Compound figures\"\nauthor: \"Claus O. Wilke\"\nformat: live-html\nengine: knitr\nwebr:\n  render-df: gt-interactive\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n## Introduction\n\nIn this worksheet, we will discuss how to combine several **ggplot2** plots into one compound figure.\n\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| warning: false\n#| edit: false\nlibrary(tidyverse)\nlibrary(patchwork)\n```\n:::\n\n\n\nWe will be working with the R builtin dataset `mtcars`, which contains fuel consumption and 10 aspects of automobile design and performance for 32 automobiles (1973â€“74 models).\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\nmtcars\n```\n:::\n\n\n\n## Combining plots\n\nFirst we set up four different plots that we will subsequently combine. The plots are stored in variables `p1`, `p2`, `p3`, `p4`.\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\n#| fig-width: 4\n#| fig-height: 2.472\np1 <- ggplot(mtcars) + \n  geom_point(aes(mpg, disp))\np1  \np2 <- ggplot(mtcars) + \n  geom_boxplot(aes(gear, disp, group = gear))\np2\np3 <- ggplot(mtcars) + \n  geom_density(aes(disp), fill = \"lightblue\")\np3\np4 <- ggplot(mtcars) + \n  geom_bar(aes(carb))\np4\n```\n:::\n\n\n\nTo show plots side-by-side, the **patchwork** package provides the operator `|`, as in `p1 | p2`. Try this by making a compound plot of plots `p1`, `p2`, `p3` side-by-side.\n\n\n\n::: {.cell exercise='plots-side-by-side'}\n```{webr}\n#| fig-width: 8\n#| fig-height: 2.472\n#| exercise: plots-side-by-side\n\n```\n:::\n\n\n\n::: { .solution exercise=\"plots-side-by-side\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\np1 | p2 | p3\n```\n:::\n:::\n\nTo show plots on top of one-another, we use the operator `/`, as in `p1 / p2`. Try this by making a compound plot of plots `p1`, `p2`, `p3` on top of each other.\n\n\n\n::: {.cell exercise='plots-on-top'}\n```{webr}\n#| fig-width: 4\n#| fig-height: 6\n#| exercise: plots-on-top\n\n```\n:::\n\n\n\n::: { .solution exercise=\"plots-on-top\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\np1 / p2 / p3\n```\n:::\n:::\n\nWe can also use parentheses to group plots with respect to the operators `|` and `/`. For example, we can place several plots side-by-side and then place this entire row of plots on top of another plot. Try this out.\n\n\n\n::: {.cell exercise='plots-complex'}\n```{webr}\n#| exercise: plots-complex\n\n```\n:::\n\n\n\n::: { .hint exercise=\"plots-complex\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\n(___) / p4\n```\n:::\n:::\n\n::: { .solution exercise=\"plots-complex\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\n(p1 | p2 | p3 ) / p4\n```\n:::\n:::\n\n\n## Plot annotations\n\nThe **patchwork** package provides a powerful annotation system via the `plot_annotation()` function that can be added to a plot assembly. For example, we can add plot tags (the labels in the upper left corner identifying the plots) via the plot annotation `tag_levels`. You can set `tag_levels = \"A\"` to generate tags A, B, C, etc. Try this out.\n\n\n\n::: {.cell exercise='plots-w-tags'}\n```{webr}\n#| exercise: plots-w-tags\n(p1 | p2 | p3 ) / p4\n```\n:::\n\n\n\n::: { .hint exercise=\"plots-w-tags\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\n(p1 | p2 | p3 ) / p4 +\n  plot_annotation(\n    ___\n  )\n```\n:::\n:::\n\n::: { .solution exercise=\"plots-w-tags\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\n(p1 | p2 | p3 ) / p4 +\n  plot_annotation(\n    tag_levels = \"A\"\n  )\n```\n:::\n:::\n\nTry also tag levels such as `\"a\"`, `\"i\"`, or `\"1\"`.\n\nYou can also add elements such as titles, subtitles, and captions, by setting the `title`, `subtitle`, or `caption` argument in `plot_annotation()`. Try this out by adding an overall title to the figure from the previous exercise.\n\n\n\n::: {.cell exercise='plots-w-title'}\n```{webr}\n#| exercise: plots-w-title\n```\n:::\n\n\n\n::: { .hint exercise=\"plots-w-title\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\n(p1 | p2 | p3 ) / p4 +\n  plot_annotation(\n    tag_levels = \"A\",\n    ___\n  )\n```\n:::\n:::\n\n::: { .solution exercise=\"plots-w-title\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\n(p1 | p2 | p3 ) / p4 +\n  plot_annotation(\n    tag_levels = \"A\",\n    title = \"Various observations about old cars\"\n  )\n```\n:::\n:::\n\nAlso set a subtitle and a caption.\n\nFinally, you can change the theme of all plots in the plot assembly via the `&` operator, as in `(p1 | p2) & theme_bw()`. Try this out.\n\n\n\n::: {.cell exercise='themeing'}\n```{webr}\n#| fig-width: 8\n#| fig-height: 4\n#| exercise: themeing\n\n```\n:::\n\n\n\n::: { .solution exercise=\"themeing\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\n(p1 | p2) & theme_bw()\n```\n:::\n:::\n\nWhat happens if you write this expression without parentheses? Do you understand why?\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}