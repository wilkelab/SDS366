{
  "hash": "0d3c81b8a698aeb343beb859f97bcd67",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Figure design\"\nauthor: \"Claus O. Wilke\"\nformat: live-html\nengine: knitr\nwebr:\n  render-df: gt-interactive\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n## Introduction\n\nIn this worksheet, we will discuss how to change and customize plot appearance through themes.\n\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| warning: false\n#| edit: false\nlibrary(tidyverse)\nlibrary(palmerpenguins)\nlibrary(cowplot)\n```\n:::\n\n\n\nWe will be working with the dataset `penguins`, which contains data on individual penguins on Antarctica.\n\n```r\npenguins\n```\n\n::: {.column-page}\n\n\n::: {.cell}\n```{webr}\n#| echo: false\npenguins\n```\n:::\n\n\n:::\n\n## Ready-made themes\n\nLet's start with this simple plot with no specific styling.\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE)  # na.rm = TRUE prevents warning about missing values\n```\n:::\n\n\n\nThe default ggplot theme is `theme_gray()`. Verify that adding this theme to the plot makes no difference in the output. Then change the overall font size by providing the theme function with a numeric font size argument, e.g. `theme_gray(16)`.\n\n\n\n::: {.cell exercise='penguins-simple-theme-gray'}\n```{webr}\n#| exercise: penguins-simple-theme-gray\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  ___\n```\n:::\n\n\n\n::: { .solution exercise=\"penguins-simple-theme-gray\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme_gray()\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme_gray(16)\n```\n:::\n:::\n\nThe **ggplot2** package has many built-in themes, including `theme_minimal()`, `theme_bw()`, `theme_void()`, `theme_dark()`. Try these different themes on the above plot. Also try again changing the font size. You can see all themes provided by **ggplot2** here: https://ggplot2.tidyverse.org/reference/ggtheme.html\n\n\n\n::: {.cell exercise='penguins-simple-theme-ggplot2'}\n```{webr}\n#| exercise: penguins-simple-theme-ggplot2\n\n```\n:::\n\n\n\n::: { .solution exercise=\"penguins-simple-theme-ggplot2\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme_bw(12)\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme_minimal(14)\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme_void()\n```\n:::\n:::\n\n\nMany other packages also provide themes. For example, the **cowplot** package provides themes `theme_half_open()`, `theme_minimal_grid()`, `theme_minimal_hgrid()`, and `theme_minimal_vgrid()`. You can see all **cowplot** themes here: https://wilkelab.org/cowplot/articles/themes.html\nTry these out.\n\n\n\n::: {.cell exercise='penguins-simple-theme-cowplot'}\n```{webr}\n#| exercise: penguins-simple-theme-cowplot\n\n```\n:::\n\n\n\n::: { .solution exercise=\"penguins-simple-theme-cowplot\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme_half_open()\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme_minimal_grid()\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme_minimal_hgrid()\n```\n:::\n:::\n\nCompare the visual appearance of `theme_minimal()` from **ggplot2** to `theme_minimal_grid()` from **cowplot**. What similarities and differences to you notice? Which do you prefer? (There is no correct answer here, just be aware of the differences and of your preferences.)\n\n\n\n::: {.cell exercise='penguins-simple-theme-minimal'}\n```{webr}\n#| exercise: penguins-simple-theme-minimal\n\n```\n:::\n\n\n\n::: { .solution exercise=\"penguins-simple-theme-minimal\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme_minimal()\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme_minimal_grid()\n```\n:::\n:::\n\n## Modifying theme elements\n\nYou can modify theme elements by adding a `theme()` call to the plot. Inside the `theme()` call you specify which theme element you want to modify (e.g., `axis.title`, `axis.text.x`, `panel.background`, etc) and what changes you want to make. For example, to make axis titles blue, you would write:\n\n```r\ntheme(\n  axis.title = element_text(color = \"blue\")\n)\n```\n\nThere are many theme settings, and for each one you need to know what type of an element it is (for example, `element_text()`, `element_line()`, `element_rect()` for text, lines, or rectangles, respectively). A complete description of the available options is available at the **ggplot2** website: https://ggplot2.tidyverse.org/reference/theme.html\n\nHere, we will only try a few simple things. For example, see if you can make the legend title blue and the legend text red.\n\n\n\n::: {.cell exercise='penguins-simple-legend'}\n```{webr}\n#| exercise: penguins-simple-legend\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE)\n```\n:::\n\n\n\n::: { .hint exercise=\"penguins-simple-legend\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme(\n    legend.title = ___,\n    legend.text = ___\n  )\n```\n:::\n:::\n\n::: { .solution exercise=\"penguins-simple-legend\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme(\n    legend.title = element_text(color = \"blue\"),\n    legend.text = element_text(color = \"red\")\n  )\n```\n:::\n:::\n\n\nNow color the area behind the legend in `\"aliceblue\"`. **Hint:** The theme element you need to change is called `legend.background`. There is also an element `legend.box.background` but it is only visible if `legend.background` is not shown, and in the default **ggplot2** themes that is not the case.\n\n\n\n::: {.cell exercise='penguins-simple-legend-background'}\n```{webr}\n#| exercise: penguins-simple-legend-background\n\n```\n:::\n\n\n\n::: { .hint exercise=\"penguins-simple-legend-background\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme(\n    legend.background = element_rect(___)\n  )\n```\n:::\n:::\n\n::: { .solution exercise=\"penguins-simple-legend-background\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme(\n    legend.background = element_rect(fill = \"aliceblue\")\n  )\n```\n:::\n:::\n\n\nAnother commonly used feature in themes are margins. Many parts of the plot theme can understand customized margins, which control how much spacing there is between different parts of a plot. Margins are typically specified with the function `margin()`, which takes four numbers specifying the margins in points, in the order top, right, bottom, left. So, `margin(10, 5, 5, 10)` would specify a top margin of 10pt, a right margin of 5pt, a bottom margin of 5pt, and a left margin of 10pt.\n\nTry this out by setting the legend margin (element `legend.margin`) such that there is no top and no bottom margin but 10pt left and right margin.\n\n\n\n::: {.cell exercise='penguins-simple-margin'}\n```{webr}\n#| exercise: penguins-simple-margin\n\n```\n:::\n\n\n\n::: { .hint exercise=\"penguins-simple-margin\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme(\n    legend.background = element_rect(fill = \"aliceblue\"),\n    legend.margin = margin(___)\n  )\n```\n:::\n:::\n\n::: { .solution exercise=\"penguins-simple-margin\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme(\n    legend.background = element_rect(fill = \"aliceblue\"),\n    legend.margin = margin(0, 10, 0, 10)\n  )\n```\n:::\n:::\n\nThere are many other things you can do. Try at least some of the following:\n\n- Change the horizontal or vertical justification of text with `hjust` and `vjust`.\n- Change the font family with `family`.<sup>1</sup>\n- Change the panel grid. For example, create only horizontal lines, or only vertical lines.\n- Change the overall margin of the plot with `plot.margin`.\n- Move the position of the legend with `legend.position` and `legend.justification`.\n- Turn off some elements by setting them to `element_blank()`.\n\n<sup>1</sup> Getting fonts to work well can be tricky in R. Which specific fonts work depends on the graphics device and the operating system. The following fonts work on the edupod class server: `\"Palatino\"`, `\"Times\"`, `\"Helvetica\"`, `\"Courier\"`, `\"ITC Bookman\"`, `\"ITC Avant Garde Gothic\"`, `\"ITC Zapf Chancery\"`.\n\n## Writing your own theme\n\nYou can write a theme by taking an existing theme and making some modifications, like so:\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\ntheme_colorful <-\n  theme_bw() +\n  theme(\n    text = element_text(color = \"mediumblue\"),\n    axis.text = element_text(color = \"springgreen4\"),\n    legend.text = element_text(color = \"firebrick4\")\n  )\n```\n:::\n\n\n\nNow try this out on the penguins scatter plot.\n\n**Hint:** When using this theme, do you have to add `theme_colorful` or `theme_colorful()` to the plot? Do you understand which option is correct and why? If you are unsure, try both and see what happens.\n\n\n\n::: {.cell exercise='penguins-simple-theme-colorful'}\n```{webr}\n#| exercise: penguins-simple-theme-colorful\n\n```\n:::\n\n\n\n::: { .hint exercise=\"penguins-simple-theme-colorful\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  ___\n```\n:::\n:::\n\n::: { .solution exercise=\"penguins-simple-theme-colorful\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme_colorful\n```\n:::\n:::\n\nNow write your own theme and then add it to the penguins plot.\n\n\n\n::: {.cell exercise='penguins-own-theme'}\n```{webr}\n#| exercise: penguins-own-theme\n\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}