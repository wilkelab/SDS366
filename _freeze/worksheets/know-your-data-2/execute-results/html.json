{
  "hash": "554dbbc984c2cecc53ecf155323fd3e8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Getting to know your data 2\"\nauthor: \"Claus O. Wilke\"\nformat: live-html\nengine: knitr\nwebr:\n  render-df: gt-interactive\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n## Introduction\n\nIn this worksheet, we will discuss how to work with missing values in R.\n\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| warning: false\n#| edit: false\nlibrary(tidyverse)\nlibrary(naniar)\n```\n:::\n\n\n\n\n\nWe will be working with the R built-in dataset `airquality`, which contains daily air quality measurements in New York, May to September 1973. The data columns are mean ozone in parts per billion, solar radiation in Langleys, average wind speed in miles per hour, maximum temperature in Fahrenheit, and numeric month and day of the month.\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\nairquality\n```\n:::\n\n\n\n\n\n## Reading csv files with missing values\n\nWe will first talk about how to replace specific values with `NA` when reading in data files. We prepare a simple comma-separated values (CSV) file with four columns, `a`, `b`, `c`, and `d`, which all use different ways to indicate a missing value.\n\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\nsimple_csv <- \"\na, b, c, d\ndog,#N/A,2,3\n,3,NA,2\ncat,5,3,-99\n\"\n```\n:::\n\n\n\n\n\nIn column `a`, second row, a field is completely empty, the line starts with a comma. In column `b`, first row, a missing value is indicated with `#N/A`. In column `c`, second row, a missing value is indicated with `NA`. In column `d`, fourth row, a missing value is indicated with `-99`.\n\nIf we read this input with `read_csv()`, we can see that the missing values in columns `a` and `c` are treated correctly but the others are not.\n\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\nread_csv(simple_csv)\n```\n:::\n\n\n\n\n\nThis outcome is determined by the `na` argument of `read_csv()`. By default, it is set to `na = c(\"\", \"NA\")`, which handles empty cells and cells containing `NA` correctly. Modify this argument so that the entire table is read correctly.\n\n\n\n\n\n::: {.cell exercise='read_csv-NA'}\n```{webr}\n#| exercise: read_csv-NA\n\n```\n:::\n\n\n\n\n\n::: { .hint exercise=\"read_csv-NA\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nread_csv(simple_csv, na = ___)\n```\n:::\n:::\n\n::: { .solution exercise=\"read_csv-NA\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nread_csv(simple_csv, na = c(\"\", \"NA\", \"#N/A\", \"-99\"))\n```\n:::\n:::\n\nAlso try other options to see what happens. For example, how does the result change if you remove the empty string from the `na` argument?\n\n\nAs an alternative to defining a global set of character strings that should be interpreted as missing values, you can make the substitution on a column-by-column basis, via the function  `replace_with_na_at()` from the **naniar** package. This function allows you to specify one or more columns to work on and the specific data values that should be replaced with `NA`. The first argument to the function is the name of the data column on which you want to operate, given as a string, and the second argument is a logical expression determining whether replacement should be made or not, given as a formula. For example, the following code replaces `-99` with `NA` in column `d`:\n\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\nread_csv(simple_csv) |>\n  replace_with_na_at(\"d\", ~.x == \"-99\")\n```\n:::\n\n\n\n\n\nNow use this same construct to replace the string `#N/A` with `NA` in column `b`.\n\n\n\n\n\n::: {.cell exercise='read_csv-replace_at'}\n```{webr}\n#| exercise: read_csv-replace_at\n\n```\n:::\n\n\n\n\n\n::: { .hint exercise=\"read_csv-replace_at\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nread_csv(simple_csv) |>\n  replace_with_na_at(___)\n```\n:::\n:::\n\n::: { .solution exercise=\"read_csv-replace_at\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nread_csv(simple_csv) |>\n  replace_with_na_at(\"b\", ~.x == \"#N/A\")\n```\n:::\n:::\n\nDo you see any remaining issues with this result?\n\n## Computing with missing values\n\nWhen performing common summary calculations, such as calculating the mean of a numerical column, any missing values will cause the final result to be `NA`. For example, if you wanted to calculate the mean ozone value in the airquality dataset, you might see the following:\n\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\nmean(airquality$Ozone)\n```\n:::\n\n\n\n\n\nIf you are certain that it is Ok to ignore missing values in your summary calculation, you can set the argument `na.rm = TRUE` inside the `mean()` function. Try this.\n\n\n\n\n\n::: {.cell exercise='mean-with-NA'}\n```{webr}\n#| exercise: mean-with-NA\nmean(airquality$Ozone) # not ignoring NA values\nmean(airquality$Ozone, ___) # ignoring NA values\n```\n:::\n\n\n\n\n\n::: { .hint exercise=\"mean-with-NA\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nmean(airquality$Ozone) # not ignoring NA values\nmean(airquality$Ozone, na.rm = ___) # ignoring NA values\n```\n:::\n:::\n\n::: { .solution exercise=\"mean-with-NA\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nmean(airquality$Ozone) # not ignoring NA values\nmean(airquality$Ozone, na.rm = TRUE) # ignoring NA values\n```\n:::\n:::\n\nNow try the same with the median, the maximum, and the sum of the `Ozone` column.\n\n\n\n\n\n::: {.cell exercise='various-with-NA'}\n```{webr}\n#| exercise: various-with-NA\n\n```\n:::\n\n\n\n\n\n::: { .solution exercise=\"various-with-NA\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nmedian(airquality$Ozone)\nmedian(airquality$Ozone, na.rm = TRUE)\nmax(airquality$Ozone)\nmax(airquality$Ozone, na.rm = TRUE)\nsum(airquality$Ozone)\nsum(airquality$Ozone, na.rm = TRUE)\n```\n:::\n:::\n\nTo test whether a specific value is missing, you cannot use the standard comparison operator `==`. Instead, you have to use the function `is.na()`. Try this out by retaining only the rows in `airquality` for which the `Ozone` column contains a missing value.\n\n\n\n\n\n::: {.cell exercise='filter-NA'}\n```{webr}\n#| exercise: filter-NA\nairquality |>\n  filter(___)\n```\n:::\n\n\n\n\n\n::: { .hint exercise=\"filter-NA\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nairquality |>\n  filter(is.na(___))\n```\n:::\n:::\n\n::: { .solution exercise=\"filter-NA\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nairquality |>\n  filter(is.na(Ozone))\n```\n:::\n:::\n\nNow do the opposite. Retain only the rows for which the `Ozone` column does not contain a missing value.\n\n\n\n\n\n::: {.cell exercise='filter-not-NA'}\n```{webr}\n#| exercise: filter-not-NA\n```\n:::\n\n\n\n\n\n::: { .solution exercise=\"filter-not-NA\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nairquality |>\n  filter(!is.na(Ozone))\n```\n:::\n:::\n\n## Visualizing missing values\n\nIt is also useful to be able to visualize missing values easily. By default, when we make for example a scatter plot, missing values are simply not shown, and instead ggplot gives us a warning about missing values.\n\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\nggplot(airquality, aes(x = Solar.R, y = Ozone)) +\n geom_point()\n```\n:::\n\n\n\n\n\nThis is not very helpful, because we don't know where the values are missing. In this specific example, are they missing in the `Ozone` column or in the `Solar.R` column? And also, we may want to know whether missing values in one column coincide with particular values in the other column.\n\nThis can be addressed by using `geom_miss_point()` from the **naniar** package. Try this out.\n\n\n\n\n\n::: {.cell exercise='missing-scatter'}\n```{webr}\n#| exercise: missing-scatter\n\n```\n:::\n\n\n\n\n\n::: { .solution exercise=\"missing-scatter\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(airquality, aes(x = Solar.R, y = Ozone)) +\n geom_miss_point()\n```\n:::\n:::\n\nThe **naniar** package has various other methods to visualize missing values. For example, `gg_miss_var()` will provide an overall summary of how many missing values there are in each column in the data frame. Try this out.\n\n\n\n\n\n::: {.cell exercise='missing-summary'}\n```{webr}\n#| exercise: missing-summary\n\n```\n:::\n\n\n\n\n\n::: { .solution exercise=\"missing-summary\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\ngg_miss_var(airquality)\n```\n:::\n:::\n",
    "supporting": [
      "know-your-data-2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}