{
  "hash": "53adaa39b53b806d65b6d7ca60193366",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Visualizing distributions 2\"\nauthor: \"Claus O. Wilke\"\nformat: live-html\nengine: knitr\nwebr:\n  render-df: gt-interactive\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n## Introduction\n\nIn this worksheet, we will discuss how to display many distributions at once, using boxplots, violin plots, strip charts, sina plots, and ridgeline plots.\n\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| warning: false\n#| edit: false\nlibrary(tidyverse)\nlibrary(ggforce)\nlibrary(ggridges)\n```\n:::\n\n\n\nNext we set up the data.\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\n#| warning: false\nlincoln_temps <- readRDS(url(\"https://wilkelab.org/SDS366/datasets/lincoln_temps.rds\"))\n```\n:::\n\n\n\nThe dataset we will be working with contains information about the mean temperature for every day of the year 2016 in Lincoln, NE:\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\nlincoln_temps\n```\n:::\n\n\n\n## Boxplots and violins\n\nWe start by drawing the distributions of mean temperatures for each month of the year (columns `month` and `mean_temp` in the dataset `lincoln_temps`), using boxplots. We can do this in ggplot with the geom `geom_boxplot()`. Try this for yourself.\n\n\n\n::: {.cell exercise='lincoln-box'}\n```{webr}\n#| exercise: lincoln-box\nggplot(lincoln_temps, aes(___)) +\n  ___\n```\n:::\n\n\n\n::: { .hint exercise=\"lincoln-box\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nggplot(lincoln_temps, aes(x = ___, y = ___)) +\n  geom_boxplot()\n```\n:::\n:::\n\n::: { .solution exercise=\"lincoln-box\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_boxplot()\n```\n:::\n:::\n\nNext, do the same but now using violins (`geom_violin()`) instead of boxplots.\n\n\n\n::: {.cell exercise='lincoln-violin'}\n```{webr}\n#| exercise: lincoln-violin\n\n```\n:::\n\n\n\n::: { .solution exercise=\"lincoln-violin\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_violin()\n```\n:::\n:::\n\nCustomize the violins by trying some of the following:\n\n- Change the fill or outline color.\n- Swap the x and y mappings.\n- Change the bandwidth (parameter `bw`) or kernel (parameter `kernel`). These parameters work just like in `geom_density()` as discussed in the previous worksheet.\n- Set `trim = FALSE`. What does this do?\n\n\n## Strip charts and jittering\n\nBoth boxplots and violin plots have the disadvantage that they don't show the individual data points. We can show individual data points by using `geom_point()`. Such a plot is called a *strip chart*.\n\nMake a strip chart for the Lincoln temperature data set. Hint: Use `size = 0.75` to reduce the size of the individual points.\n\n\n\n::: {.cell exercise='lincoln-strip'}\n```{webr}\n#| exercise: lincoln-strip\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  ___\n```\n:::\n\n\n\n::: { .hint exercise=\"lincoln-strip\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_point(___)\n```\n:::\n:::\n\n::: { .solution exercise=\"lincoln-strip\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_point(size = 0.75)\n```\n:::\n:::\n\nFrequently when we make strip charts we want to apply some jitter to separate points away from each other. We can do so by setting the argument `position = position_jitter()` in `geom_point()`.\n\nWhen using `position_jitter()` we will normally have to specify how much jittering we want in the horizontal and vertical direction, by setting the `width` and `height` arguments: `position_jitter(width = 0.15, height = 0)`. Both `width` and `height` are specified in units representing the resolution of the data points, and indicate jittering in either direction. So, if data points are 1 unit apart, then `width = 0.15` means the jittering covers 0.3 units or 30% of the spacing of the data points.\n\nTry this for yourself, by making a strip chart with jittering.\n\n\n\n::: {.cell exercise='lincoln-strip-jitter'}\n```{webr}\n#| exercise: lincoln-strip-jitter\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_point(\n    size = 0.75,\n    ___\n  )\n```\n:::\n\n\n\n::: { .hint exercise=\"lincoln-strip-jitter\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_point(\n    size = 0.75,\n    position = position_jitter(___)\n  )\n```\n:::\n:::\n\n::: { .solution exercise=\"lincoln-strip-jitter\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_point(\n    size = 0.75,\n    position = position_jitter(width = 0.15, height = 0)\n  )\n```\n:::\n:::\n\nThe function `position_jitter()` applies random jittering to the data points, which means the plot looks different each time you make it. (Verify this.) We can force a specific, fixed arrangement of jittering by setting the `seed` parameter. This parameter takes an arbitrary integer value, e.g. `seed = 1234`. Try this out.\n\n\n\n::: {.cell exercise='lincoln-strip-jitter2'}\n```{webr}\n#| exercise: lincoln-strip-jitter2\n```\n:::\n\n\n\n::: { .hint exercise=\"lincoln-strip-jitter2\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_point(\n    size = 0.75,\n    position = position_jitter(width = 0.15, height = 0, seed = ___)\n  )\n```\n:::\n:::\n\n::: { .solution exercise=\"lincoln-strip-jitter2\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_point(\n    size = 0.75,\n    position = position_jitter(width = 0.15, height = 0, seed = 1234)\n  )\n```\n:::\n:::\n\nFinally, try to figure out what the parameter `height` does, by setting it to a value other than 0, or by removing it entirely. \n\n## Sina plots\n\nWe can create a combination of strip charts and violin plots by making sina plots, which jitter points into the shape of a violin. We can do this with `geom_sina()` from the **ggforce** package. Try this out.\n\n\n\n::: {.cell exercise='lincoln-sina'}\n```{webr}\n#| exercise: lincoln-sina\n\n```\n:::\n\n\n\n::: { .solution exercise=\"lincoln-sina\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_sina(size = 0.75)\n```\n:::\n:::\n\nIt often makes sense to draw a sina plot on top of a violin plot. Try this out.\n\n\n\n::: {.cell exercise='lincoln-sina2'}\n```{webr}\n#| exercise: lincoln-sina2\n\n```\n:::\n\n\n\n::: { .solution exercise=\"lincoln-sina2\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_violin() +\n  geom_sina(size = 0.75)\n```\n:::\n:::\n\nFinally, customize the violins by removing the outline and changing the fill color.\n\n\n\n::: {.cell exercise='lincoln-sina3'}\n```{webr}\n#| exercise: lincoln-sina3\n\n```\n:::\n\n\n\n::: { .solution exercise=\"lincoln-sina3\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_violin(color = NA, fill = \"cornsilk\") +  # `NA` means no color\n  geom_sina(size = 0.75)\n```\n:::\n:::\n\n## Ridgeline plots\n\nAs the last alternative for visualizing multiple distributions at once, we will make ridgeline plots. These are multiple density plots staggered vertically. In ridgeline plots, we normally map the grouping variable (e.g. here, the month) to the y axis and the dependent variable (e.g. here, the mean temperature) to the x axis.\n\nWe can create ridgeline plots using `geom_density_ridges()` from the **ggridges** package. Try this out. Use the column `month_long` instead of `month` for the name of the month to get a slightly nicer plot. Hint: If you get an error about a missing y aesthetic you need to swap your x and y mappings.\n\n\n\n::: {.cell exercise='lincoln-ridges'}\n```{webr}\n#| exercise: lincoln-ridges\n\n```\n:::\n\n\n\n::: { .solution exercise=\"lincoln-ridges\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(lincoln_temps, aes(x = mean_temp, y = month_long)) +\n  geom_density_ridges()\n```\n:::\n:::\n\nWhat happens when you use `month` instead of `month_long`? Can you explain why?\n\nIt is often a good idea to prune the ridgelines once they are close to zero. You can do this with the parameter `rel_min_height`, which takes a numeric value relative to the maximum height of any ridgeline anywhere in the plot. So, `rel_min_height = 0.01` would prune all lines that are less than 1% of the maximum height in the plot.\n\n\n\n::: {.cell exercise='lincoln-ridges2'}\n```{webr}\n#| exercise: lincoln-ridges2\n\n```\n:::\n\n\n\n::: { .hint exercise=\"lincoln-ridges2\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nggplot(lincoln_temps, aes(x = mean_temp, y = month_long)) +\n  geom_density_ridges(rel_min_height = ___)\n```\n:::\n:::\n\n::: { .solution exercise=\"lincoln-ridges2\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(lincoln_temps, aes(x = mean_temp, y = month_long)) +\n  geom_density_ridges(rel_min_height = 0.01)\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}