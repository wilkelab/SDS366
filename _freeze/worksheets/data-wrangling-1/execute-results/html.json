{
  "hash": "1f182fc8ce035ccf58a00ee90d8ac454",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data wrangling 1\"\nauthor: \"Claus O. Wilke\"\nformat: live-html\nengine: knitr\nwebr:\n  render-df: gt-interactive\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n\n## Introduction\n\nIn this worksheet, we will discuss how to perform basic data manipulations, such as filtering data rows that meet certain conditions, choosing data columns, and arranging data in ascending or descending order.\n\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| warning: false\n#| edit: false\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n```\n:::\n\n\n\n\nNext we set up the data. We will be working with data on individual penguins in Antarctica.\n```r\npenguins\n```\n\n::: {.column-page}\n\n\n\n::: {.cell}\n```{webr}\n#| echo: false\npenguins\n```\n:::\n\n\n\n:::\n\n\n\n## The pipe (symbol `|>`, read \"and then\")\n\nWhen writing complex data analysis pipelines, we frequently use the pipe operator `|>` to move data from one analysis step to the next. The pipe is pronounced \"and then\", and it takes the data on its left and uses it as the first argument for the function on its right.\n\nFor example, to see the first few lines of a dataset, we often write `head(data)`. Instead, we can write `data |> head()`.\n\nTry this yourself. Write code that displays the first few lines of the `penguins` dataset, using `|>` and `head()`:\n\n\n\n\n::: {.cell exercise='head'}\n```{webr}\n#| exercise: head\npenguins\n```\n:::\n\n\n\n\n::: { .hint exercise=\"head\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\npenguins ___ head()\n```\n:::\n:::\n\n::: { .solution exercise=\"head\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\npenguins |> head()\n```\n:::\n:::\n\nIn older R code, you may also see `%>%` (called the \"magrittr\" pipe) instead of `|>` (the \"native\" pipe). While these two operators have subtle differences, for all intents and purposes you can treat them interchangeably. Try the previous exercise with the magrittr pipe instead of the native pipe.\n\n\n\n\n::: {.cell exercise='head2'}\n```{webr}\n#| exercise: head2\n```\n:::\n\n\n\n\n::: { .hint exercise=\"head2\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\npenguins ___ head()\n```\n:::\n:::\n\n::: { .solution exercise=\"head2\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\npenguins %>% head()\n```\n:::\n:::\n\n\n## Choosing data rows\n\nThe function `filter()` allows you to find rows in a dataset that meet one or more specific conditions. The syntax is `data |> filter(condition)`, where condition is a logical condition. For example, `filter(x > 5)` would pick all rows for which the value in column `x` is greater than 5.\n\nAs an example, the following code picks all penguins from the island Biscoe:\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\npenguins |>\n  filter(island == \"Biscoe\")\n```\n:::\n\n\n\n\nNow it's your turn. Pick all penguins from the island Dream:\n\n\n\n\n::: {.cell exercise='filter-island'}\n```{webr}\n#| exercise: filter-island\npenguins |>\n  filter(___)\n```\n:::\n\n\n\n\n::: { .solution exercise=\"filter-island\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\npenguins |>\n  filter(island == \"Dream\")\n```\n:::\n:::\n\nYou can also state multiple conditions, separated by a comma. For example, `filter(x > 5, y < 2)` would pick all rows for which the value in the column `x` is greater than 5 and the value in the column `y` is less than 2. Note that the conditions are combined via logical AND, both need to be satisfied for the row to be picked.\n\nTo try this out, pick all penguins of species Chinstrap from the island Dream:\n\n\n\n\n::: {.cell exercise='filter-species-island'}\n```{webr}\n#| exercise: filter-species-island\n\n```\n:::\n\n\n\n\n::: { .hint exercise=\"filter-species-island\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\npenguins |>\n  filter(species == ___, island == ___)\n```\n:::\n:::\n\n::: { .solution exercise=\"filter-species-island\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\npenguins |>\n  filter(species == \"Chinstrap\", island == \"Dream\")\n```\n:::\n:::\n\n## Choosing data columns\n\nThe function `select()` allows you to pick specific data columns by name. This is frequently useful when a dataset has many more columns than we are interested in at the time. For example, if we are only interested in the penguins' species, island, and sex, we could select these three columns:\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\npenguins |>\n  select(species, island, sex)\n```\n:::\n\n\n\n\nTry this yourself, picking the columns representing the penguin species (`species`), the bill length (`bill_length_mm`), and then flipper length (`flipper_length_mm`).\n\n\n\n\n::: {.cell exercise='select-exercise'}\n```{webr}\n#| exercise: select-exercise\n\n```\n:::\n\n\n\n\n::: { .hint exercise=\"select-exercise\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\npenguins |>\n  select(___)\n```\n:::\n:::\n\n::: { .solution exercise=\"select-exercise\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\npenguins |>\n  select(species, bill_length_mm, flipper_length_mm)\n```\n:::\n:::\n\nAnother situation that arises frequently is one where we want to remove specific columns. We can also do this with `select()`, but now write `select(-column)` to remove one or more columns.\n\nTry this. Remove the column `species`.\n\n\n\n\n::: {.cell exercise='select-remove'}\n```{webr}\n#| exercise: select-remove\n\n```\n:::\n\n\n\n\n::: { .hint exercise=\"select-remove\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\npenguins |>\n  select(___)\n```\n:::\n:::\n\n::: { .solution exercise=\"select-remove\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\npenguins |>\n  select(-species)\n```\n:::\n:::\n\nAnd now remove both `species` and `island`.\n\n\n\n\n::: {.cell exercise='select-remove2'}\n```{webr}\n#| exercise: select-remove2\n\n```\n:::\n\n\n\n\n::: { .hint exercise=\"select-remove2\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\npenguins |>\n  select(-___, -___)\n```\n:::\n:::\n\n::: { .solution exercise=\"select-remove2\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\npenguins |>\n  select(-species, -island)\n```\n:::\n:::\n\n## Sorting data\n\nThe function `arrange()` allows you to sort data by one or more columns. For example, `data |> arrange(x)` would sort the data by increasing values of `x`, and `data |> arrange(x, y)` would sort the data first by `x` and then, for ties in `x`, by `y`.\n\nAs an example, the following code sorts penguins by their flipper length:\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\npenguins |>\n  arrange(flipper_length_mm)\n```\n:::\n\n\n\n\nNow it's your turn. Sort the penguins by bill length:\n\n\n\n\n::: {.cell exercise='arrange-bill-length'}\n```{webr}\n#| exercise: arrange-bill-length\n```\n:::\n\n\n\n\n::: { .hint exercise=\"arrange-bill-length\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\npenguins |>\n  arrange(___)\n```\n:::\n:::\n\n::: { .solution exercise=\"arrange-bill-length\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\npenguins |>\n  arrange(bill_length_mm)\n```\n:::\n:::\n\nTo arrange data in descending order, enclose the data column in `desc()`. For example, `data |> arrange(desc(x))` would sort the data by decreasing values of `x`. (`desc` stands for \"descending\".)\n\nTry this out. Sort the penguins by bill length, from largest to smallest:\n\n\n\n\n::: {.cell exercise='arrange-bill-length2'}\n```{webr}\n#| exercise: arrange-bill-length2\n```\n:::\n\n\n\n\n::: { .hint exercise=\"arrange-bill-length2\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\npenguins |>\n  arrange(___(bill_length_mm))\n```\n:::\n:::\n\n::: { .solution exercise=\"arrange-bill-length2\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\npenguins |>\n  arrange(desc(bill_length_mm))\n```\n:::\n:::\n\n\n## Counting\n\nWe frequently want to count how many times a particular value or combination of values occurs in a dataset. We do this using the `count()` function. For example, the following code counts how many penguins of the different species there are in the `penguins` dataset.\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\npenguins |>\n  count(species)\n```\n:::\n\n\n\n\nNow try this yourself. Count how many male and female penguins there are.\n\n\n\n\n::: {.cell exercise='count-simple'}\n```{webr}\n#| exercise: count-simple\n\n```\n:::\n\n\n\n\n::: { .hint exercise=\"count-simple\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\npenguins |>\n  count(___)\n```\n:::\n:::\n\n::: { .solution exercise=\"count-simple\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\npenguins |>\n  count(sex)\n```\n:::\n:::\n\nWe can also perform more fine-grained counts, by providing the `count()` function with more than one column name. See if you can count how many male and female penguins the dataset contains for each species. \n\n\n\n\n::: {.cell exercise='count-complex'}\n```{webr}\n#| exercise: count-complex\n\n```\n:::\n\n\n\n\n::: { .hint exercise=\"count-complex\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\npenguins |>\n  count(___, sex)\n```\n:::\n:::\n\n::: { .solution exercise=\"count-complex\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\npenguins |>\n  count(species, sex)\n```\n:::\n:::\n\n\nNow count how many penguins of each species the dataset contains for each island. \n\n\n\n\n::: {.cell exercise='count-complex2'}\n```{webr}\n#| exercise: count-complex2\n\n```\n:::\n\n\n\n\n::: { .hint exercise=\"count-complex2\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\npenguins |>\n  count(___, species)\n```\n:::\n:::\n\n::: { .solution exercise=\"count-complex2\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\npenguins |>\n  count(island, species)\n```\n:::\n:::\n\n\n## Chaining analysis steps into pipelines\n\nWe can chain multiple analysis steps into a pipeline by continuing to add \"and then\" statements. For example, `data |> count(...) |> arrange(...)` would first count and then sort the data.\n\nTry this out by counting the number of penguins of each species and then sorting by the number of penguins.\n\n\n\n\n::: {.cell exercise='analysis-chain'}\n```{webr}\n#| exercise: analysis-chain\n\n```\n:::\n\n\n\n\n::: { .hint exercise=\"analysis-chain\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\npenguins |>\n  count(___) |>\n  arrange(___)\n```\n:::\n:::\n\n::: { .solution exercise=\"analysis-chain\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\npenguins |>\n  count(species) |>\n  arrange(n)\n```\n:::\n:::\n\nYou may remember from before that the default sorting is from the smallest to the largest value. Repeat the previous exercise but now arrange the penguin species from the most frequent to the least frequent:\n\n\n\n\n::: {.cell exercise='analysis-chain2'}\n```{webr}\n#| exercise: analysis-chain2\n\n```\n:::\n\n\n\n\n::: { .hint exercise=\"analysis-chain2\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\npenguins |>\n  count(species) |>\n  arrange(___)\n```\n:::\n:::\n\n::: { .solution exercise=\"analysis-chain2\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\npenguins |>\n  count(species) |>\n  arrange(desc(n))\n```\n:::\n:::\n\n## Creating new data columns\n\nThe function `mutate()` allows you to add new columns to a data table. For example, `data |> mutate(sum = x + y)` would create a new column `sum` that is the sum of the columns `x` and `y`:\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\ndata <- tibble(x = 1:3, y = c(10, 20, 30))\ndata\n```\n:::\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\ndata |>\n  mutate(\n    sum = x + y\n  )\n```\n:::\n\n\n\n\nNote that the part to the left of the equals sign (here, `sum`) is the name of the new column, and the part to the right of the equals sign (here, `x + y`) is an R expression that evaluates to the values in the new column.\n\nNow apply this concept to the `penguins` dataset. Add a new column `bill_ratio` that is the ratio of bill length and bill depth:\n\n\n\n\n::: {.cell exercise='mutate-bill-ratio'}\n```{webr}\n#| exercise: mutate-bill-ratio\npenguins |>\n  select(species, bill_length_mm, bill_depth_mm) |>\n  mutate(\n    ___ = ___\n  )\n```\n:::\n\n\n\n\n::: { .hint exercise=\"mutate-bill-ratio\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\npenguins |>\n  select(species, bill_length_mm, bill_depth_mm) |>\n  mutate(\n    bill_ratio = ___\n  )\n```\n:::\n:::\n\n::: { .solution exercise=\"mutate-bill-ratio\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\npenguins |>\n  select(species, bill_length_mm, bill_depth_mm) |>\n  mutate(\n    bill_ratio = bill_length_mm / bill_depth_mm\n  )\n```\n:::\n:::\n\n## Counting with custom conditions\n\nIt is quite common that we want to count items that meet a specific condition. For example, let's say we want to count how many penguins of different species have flippers longer than 200mm. To do this efficiently, we first create a new column that indicates whether the condition is met or not, and we then use count with that indicator column.\n\nThe easiest way to create indicator columns is via the function `if_else()`, which takes three arguments: a condition, a result if the condition is met, and a result if the condition is not met. The following example shows how to create an indicator column showing whether a variable is positive or negative:\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\ndata <- tibble(x = c(-0.5, 2.3, 50, -1.4))\ndata\n```\n:::\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\ndata |>\n  mutate(\n    sign_of_x = if_else(x >= 0, \"positive\", \"negative\")\n  )\n```\n:::\n\n\n\n\nNow try this yourself. Count how many penguins of different species have flippers longer than 200mm. Then sort your results from most frequent to least frequent.\n\n\n\n\n::: {.cell exercise='flipper-length-count'}\n```{webr}\n#| exercise: flipper-length-count\npenguins |>\n  mutate(\n    ___\n  ) |>\n  count(___) |>\n  arrange(___)\n```\n:::\n\n\n\n\n::: { .hint exercise=\"flipper-length-count\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\npenguins |>\n  mutate(\n    flipper_length = if_else(___, \"greater than 200mm\", \"less than 200mm\")\n  ) |>\n  count(___, flipper_length) |>\n  arrange(___)\n```\n:::\n:::\n\n::: { .solution exercise=\"flipper-length-count\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\npenguins |>\n  mutate(\n    flipper_length = if_else(flipper_length_mm > 200, \"greater than 200mm\", \"less than 200mm\")\n  ) |>\n  count(species, flipper_length) |>\n  arrange(desc(n))\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}