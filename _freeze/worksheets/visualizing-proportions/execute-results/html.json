{
  "hash": "8b8fcfecd9c01051d234676b91181391",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Visualizing proportions\"\nauthor: \"Claus O. Wilke\"\nformat: live-html\nengine: knitr\nwebr:\n  render-df: gt-interactive\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n## Introduction\n\nIn this worksheet, we will discuss how to visualize proportions using stacked or dodged bar plots and pie charts.\n\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| warning: false\n#| edit: false\nlibrary(tidyverse)\nlibrary(ggforce)\n```\n:::\n\n\n\nNext we set up the data.\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\n#| warning: false\nbundestag <- tibble(\n  party = c(\"CDU/CSU\", \"SPD\", \"FDP\"),\n  seats = c(243, 214, 39)\n)\nmarketshare <- read_csv(\"https://wilkelab.org/SDS366/datasets/marketshare.csv\") |>\n  select(company, year, percent)\n```\n:::\n\n\n\nWe will be working with the dataset `bundestag`, which contains the composition of the German parliament (Bundestag) from 1976 to 1980.\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\nbundestag\n```\n:::\n\n\n\nWe will also be working with the dataset `marketshare`, which contains made-up information about the market share of five hypothetical companies, A, B, C, D, and E, over a time period of three years.\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\nmarketshare\n```\n:::\n\n\n\n\n## Bars in Cartesian and polar coordinates\n\nThere are three main approaches to visualizing proportions: Stacked bars, grouped (dodged) bars, and pie charts. From the perspective of ggplot, these are all bar charts with only minor tweaks, and we can make them all using `geom_bar()` or `geom_col()` (depending on whether the data source contains individual observations or summary counts). The first two types are created by setting position adjustments to `\"fill\"` and `\"dodge\"`, respectively, and the third type is created by setting the position adjustment to `\"fill\"` and adding `coord_polar()` to the plot.\n\nLet's try this on the `bundestag` dataset. We want to lay out the bars horizontally, so let's map the number of seats (`seats`) to `x` and map `party` to `fill`. We have nothing to map to `y`, but ggplot needs something there to generate the plot, so we can write for example `y = \"abc\"`. (Instead of `\"abc\"`, you can use any string you want.) First, make a stacked bar plot using these ideas. Remember that the correct geom in this context is `geom_col()`, as the dataset contains summary counts. Also, the position adjustment should be `\"fill\"`, to show the numbers as relative proportions.\n\n\n\n::: {.cell exercise='bundestag-stacked'}\n```{webr}\n#| exercise: bundestag-stacked\nggplot(bundestag, aes(x = ___, y = \"abc\", fill = ___)) +\n  geom_col(___)\n```\n:::\n\n\n\n::: { .hint exercise=\"bundestag-stacked\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nggplot(bundestag, aes(x = seats, y = \"abc\", fill = party)) +\n  geom_col(position = ___)\n```\n:::\n:::\n\n::: { .solution exercise=\"bundestag-stacked\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(bundestag, aes(x = seats, y = \"abc\", fill = party)) +\n  geom_col(position = \"fill\")\n```\n:::\n:::\n\nNext, modify this plot so the bars a side-by-side rather than stacked.\n\n\n\n::: {.cell exercise='bundestag-dodged'}\n```{webr}\n#| exercise: bundestag-dodged\n\n```\n:::\n\n\n\n::: { .hint exercise=\"bundestag-dodged\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nggplot(bundestag, aes(x = seats, y = \"abc\", fill = party)) +\n  geom_col(position = ___)\n```\n:::\n:::\n\n::: { .solution exercise=\"bundestag-dodged\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(bundestag, aes(x = seats, y = \"abc\", fill = party)) +\n  geom_col(position = \"dodge\")\n```\n:::\n:::\n\nCan you order the arrangement of the bars such that the party with the most seats is on top and the one with the least seats at the bottom?\n\nNext, use `coord_polar()` to turn this plot into a pie chart. Which position adjustment do you need to use?\n\n\n\n::: {.cell exercise='bundestag-pie'}\n```{webr}\n#| exercise: bundestag-pie\n\n```\n:::\n\n\n\n::: { .hint exercise=\"bundestag-pie\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nggplot(bundestag, aes(x = seats, y = \"abc\", fill = party)) +\n  geom_col(position = ___) +\n  coord_polar()\n```\n:::\n:::\n\n::: { .solution exercise=\"bundestag-pie\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(bundestag, aes(x = seats, y = \"abc\", fill = party)) +\n  geom_col(position = \"fill\") +\n  coord_polar()\n```\n:::\n:::\n\nThe previous plots showed only a single set of propotions, a snapshot of the parliamentary composition at one point in time. Frequently, however, we want to show multiple proportions, for example from different time points.\n\nWe can try this out with the `marketshare` dataset. Remember that this dataset has the columns `company`, `year`, and `percent`. Make a stacked bar plot showing percent along the x axis, year along the y axis, and filled by company name.\n\n**Hint:** Turn `year` into a factor to ensure ggplot interprets it as a categorical variable.\n\n\n\n::: {.cell exercise='marketshare-stacked'}\n```{webr}\n#| exercise: marketshare-stacked\n\n```\n:::\n\n\n\n::: { .hint exercise=\"marketshare-stacked\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nggplot(marketshare, aes(percent, factor(year), fill = ___)) +\n  geom_col(___)\n```\n:::\n:::\n\n::: { .solution exercise=\"marketshare-stacked\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(marketshare, aes(percent, factor(year), fill = company)) +\n  geom_col(position = \"fill\")\n```\n:::\n:::\n\nNow convert this plot into side-by-side bars.\n\n\n\n::: {.cell exercise='marketshare-dodged'}\n```{webr}\n#| exercise: marketshare-dodged\n\n```\n:::\n\n\n\n::: { .hint exercise=\"marketshare-dodged\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nggplot(marketshare, aes(percent, factor(year), fill = company)) +\n  geom_col(___)\n```\n:::\n:::\n\n::: { .solution exercise=\"marketshare-dodged\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(marketshare, aes(percent, factor(year), fill = company)) +\n  geom_col(position = \"dodge\")\n```\n:::\n:::\n\nAnd now convert this plot into a set of three pie charts.\n\n**Hint:** You will have to use faceting and plot one pie per facet.\n\n\n\n::: {.cell exercise='marketshare-pies'}\n```{webr}\n#| exercise: marketshare-pies\n\n```\n:::\n\n\n\n::: { .hint exercise=\"marketshare-pies\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nggplot(marketshare, aes(percent, ___, fill = company)) +\n  geom_col(position = ___) +\n  facet_wrap(___) +\n  ___\n```\n:::\n:::\n\n::: { .solution exercise=\"marketshare-pies\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(marketshare, aes(percent, \"abc\", fill = company)) +\n  geom_col(position = \"fill\") +\n  facet_wrap(~year) +\n  coord_polar()\n```\n:::\n:::\n\n## Pie charts in Cartesian coordinates\n\nThe idea that a pie chart is a stacked bar plot in polar coordinates tends to be very appealing to proponents of the Grammar of Graphics (which forms the mathematical underpinnings of ggplot), but it oftentimes is not that useful in practice. Instead, we have much more ability to customize our pie charts if we draw them in Cartesian coordinates, using `geom_arc_bar()` from the package **ggforce**. It allows us to specify the exact location of the pie center in the x-y plane, and it also allows us to specify the inner and outer pie radius. As an example, consider this code.\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\nggplot(bundestag) +\n  aes(\n    x0 = 0, y0 = 0, # position of pie center\n    r0 = 0, r = 1,  # inner and outer radius\n    amount = seats, # size of pie slices\n    fill = party\n  ) + \n  geom_arc_bar(stat = \"pie\") +  # from ggforce\n  coord_fixed()     # ensure the pie is round\n```\n:::\n\n\n\nNow modify this code to reproduce the marketshare pies from the previous section. Reminder: The columns are `company`, `year`, and `percent`.\n\n\n\n::: {.cell exercise='marketshare-ggforce'}\n```{webr}\n#| exercise: marketshare-ggforce\n\n```\n:::\n\n\n\n::: { .hint exercise=\"marketshare-ggforce\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nggplot(marketshare) +\n  aes(\n    ___\n  ) +\n  geom_arc_bar(stat = \"pie\") +\n  facet_wrap(___) +\n  coord_fixed()\n```\n:::\n:::\n\n::: { .solution exercise=\"marketshare-ggforce\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(marketshare) +\n  aes(\n    x0 = 0, y0 = 0,\n    r0 = 0, r = 1,\n    amount = percent,\n    fill = company\n  ) +\n  geom_arc_bar(stat = \"pie\") +\n  facet_wrap(~year) +\n  coord_fixed()\n```\n:::\n:::\n\nYou can turn the pies into donuts by modifying `r0`. You can also adjust the plot limits to create some space between the pies and the plot boundaries. Try this out.\n\n\n\n::: {.cell exercise='marketshare-donut'}\n```{webr}\n#| exercise: marketshare-donut\n\n```\n:::\n\n\n\n::: { .hint exercise=\"marketshare-donut\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nggplot(marketshare) +\n  aes(\n    x0 = 0, y0 = 0,\n    r0 = ___, r = 1,\n    amount = percent,\n    fill = company\n  ) +\n  geom_arc_bar(stat = \"pie\") +\n  facet_wrap(~year) +\n  coord_fixed(\n    xlim = ___,\n    ylim = ___\n  ) \n```\n:::\n:::\n\n::: { .solution exercise=\"marketshare-donut\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(marketshare) +\n  aes(\n    x0 = 0, y0 = 0,\n    r0 = 0.4, r = 1,\n    amount = percent,\n    fill = company\n  ) +\n  geom_arc_bar(stat = \"pie\") +\n  facet_wrap(~year) +\n  coord_fixed(\n    xlim = c(-1.1, 1.1),\n    ylim = c(-1.4, 1.4)\n  )\n```\n:::\n:::\n\nCan you plot the year into the center of the donuts? This is an advanced exercise and it's Ok if you can't figure this out.\n\n**Hints:**\n\n- You can draw text with `geom_text()`.\n- You will need to create a new data table just for `geom_text()`.\n- Both geoms will need their own aesthetic mappings.\n\nThe final plot could look like this:\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| label: marketshare-donut-year-demo\n#| edit: false\n#| echo: false\n#| fig-height: 2.5\n# data table for geom text\nyears <- tibble(year = c(2015, 2016, 2017))\n\nggplot(marketshare) +\n  geom_arc_bar(\n    aes(\n      x0 = 0, y0 = 0,\n      r0 = 0.4, r = 1,\n      amount = percent,\n      fill = company\n    ),\n    stat = \"pie\"\n  ) +\n  geom_text(data = years, aes(x = 0, y = 0, label = year)) +\n  facet_wrap(~year) +\n  coord_fixed(\n    xlim = c(-1.0, 1.0),\n    ylim = c(-1.1, 1.4)\n  ) +\n  theme_void() +\n  theme(\n    strip.text = element_blank(),\n    strip.background = element_blank()\n  )\n```\n:::\n\n\n\nHow close to this can you get with your own code?\n\n\n\n::: {.cell exercise='marketshare-donut-year'}\n```{webr}\n#| exercise: marketshare-donut-year\n\n```\n:::\n\n\n\n::: { .hint exercise=\"marketshare-donut-year\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\n# data table for geom text\nyears <- tibble(year = c(2015, 2016, 2017))\n\nggplot(marketshare) +\n  geom_arc_bar(\n    aes(\n      ___\n    ),\n    stat = \"pie\"\n  ) +\n  geom_text(\n    data = years,\n    aes(___)\n  ) +\n  ____\n```\n:::\n:::\n\n::: { .solution exercise=\"marketshare-donut-year\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\n# data table for geom text\nyears <- tibble(year = c(2015, 2016, 2017))\n\nggplot(marketshare) +\n  geom_arc_bar(\n    aes(\n      x0 = 0, y0 = 0,\n      r0 = 0.4, r = 1,\n      amount = percent,\n      fill = company\n    ),\n    stat = \"pie\"\n  ) +\n  geom_text(\n    data = years,\n    aes(x = 0, y = 0, label = year)\n  ) +\n  facet_wrap(~year) +\n  coord_fixed(\n    xlim = c(-1.0, 1.0),\n    ylim = c(-1.1, 1.4)\n  ) +\n  theme_void() +\n  theme(\n    strip.text = element_blank(),\n    strip.background = element_blank()\n  )\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}