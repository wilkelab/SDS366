{
  "hash": "6c37a8ea22cd1d5908753d2977a6b8a3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Visualizing amounts\"\nauthor: \"Claus O. Wilke\"\nformat: live-html\nengine: knitr\nwebr:\n  render-df: gt-interactive\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n## Introduction\n\nIn this worksheet, we will discuss a core concept of ggplot, the mapping of data values onto aesthetics.\n\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| warning: false\n#| edit: false\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n```\n:::\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\n#| warning: false\n# Data from Box Office Mojo for Dec. 22-24, 2017. \nboxoffice <- tibble(\n  rank = 1:5,\n  title = c(\"Star Wars\", \"Jumanji\", \"Pitch Perfect 3\", \"Greatest Showman\", \"Ferdinand\"),\n  amount = c(71.57, 36.17, 19.93, 8.81, 7.32) # million USD\n)\n\npenguins2 <- na.omit(penguins) # remove all rows with any missing values\n```\n:::\n\n\n\n\n\nWe will be working with two datasets. First, box-office gross results for Dec. 22-24, 2017:\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\nboxoffice\n```\n:::\n\n\n\n\n\nSecond, data on individual penguins in Antarctica. Note that missing values have been removed:\n```r\npenguins2\n```\n\n::: {.column-page}\n\n\n\n\n::: {.cell}\n```{webr}\n#| echo: false\npenguins2\n```\n:::\n\n\n\n\n:::\n\n## Drawing numerical values as bars\n\nFor the `boxoffice` dataset, we want to draw the amount (Weekend gross, in million USD) for each movie as a bar. Somewhat confusingly, the ggplot geom that does this is called `geom_col()`. (There is also a `geom_bar()`, but it works differently. We'll get to that later in this tutorial.) Make a bar plot of `amount` versus `title`. This means `amount` goes on the y axis and `title` on the x axis.\n\n\n\n\n\n::: {.cell exercise='geom-col'}\n```{webr}\n#| exercise: geom-col\nggplot(boxoffice, aes(x = ___, y = ___)) +\n  ___()\n```\n:::\n\n\n\n\n\n::: { .hint exercise=\"geom-col\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nggplot(boxoffice, aes(x = ___, y = ___)) +\n  geom_col()\n```\n:::\n:::\n\n::: { .solution exercise=\"geom-col\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(boxoffice, aes(x = title, y = amount)) +\n  geom_col()\n```\n:::\n:::\n\nNow flip which column you map onto x and which onto y.\n\n\n\n\n\n::: {.cell exercise='geom-col2'}\n```{webr}\n#| exercise: geom-col2\nggplot(boxoffice, aes(x = ___, y = ___)) +\n  geom_col()\n```\n:::\n\n\n\n\n\n\n::: { .solution exercise=\"geom-col2\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(boxoffice, aes(x = amount, y = title)) +\n  geom_col()\n```\n:::\n:::\n\nThe x-axis label should specify that the amount is in million USD, and the y axis doesn't need the word \"title\". Use `xlab()` and `ylab()` to make these changes to the plot.\n\n\n\n\n\n\n::: {.cell exercise='geom-col3'}\n```{webr}\n#| exercise: geom-col3\nggplot(boxoffice, aes(x = amount, y = title)) +\n  geom_col() +\n  ___() +\n  ___()\n```\n:::\n\n\n\n\n\n::: { .hint exercise=\"geom-col3\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nggplot(boxoffice, aes(x = amount, y = title)) +\n  geom_col() +\n  xlab(___) +\n  ylab(___)\n```\n:::\n:::\n\n::: { .solution exercise=\"geom-col3\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(boxoffice, aes(x = amount, y = title)) +\n  geom_col() +\n  xlab(\"weekend gross (million USD)\") +\n  ylab(NULL) # NULL means nothing, don't show a y label\n```\n:::\n:::\n\n## Getting bars into the right order\n\nWhenever we are making bar plots, we need to think about the correct order of the bars. By default, ggplot uses alphabetic ordering, but that is rarely appropriate. If there is no inherent ordering (such as, for example, a temporal progression), then it is usually best to order by the magnitude of the values, i.e., sort the bars by length.\n\nWe can do this with the `fct_reorder()` function, which takes two arguments: The categorical variable we want to re-order, and the values by which we want to order. Here, the categorical variable is the column `title` and the values are in the column `amount`. We can apply the `fct_reorder()` function right inside the `aes()` statement.\n\n\n\n\n\n::: {.cell exercise='geom-col-sorted'}\n```{webr}\n#| exercise: geom-col-sorted\nggplot(boxoffice, aes(x = amount, y = ___)) +\n  geom_col() +\n  xlab(\"weekend gross (million USD)\") +\n  ylab(NULL)\n```\n:::\n\n\n\n\n\n::: { .hint exercise=\"geom-col-sorted\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nggplot(boxoffice, aes(x = amount, y = fct_reorder(___, ___))) +\n  geom_col() +\n  xlab(\"weekend gross (million USD)\") +\n  ylab(NULL)\n```\n:::\n:::\n\n::: { .solution exercise=\"geom-col-sorted\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(boxoffice, aes(x = amount, y = fct_reorder(title, amount))) +\n  geom_col() +\n  xlab(\"weekend gross (million USD)\") +\n  ylab(NULL)\n```\n:::\n:::\n\nTry the following additional experiments in the above code:\n\n- What happens when you run the above code without the `ylab(NULL)` statement?\n- Can you make the bars blue?\n- Can you color the bars by `amount` or by `title`?\n\n\n## Drawing bars based on a count\n\nThe `boxoffice` dataset contains individual values, the dollar amounts, that we wanted to visualize with bars. Often, however, we encounter a slightly different scenario: A dataset doesn't contain the numeric amounts directly, but instead contains observations we want to count. This is the case in the `penguins2` dataset (see above).\n\nIt contains one row per penguin. If we want to make a bar plot of the number of penguins of each species (Adelie, Chinstrap, Gentoo), we cannot use `geom_col()` as before, because the dataset doesn't have a column that contains these counts.\n\nThe solution here is to use `geom_bar()`, which performs a count and then displays the result of that count. Because `geom_bar()` counts automatically, you only have to provide it with a single aesthetic, which specifies the data column in which you are counting.\n\nTry this out. Make a bar plot of the number of penguins per species. Map the penguin species onto the x axis.\n\n\n\n\n\n::: {.cell exercise='geom-bar'}\n```{webr}\n#| exercise: geom-bar\nggplot(penguins2, aes(___)) +\n  geom_bar()\n```\n:::\n\n\n\n\n\n::: { .hint exercise=\"geom-bar\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nggplot(penguins2, aes(x = ___)) +\n  geom_bar()\n```\n:::\n:::\n\n::: { .solution exercise=\"geom-bar\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(penguins2, aes(x = species)) +\n  geom_bar()\n```\n:::\n:::\n\nTry the following additional modifications in the above code:\n\n- Map penguin species onto the y axis.\n- Remove the axis label that says \"species\".\n- Change the order of the bars manually, using `fct_relevel()` (see slides).\n\n## Counting subgroups\n\n`geom_bar()` automatically counts how many cases there are in each unique combination of different categorical aesthetics. In the previous example, we had only one categorical aesthetic, `species`. But we can add a second one, for example `sex`. Then `geom_bar()` counts the number of cases in each unique combination of species and sex and draws separate bars for each. Try this out by mapping the `sex` column onto the `fill` aesthetic.\n\n\n\n\n\n::: {.cell exercise='geom-bar2'}\n```{webr}\n#| exercise: geom-bar2\nggplot(penguins2, aes(x = species, fill = ___)) +\n  geom_bar()\n```\n:::\n\n\n\n\n\n::: { .solution exercise=\"geom-bar2\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(penguins2, aes(x = species, fill = sex)) +\n  geom_bar()\n```\n:::\n:::\n\nBy default, the bars for different `fill` values but identical `x` values will be drawn on top of one-another. But there are other possibilities, which are controled by the `position` argument to `geom_bar()`. For example, try to set the position to `\"dodge\"`.\n\n\n\n\n\n::: {.cell exercise='geom-bar-position'}\n```{webr}\n#| exercise: geom-bar-position\nggplot(penguins2, aes(x = species, fill = ___)) +\n  geom_bar(___)\n```\n:::\n\n\n\n\n\n::: { .hint exercise=\"geom-bar-position\" }\n::: { .callout-tip title=\"Hint\" collapse=\"false\"}\n```r\nggplot(penguins2, aes(x = species, fill = sex)) +\n  geom_bar(position = ___)\n```\n:::\n:::\n\n::: { .solution exercise=\"geom-bar-position\" }\n::: { .callout-tip title=\"Solution\" collapse=\"false\"}\n```r\nggplot(penguins2, aes(x = species, fill = sex)) +\n  geom_bar(position = \"dodge\")\n```\n:::\n:::\n\nIn the above code, also try positions `\"stack\"` and `\"fill\"`.\n",
    "supporting": [
      "visualizing-amounts_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}