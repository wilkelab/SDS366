{
  "hash": "da6244246d83c72c05e279e2101ab1a3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Animations\"\nauthor: \"Claus O. Wilke\"\ndate: last-modified\nformat: \n  revealjs:\n    theme:\n      - default\n      - Wilke-theme.scss\n    auto-stretch: false\n    chalkboard: true\nexecute:\n  fig-format: svg\n  fig-asp: 0.618\n  fig-width: 5.5\n---\n\n\n\n\n\n## Animations can create more engaging displays\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![&nbsp;](animations_files/figure-revealjs/gdp-anim-bar-race-1.gif){width=55%}\n:::\n:::\n\n\n\n::: {.absolute-bottom-right .tiny-font}\nData source: World Bank\n:::\n\n## Animations can create more engaging displays\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![&nbsp;](animations_files/figure-revealjs/gdp-anim-lines-race-1.gif){width=85%}\n:::\n:::\n\n\n\n::: {.absolute-bottom-right .tiny-font}\nData source: World Bank\n:::\n\n\n## We make animations in R with **gganimate**\n\n:::: {.columns}\n\n::: {.column width=\"70%\"}\n```r\nlibrary(tidyverse)\nlibrary(gganimate)\n\n# make fun animations\n...\n```\n:::\n\n::: {.move-up-1em .column width=\"30%\"}\n![](https://gganimate.com/reference/figures/logo.png){width=\"50%\"}\n:::\n::::\n\nThe **gganimate** package adds powerful animation tools to **ggplot2**\n\n## Getting the data\n\n::: {.small-font}\nWe'll be working with the `gdp_ranked` dataset:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngdp_ranked <- read_csv(\"https://wilkelab.org/SDS366/datasets/gdp_ranked.csv\") |>\n  mutate(rank = fct_rev(factor(rank)))\n\ngdp_ranked\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 500 × 6\n   country country_code  year   gdp rank  gdp_rel\n   <chr>   <chr>        <dbl> <dbl> <fct>   <dbl>\n 1 Brazil  BRA           1970  42.3 10     0.0395\n 2 Brazil  BRA           1971  49.2 10     0.0424\n 3 Brazil  BRA           1972  58.5 10     0.0457\n 4 Brazil  BRA           1973  79.3 10     0.0555\n 5 Brazil  BRA           1974 105   9      0.0677\n 6 Brazil  BRA           1975 124   9      0.0738\n 7 Brazil  BRA           1976 153   9      0.0818\n 8 Brazil  BRA           1977 176   8      0.0846\n 9 Brazil  BRA           1978 201   8      0.0855\n10 Brazil  BRA           1979 225   8      0.0856\n# ℹ 490 more rows\n```\n\n\n:::\n:::\n\n\n:::\n\n# How should we think about making an animation?\n\n## Think of an animation as faceting by time\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![&nbsp;](animations_files/figure-revealjs/gdp-anim-bar-facets-1.svg){width=100%}\n:::\n:::\n\n\n\n## We know how to make a faceted plot\n\n::: {.tiny-font}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngdp_ranked |>\n  filter(year > 1985 & year %% 5 == 0) |>\n  ggplot(aes(gdp, rank)) +\n  geom_col(aes(fill = country)) +\n  facet_wrap(~year)\n```\n\n::: {.cell-output-display}\n![&nbsp;](animations_files/figure-revealjs/gdp-facet-demo-1.svg){width=65%}\n:::\n:::\n\n\n:::\n\n## Making an animation is about as complicated\n\n::: {.tiny-font}\n```r\ngdp_ranked |>\n  # gganimate uses the `group` aesthetic to track objects across frames\n  ggplot(aes(gdp, rank, group = country)) + \n  geom_col(aes(fill = country)) +\n  transition_states(year, transition_length = 5)\n```\n:::\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![&nbsp;](animations_files/figure-revealjs/gdp-bar-race-demo-1.gif){width=45%}\n:::\n:::\n\n\n\n## Adding country names and plot title\n\n:::: {.columns}\n\n::: {.tiny-font .column width=\"50%\"}\n```r\ngdp_ranked |>\n  ggplot(aes(gdp, rank, group = country)) +\n  geom_col(aes(fill = country)) +\n  geom_text(\n    aes(x = -200, label = country),\n    hjust = 1, size = 14/.pt\n  ) +\n  xlim(-7000, 23000) +\n  labs(title = \"year: {closest_state}\") +\n  theme_minimal_vgrid(14, rel_small = 1) +\n  theme(\n    axis.text.y = element_blank(),\n    axis.title.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.line.y = element_blank()\n  ) + \n  guides(fill = \"none\") +\n  transition_states(year, transition_length = 5)\n```\n:::\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](animations_files/figure-revealjs/gdp-anim-fancy-1.gif)\n:::\n:::\n\n\n:::\n::::\n\n## We make time series with `transition_reveal()`\n\n:::: {.columns}\n\n::: {.tiny-font .column width=\"50%\"}\n```r\nselected <- c(\"China\", \"Japan\",\n  \"United States\", \"Germany\", \"Brazil\")\n\ngdp_ranked |>\n  filter(country %in% selected) |>\n  ggplot(aes(year, gdp, color = country)) +\n  geom_line() +\n  geom_point(size = 3) +\n  scale_y_log10() +\n  transition_reveal(year)\n```\n:::\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](animations_files/figure-revealjs/gdp-line-race-demo-1.gif)\n:::\n:::\n\n\n:::\n::::\n\n## This works also with **ggrepel** for labeling\n\n:::: {.columns}\n\n::: {.tiny-font .column width=\"50%\"}\n```r\ngdp_ranked |>\n  filter(country %in% selected) |>\n  ggplot(aes(year, gdp, color = country)) +\n  geom_line() +\n  geom_point(size = 3) +\n  geom_text_repel(\n    aes(label = country),\n    hjust = 0,\n    nudge_x = 2,\n    direction = \"y\",\n    xlim = c(NA, Inf),\n    segment.color = NA\n  ) +\n  scale_y_log10() +\n  guides(color = \"none\") +\n  coord_cartesian(clip = \"off\") +\n  theme(plot.margin = margin(7, 100, 7, 7)) +\n  transition_reveal(year)\n```\n:::\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](animations_files/figure-revealjs/gdp-line-race-labeled-1.gif)\n:::\n:::\n\n\n:::\n::::\n\n## Reproducing the famous gapminder animation\n\n:::: {.columns}\n\n::: {.tiny-font .column width=\"50%\"}\n```r\nlibrary(gapminder)\n\ngapminder %>% filter(continent != \"Oceania\") |>\n  ggplot() +\n  aes(gdpPercap, lifeExp, size = pop) +\n  geom_point(alpha = 0.7, color = \"#0072B2\") +\n  scale_size(range = c(2, 12), guide = \"none\") +\n  scale_x_log10(name = \"GDP per capita\") +\n  facet_wrap(~continent, nrow = 2) +\n  labs(\n    title = \"Year: {frame_time}\",\n    y = \"life expectancy\"\n  ) +\n  transition_time(year) +\n  ease_aes(\"linear\")\n```\n:::\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](animations_files/figure-revealjs/gapminder-bubbles-1.gif)\n:::\n:::\n\n\n:::\n::::\n\n::: {.tiny-font .absolute-bottom-right}\nSee Hans Rosling [video here](https://www.youtube.com/watch?v=jbkSRLYSojo)\n:::\n\n<!-- Segment ends here -->\n\n## Further reading\n\n- **gganimate** documentation: [Getting started](https://gganimate.com/articles/gganimate.html)\n- **gganimate** reference documentation: [`transition_states()`](https://gganimate.com/reference/transition_states.html)\n- **gganimate** reference documentation: [`transition_reveal()`](https://gganimate.com/reference/transition_reveal.html)\n",
    "supporting": [
      "animations_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}