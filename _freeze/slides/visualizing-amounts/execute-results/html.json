{
  "hash": "83a3d730c04014b4390130b0845c4c32",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Visualizing amounts\"\nauthor: \"Claus O. Wilke\"\ndate: last-modified\nformat: \n  revealjs:\n    theme:\n      - default\n      - Wilke-theme.scss\n    auto-stretch: false\n    chalkboard: true\nexecute:\n  fig-format: svg\n  fig-asp: 0.618\n  fig-width: 5.5\n---\n\n\n\n\n\n\n\n## Many datasets contain simple amounts\n\n<br>\n\n::: {.fragment}\nExample: Highest grossing movies Dec. 2017\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> rank </th>\n   <th style=\"text-align:left;\"> title </th>\n   <th style=\"text-align:right;\"> amount </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:left;\"> Star Wars </td>\n   <td style=\"text-align:right;\"> 71.57 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2 </td>\n   <td style=\"text-align:left;\"> Jumanji </td>\n   <td style=\"text-align:right;\"> 36.17 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 3 </td>\n   <td style=\"text-align:left;\"> Pitch Perfect 3 </td>\n   <td style=\"text-align:right;\"> 19.93 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 4 </td>\n   <td style=\"text-align:left;\"> Greatest Showman </td>\n   <td style=\"text-align:right;\"> 8.81 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 5 </td>\n   <td style=\"text-align:left;\"> Ferdinand </td>\n   <td style=\"text-align:right;\"> 7.32 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n\n::: {.absolute-bottom-right .smaller-font}\nData source: Box Office Mojo\n:::\n:::\n\n## We can visualize amounts with bar plots\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![&nbsp;](visualizing-amounts_files/figure-revealjs/boxoffice-vertical-1.svg){width=90%}\n:::\n:::\n\n\n\n\n## Bars can also run horizontally\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![&nbsp;](visualizing-amounts_files/figure-revealjs/boxoffice-horizontal-1.svg){width=70%}\n:::\n:::\n\n\n\n\n## Avoid rotated axis labels\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![&nbsp;](visualizing-amounts_files/figure-revealjs/boxoffice-rot-axis-tick-labels-1.svg){width=60%}\n:::\n:::\n\n\n\n\n## Avoid rotated axis labels\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![&nbsp;](visualizing-amounts_files/figure-revealjs/boxoffice-horizontal2-1.svg){width=70%}\n:::\n:::\n\n\n\n\n## Pay attention to the order of the bars\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![&nbsp;](visualizing-amounts_files/figure-revealjs/boxoffice-horizontal-unordered-1.svg){width=70%}\n:::\n:::\n\n\n\n\n## Pay attention to the order of the bars\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![&nbsp;](visualizing-amounts_files/figure-revealjs/boxoffice-horizontal3-1.svg){width=70%}\n:::\n:::\n\n\n\n\n## We can use dots instead of bars\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![&nbsp;](visualizing-amounts_files/figure-revealjs/boxoffice-dotplot-1.svg){width=70%}\n:::\n:::\n\n\n\n\n## Dots are preferable if we want to truncate the axes\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![&nbsp;](visualizing-amounts_files/figure-revealjs/Americas-life-expect-1.svg){width=60%}\n:::\n:::\n\n\n\n\n## Dots are preferable if we want to truncate the axes\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![&nbsp;](visualizing-amounts_files/figure-revealjs/Americas-life-expect-bad1-1.svg){width=60%}\n:::\n:::\n\n\n\n\n::: {.absolute-bottom-right}\nBar lengths do<br>not accurately<br> represent the<br>data values<br>&nbsp;\n:::\n\n## Dots are preferable if we want to truncate the axes\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![&nbsp;](visualizing-amounts_files/figure-revealjs/Americas-life-expect-bad2-1.svg){width=60%}\n:::\n:::\n\n\n\n\n::: {.absolute-bottom-right}\nKey features<br>of the data<br>are obscured<br>&nbsp;\n:::\n\n## Dots are preferable if we want to truncate the axes\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![&nbsp;](visualizing-amounts_files/figure-revealjs/Americas-life-expect2-1.svg){width=60%}\n:::\n:::\n\n\n\n\n<!-- Segment ends here -->\n\n# Grouped bars\n\n## We use grouped bars for higher-dimensional datasets\n\n::: {.fragment}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![&nbsp;](visualizing-amounts_files/figure-revealjs/income-by-age-race-dodged-1.svg){width=95%}\n:::\n:::\n\n\n\n\n::: {.absolute-bottom-right .smaller-font}\nData source: United States Census Bureau, 2016\n:::\n:::\n\n## We are free to choose by which variable to group\n\n<br>\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![&nbsp;](visualizing-amounts_files/figure-revealjs/income-by-race-age-dodged-1.svg){width=85%}\n:::\n:::\n\n\n\n\n::: {.absolute-bottom-right .smaller-font}\nData source: United States Census Bureau, 2016\n:::\n\n## We can also use multiple plot panels (facets)\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![&nbsp;](visualizing-amounts_files/figure-revealjs/income-by-age-race-faceted-1.svg){width=85%}\n:::\n:::\n\n\n\n\n::: {.absolute-bottom-right .smaller-font}\nData source: United States Census Bureau, 2016\n:::\n\n<!-- Segment ends here -->\n\n# Making bar plots in **ggplot2**\n\n::: {.small-font}\n## Dataset: Highest grossing movies Dec. 2017\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Data from Box Office Mojo for Dec. 22-24, 2017. \nboxoffice <- tibble(\n  rank = 1:5,\n  title = c(\n    \"Star Wars\", \"Jumanji\", \"Pitch Perfect 3\",\n    \"Greatest Showman\", \"Ferdinand\"\n  ),\n  amount = c(71.57, 36.17, 19.93, 8.81, 7.32) # million USD\n)\n\nboxoffice\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n   rank title            amount\n  <int> <chr>             <dbl>\n1     1 Star Wars         71.6 \n2     2 Jumanji           36.2 \n3     3 Pitch Perfect 3   19.9 \n4     4 Greatest Showman   8.81\n5     5 Ferdinand          7.32\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## Visualize as a bar plot\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(boxoffice, aes(title, amount)) +\n  geom_col()  # \"col\" stands for column\n```\n\n::: {.cell-output-display}\n![&nbsp;](visualizing-amounts_files/figure-revealjs/boxoffice-naive-1.svg){width=85%}\n:::\n:::\n\n\n\n\n## Order by data value\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(boxoffice, aes(fct_reorder(title, amount), amount)) +\n  geom_col()  # \"col\" stands for column\n```\n\n::: {.cell-output-display}\n![&nbsp;](visualizing-amounts_files/figure-revealjs/boxoffice-ordered-1.svg){width=85%}\n:::\n:::\n\n\n\n\n## Order by data value, descending\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(boxoffice, aes(fct_reorder(title, -amount), amount)) +\n  geom_col() + \n  xlab(NULL) # remove x axis label\n```\n\n::: {.cell-output-display}\n![&nbsp;](visualizing-amounts_files/figure-revealjs/boxoffice-ordered2-1.svg){width=85%}\n:::\n:::\n\n\n\n\n## Flip x and y, set custom x axis label\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(boxoffice, aes(amount, fct_reorder(title, amount))) +\n  geom_col() +\n  xlab(\"amount (in million USD)\") +\n  ylab(NULL)\n```\n\n::: {.cell-output-display}\n![&nbsp;](visualizing-amounts_files/figure-revealjs/boxoffice-ordered3-1.svg){width=65%}\n:::\n:::\n\n\n\n\n# Sometimes we need to count before visualization\n\n## Example: Visualize number of penguins per species\n\n::: {.smaller-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\n\npenguins\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n\n\n:::\n\n![](https://raw.githubusercontent.com/allisonhorst/palmerpenguins/master/man/figures/logo.png){.absolute  top=\"23%\" left=\"87%\" width=\"12%\"}\n\n## Use `geom_bar()` to count before plotting\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(y = species)) + # no x aesthetic needed\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![&nbsp;](visualizing-amounts_files/figure-revealjs/penguins-bars-1.svg){width=65%}\n:::\n:::\n\n\n\n\n## Getting the bars into the right order\n\n::: {.fragment}\nOption 1: Manually, using `fct_relevel()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins) +\n  aes(y = fct_relevel(species, \"Chinstrap\", \"Gentoo\", \"Adelie\")) +\n  geom_bar() +\n  ylab(NULL)\n```\n\n::: {.cell-output-display}\n![&nbsp;](visualizing-amounts_files/figure-revealjs/penguins-bars2-1.svg){width=65%}\n:::\n:::\n\n\n\n:::\n\n## Getting the bars into the right order\n\nOption 2: Using `fct_rev()` and `fct_infreq()` from the **forcats** package\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins) +\n  aes(y = fct_rev(fct_infreq(species))) +\n  geom_bar() +\n  ylab(NULL)\n```\n\n::: {.cell-output-display}\n![&nbsp;](visualizing-amounts_files/figure-revealjs/penguins-bars3-1.svg){width=65%}\n:::\n:::\n\n\n\n\n## Display counts by species and sex\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(sex, fill = species)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![&nbsp;](visualizing-amounts_files/figure-revealjs/penguins-sex-species-1.svg){width=65%}\n:::\n:::\n\n\n\n\n## Remove missing values (`NA`s)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# remove all rows with any missing values\npenguins2 <- na.omit(penguins)\n\nggplot(penguins2, aes(sex, fill = species)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![&nbsp;](visualizing-amounts_files/figure-revealjs/penguins-sex-species2-1.svg){width=65%}\n:::\n:::\n\n\n\n\n## Positions define how subgroups are shown\n\n`position = \"dodge\"`: Place bars for subgroups side-by-side\n\n::: {.move-down-1em}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins2, aes(sex, fill = species)) +\n  geom_bar(position = \"dodge\")\n```\n\n::: {.cell-output-display}\n![&nbsp;](visualizing-amounts_files/figure-revealjs/penguins-sex-species-dodge-1.svg){width=65%}\n:::\n:::\n\n\n\n:::\n\n## Positions define how subgroups are shown\n\n`position = \"stack\"`: Place bars for subgroups on top of each other\n\n::: {.move-down-1em}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins2, aes(sex, fill = species)) +\n  geom_bar(position = \"stack\")\n```\n\n::: {.cell-output-display}\n![&nbsp;](visualizing-amounts_files/figure-revealjs/penguins-sex-species-stack-1.svg){width=65%}\n:::\n:::\n\n\n\n:::\n\n## Positions define how subgroups are shown\n\n`position = \"fill\"`: Like `\"stack\"`, but scale to 100%\n\n::: {.move-down-1em}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins2, aes(sex, fill = species)) +\n  geom_bar(position = \"fill\")\n```\n\n::: {.cell-output-display}\n![&nbsp;](visualizing-amounts_files/figure-revealjs/penguins-sex-species-fill-1.svg){width=65%}\n:::\n:::\n\n\n\n:::\n\n<!-- Segment ends here -->\n\n## Further reading\n\n- Fundamentals of Data Visualization: [Chapter 6: Visualizing amounts](https://clauswilke.com/dataviz/visualizing-amounts.html)\n- Data Visualization—A Practical Introduction: [Chapter 4.4: Geoms can transform data](https://socviz.co/groupfacettx.html#statfunctions)\n- **ggplot2** reference documentation: [`geom_bar()`, `geom_col()`](https://ggplot2.tidyverse.org/reference/geom_bar.html)\n- **ggplot2** reference documentation: [`position_stack()`, `position_fill()`](https://ggplot2.tidyverse.org/reference/position_stack.html)\n",
    "supporting": [
      "visualizing-amounts_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}