[
  {
    "objectID": "worksheets/visualizing-proportions.html",
    "href": "worksheets/visualizing-proportions.html",
    "title": "Visualizing proportions",
    "section": "",
    "text": "In this worksheet, we will discuss how to visualize proportions using stacked or dodged bar plots and pie charts.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with the dataset bundestag, which contains the composition of the German parliament (Bundestag) from 1976 to 1980.\n\n\n\n\n\n\n\n\nWe will also be working with the dataset marketshare, which contains made-up information about the market share of five hypothetical companies, A, B, C, D, and E, over a time period of three years."
  },
  {
    "objectID": "worksheets/visualizing-proportions.html#introduction",
    "href": "worksheets/visualizing-proportions.html#introduction",
    "title": "Visualizing proportions",
    "section": "",
    "text": "In this worksheet, we will discuss how to visualize proportions using stacked or dodged bar plots and pie charts.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with the dataset bundestag, which contains the composition of the German parliament (Bundestag) from 1976 to 1980.\n\n\n\n\n\n\n\n\nWe will also be working with the dataset marketshare, which contains made-up information about the market share of five hypothetical companies, A, B, C, D, and E, over a time period of three years."
  },
  {
    "objectID": "worksheets/visualizing-proportions.html#bars-in-cartesian-and-polar-coordinates",
    "href": "worksheets/visualizing-proportions.html#bars-in-cartesian-and-polar-coordinates",
    "title": "Visualizing proportions",
    "section": "Bars in Cartesian and polar coordinates",
    "text": "Bars in Cartesian and polar coordinates\nThere are three main approaches to visualizing proportions: Stacked bars, grouped (dodged) bars, and pie charts. From the perspective of ggplot, these are all bar charts with only minor tweaks, and we can make them all using geom_bar() or geom_col() (depending on whether the data source contains individual observations or summary counts). The first two types are created by setting position adjustments to \"fill\" and \"dodge\", respectively, and the third type is created by setting the position adjustment to \"fill\" and adding coord_polar() to the plot.\nLet’s try this on the bundestag dataset. We want to lay out the bars horizontally, so let’s map the number of seats (seats) to x and map party to fill. We have nothing to map to y, but ggplot needs something there to generate the plot, so we can write for example y = \"abc\". (Instead of \"abc\", you can use any string you want.) First, make a stacked bar plot using these ideas. Remember that the correct geom in this context is geom_col(), as the dataset contains summary counts. Also, the position adjustment should be \"fill\", to show the numbers as relative proportions.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(bundestag, aes(x = seats, y = \"abc\", fill = party)) +\n  geom_col(position = ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(bundestag, aes(x = seats, y = \"abc\", fill = party)) +\n  geom_col(position = \"fill\")\n\n\n\n\nNext, modify this plot so the bars a side-by-side rather than stacked.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(bundestag, aes(x = seats, y = \"abc\", fill = party)) +\n  geom_col(position = ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(bundestag, aes(x = seats, y = \"abc\", fill = party)) +\n  geom_col(position = \"dodge\")\n\n\n\n\nCan you order the arrangement of the bars such that the party with the most seats is on top and the one with the least seats at the bottom?\nNext, use coord_polar() to turn this plot into a pie chart. Which position adjustment do you need to use?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(bundestag, aes(x = seats, y = \"abc\", fill = party)) +\n  geom_col(position = ___) +\n  coord_polar()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(bundestag, aes(x = seats, y = \"abc\", fill = party)) +\n  geom_col(position = \"fill\") +\n  coord_polar()\n\n\n\n\nThe previous plots showed only a single set of propotions, a snapshot of the parliamentary composition at one point in time. Frequently, however, we want to show multiple proportions, for example from different time points.\nWe can try this out with the marketshare dataset. Remember that this dataset has the columns company, year, and percent. Make a stacked bar plot showing percent along the x axis, year along the y axis, and filled by company name.\nHint: Turn year into a factor to ensure ggplot interprets it as a categorical variable.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(marketshare, aes(percent, factor(year), fill = ___)) +\n  geom_col(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(marketshare, aes(percent, factor(year), fill = company)) +\n  geom_col(position = \"fill\")\n\n\n\n\nNow convert this plot into side-by-side bars.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(marketshare, aes(percent, factor(year), fill = company)) +\n  geom_col(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(marketshare, aes(percent, factor(year), fill = company)) +\n  geom_col(position = \"dodge\")\n\n\n\n\nAnd now convert this plot into a set of three pie charts.\nHint: You will have to use faceting and plot one pie per facet.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(marketshare, aes(percent, ___, fill = company)) +\n  geom_col(position = ___) +\n  facet_wrap(___) +\n  ___\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(marketshare, aes(percent, \"abc\", fill = company)) +\n  geom_col(position = \"fill\") +\n  facet_wrap(~year) +\n  coord_polar()"
  },
  {
    "objectID": "worksheets/visualizing-proportions.html#pie-charts-in-cartesian-coordinates",
    "href": "worksheets/visualizing-proportions.html#pie-charts-in-cartesian-coordinates",
    "title": "Visualizing proportions",
    "section": "Pie charts in Cartesian coordinates",
    "text": "Pie charts in Cartesian coordinates\nThe idea that a pie chart is a stacked bar plot in polar coordinates tends to be very appealing to proponents of the Grammar of Graphics (which forms the mathematical underpinnings of ggplot), but it oftentimes is not that useful in practice. Instead, we have much more ability to customize our pie charts if we draw them in Cartesian coordinates, using geom_arc_bar() from the package ggforce. It allows us to specify the exact location of the pie center in the x-y plane, and it also allows us to specify the inner and outer pie radius. As an example, consider this code.\n\n\n\n\n\n\n\n\nNow modify this code to reproduce the marketshare pies from the previous section. Reminder: The columns are company, year, and percent.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(marketshare) +\n  aes(\n    ___\n  ) +\n  geom_arc_bar(stat = \"pie\") +\n  facet_wrap(___) +\n  coord_fixed()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(marketshare) +\n  aes(\n    x0 = 0, y0 = 0,\n    r0 = 0, r = 1,\n    amount = percent,\n    fill = company\n  ) +\n  geom_arc_bar(stat = \"pie\") +\n  facet_wrap(~year) +\n  coord_fixed()\n\n\n\n\nYou can turn the pies into donuts by modifying r0. You can also adjust the plot limits to create some space between the pies and the plot boundaries. Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(marketshare) +\n  aes(\n    x0 = 0, y0 = 0,\n    r0 = ___, r = 1,\n    amount = percent,\n    fill = company\n  ) +\n  geom_arc_bar(stat = \"pie\") +\n  facet_wrap(~year) +\n  coord_fixed(\n    xlim = ___,\n    ylim = ___\n  ) \n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(marketshare) +\n  aes(\n    x0 = 0, y0 = 0,\n    r0 = 0.4, r = 1,\n    amount = percent,\n    fill = company\n  ) +\n  geom_arc_bar(stat = \"pie\") +\n  facet_wrap(~year) +\n  coord_fixed(\n    xlim = c(-1.1, 1.1),\n    ylim = c(-1.4, 1.4)\n  )\n\n\n\n\nCan you plot the year into the center of the donuts? This is an advanced exercise and it’s Ok if you can’t figure this out.\nHints:\n\nYou can draw text with geom_text().\nYou will need to create a new data table just for geom_text().\nBoth geoms will need their own aesthetic mappings.\n\nThe final plot could look like this:\n\n\n\n\n\n\n\n\nHow close to this can you get with your own code?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\n# data table for geom text\nyears &lt;- tibble(year = c(2015, 2016, 2017))\n\nggplot(marketshare) +\n  geom_arc_bar(\n    aes(\n      ___\n    ),\n    stat = \"pie\"\n  ) +\n  geom_text(\n    data = years,\n    aes(___)\n  ) +\n  ____\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n# data table for geom text\nyears &lt;- tibble(year = c(2015, 2016, 2017))\n\nggplot(marketshare) +\n  geom_arc_bar(\n    aes(\n      x0 = 0, y0 = 0,\n      r0 = 0.4, r = 1,\n      amount = percent,\n      fill = company\n    ),\n    stat = \"pie\"\n  ) +\n  geom_text(\n    data = years,\n    aes(x = 0, y = 0, label = year)\n  ) +\n  facet_wrap(~year) +\n  coord_fixed(\n    xlim = c(-1.0, 1.0),\n    ylim = c(-1.1, 1.4)\n  ) +\n  theme_void() +\n  theme(\n    strip.text = element_blank(),\n    strip.background = element_blank()\n  )"
  },
  {
    "objectID": "worksheets/visualizing-distributions-1.html",
    "href": "worksheets/visualizing-distributions-1.html",
    "title": "Visualizing distributions 1",
    "section": "",
    "text": "In this worksheet, we will discuss how to display distributions of data values using histograms and density plots.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with the titanic dataset which contains information about passengers on the Titanic, including their age, sex, the class in which they traveled on the ship, and whether they survived or not:"
  },
  {
    "objectID": "worksheets/visualizing-distributions-1.html#introduction",
    "href": "worksheets/visualizing-distributions-1.html#introduction",
    "title": "Visualizing distributions 1",
    "section": "",
    "text": "In this worksheet, we will discuss how to display distributions of data values using histograms and density plots.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with the titanic dataset which contains information about passengers on the Titanic, including their age, sex, the class in which they traveled on the ship, and whether they survived or not:"
  },
  {
    "objectID": "worksheets/visualizing-distributions-1.html#histograms",
    "href": "worksheets/visualizing-distributions-1.html#histograms",
    "title": "Visualizing distributions 1",
    "section": "Histograms",
    "text": "Histograms\nWe start by drawing a histogram of the passenger ages (column age in the dataset titanic). We can do this in ggplot with the geom geom_histogram(). Try this for yourself.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(titanic, aes(age)) +\n  geom_histogram()\n\n\n\n\nIf you don’t specify how many bins you want or how wide you want them to be, geom_histogram() will make an automatic choice, but it will also give you a warning that the automatic choice is probably not good. Make a better choice by setting the binwidth and center parameters. Try the values 5 and 2.5, respectively.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(titanic, aes(age)) +\n  geom_histogram(binwidth = ___, center = ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(titanic, aes(age)) +\n  geom_histogram(binwidth = 5, center = 2.5)\n\n\n\n\nTry a few more different binwidths, e.g. 1 or 10. What are good values for center that go with these choices?"
  },
  {
    "objectID": "worksheets/visualizing-distributions-1.html#density-plots",
    "href": "worksheets/visualizing-distributions-1.html#density-plots",
    "title": "Visualizing distributions 1",
    "section": "Density plots",
    "text": "Density plots\nDensity plots are a good alternative to histograms. We can create them with geom_density(). Try this out by drawing a density plot of the passenger ages (column age in the dataset titanic). Also, by default geom_density() does not draw a filled area under the density line. We can change this by setting an explicit fill color, e.g. “cornsilk”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(titanic, aes(age)) +\n  geom_density(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(titanic, aes(age)) +\n  geom_density(fill = \"cornsilk\")\n\n\n\n\nJust like for histograms, there are options to modify how much detail a density plot shows. A small binwidth in a histogram corresponds to a low bandwidth (bw) in a density plot and similarly a large binwidth corresponds to a high bandwidth. In addition, you can change the kernel, e.g. kernel = \"rectangular\" or kernel = \"triangular\". Try this out by using a bandwidth of 1 and a triangular kernel.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(titanic, aes(age)) +\n  geom_density(fill = \"cornsilk\", bw = ___, kernel = ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(titanic, aes(age)) +\n  geom_density(fill = \"cornsilk\", bw = 1, kernel = \"triangular\")\n\n\n\n\nTry a few more different bandwidth and kernel choices, e.g. 0.1 or 10, or rectangular or gaussian kernels. How does the density plot depend on these choices?"
  },
  {
    "objectID": "worksheets/visualizing-distributions-1.html#small-multiples-facets",
    "href": "worksheets/visualizing-distributions-1.html#small-multiples-facets",
    "title": "Visualizing distributions 1",
    "section": "Small multiples (facets)",
    "text": "Small multiples (facets)\nWe can also draw separate histograms for passengers meeting different criteria, for example for passengers traveling in the different classes. Whenever we draw multiple plot panels containing the same type of plot but for different subsets of the data, we speak of “small multiples”. In ggplot, we generate small multiples with the function facet_wrap(). The function facet_wrap() takes as its argument a list of data columns to subdivide the data by. This list is provided as an R formula. It’s Ok if you don’t know what an R formula is. Simply think of it as the name of the column with a tilde (~) in front. For example, ~class means draw a separate panel for each class, ~survived means draw a separate panel for each survival status, and ~class + survived means draw a separate panel for each combination of class and survival status.\nAs an example, the following code generates small multiple histograms by class:\n\n\n\n\n\n\n\n\nNow use the same principle to draw small multiple histograms by survival status.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(titanic, aes(age)) +\n  geom_histogram(binwidth = 5, center = 2.5) +\n  facet_wrap(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(titanic, aes(age)) +\n  geom_histogram(binwidth = 5, center = 2.5) +\n  facet_wrap(~survived)\n\n\n\n\nNow make a plot that breaks down the data by both survival status and class.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(titanic, aes(age)) +\n  geom_histogram(binwidth = 5, center = 2.5) +\n  facet_wrap(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(titanic, aes(age)) +\n  geom_histogram(binwidth = 5, center = 2.5) +\n  facet_wrap(~survived + class)\n\n\n\n\nFinally, do the same but drawing density plots rather than histograms.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(titanic, aes(age)) +\n  ___ +\n  facet_wrap(~survived + class)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(titanic, aes(age)) +\n  geom_density(fill = \"cornsilk\", bw = 2) +\n  facet_wrap(~survived + class)\n\n\n\n\notice the difference between this plot and the corresponding histogram plot. Histograms show absolute counts whereas the density plots are normalized so that the area under the curve is 1. As a consequence, the density plot does not provide an accurate representation of the number of passengers in each grouping. This can be changed. See next section."
  },
  {
    "objectID": "worksheets/visualizing-distributions-1.html#manipulating-stats",
    "href": "worksheets/visualizing-distributions-1.html#manipulating-stats",
    "title": "Visualizing distributions 1",
    "section": "Manipulating stats",
    "text": "Manipulating stats\nYou may have noticed that neither geom_histogram() nor geom_density() require you to define an aesthetic mapping for the y variable. This is because under the hood, a statistical transformation (called a “stat”) calculates the histogram or density from the raw data and then sets the appropriate y mapping.\nSometimes it can be useful to access or modify this mapping directly. We tell ggplot that we want to map a value calculated by a stat, rather than one that is in the original data, by writing after_stat(...) inside the aes() function. So, for example, the default y mapping for geom_density() is y = after_stat(density). An alternative mapping, y = after_stat(count) scales densities by the number of points in each grouping, thus producing something more similar to a histogram. You can see the difference between these two choices in the following two examples:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe same options of after_stat(count) and after_stat(density) exist for geom_histogram() as well. Try this by making histograms that use the calculated density for the y value.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(titanic, aes(age, y = ___)) + \n  geom_histogram(binwidth = 5, center = 2.5) +\n  facet_wrap(~survived + class)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(titanic, aes(age, y = after_stat(density))) + \n  geom_histogram(binwidth = 5, center = 2.5) +\n  facet_wrap(~survived + class)\n\n\n\n\nNow, instead, try mapping the calculated counts onto the fill aesthetic.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(titanic, aes(age, fill = ___)) + \n  geom_histogram(binwidth = 5, center = 2.5) +\n  facet_wrap(~survived + class)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(titanic, aes(age, fill = after_stat(count))) + \n  geom_histogram(binwidth = 5, center = 2.5) +\n  facet_wrap(~survived + class)\n\n\n\n\nFinally, we can make our own combination of geoms and stats, by setting the stat argument of a geom, e.g. stat = \"density\" to use the density stat. To try this out, draw a density plot using geom_point(), and also map the calculated density values onto the point color.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(titanic, aes(age, color = ___)) +\n  geom_point(stat = \"density\") +\n  facet_wrap(~survived + class)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(titanic, aes(age, color = after_stat(density))) +\n  geom_point(stat = \"density\") +\n  facet_wrap(~survived + class)"
  },
  {
    "objectID": "worksheets/know-your-data-2.html",
    "href": "worksheets/know-your-data-2.html",
    "title": "Getting to know your data 2",
    "section": "",
    "text": "In this worksheet, we will discuss how to work with missing values in R.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nWe will be working with the R built-in dataset airquality, which contains daily air quality measurements in New York, May to September 1973. The data columns are mean ozone in parts per billion, solar radiation in Langleys, average wind speed in miles per hour, maximum temperature in Fahrenheit, and numeric month and day of the month."
  },
  {
    "objectID": "worksheets/know-your-data-2.html#introduction",
    "href": "worksheets/know-your-data-2.html#introduction",
    "title": "Getting to know your data 2",
    "section": "",
    "text": "In this worksheet, we will discuss how to work with missing values in R.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nWe will be working with the R built-in dataset airquality, which contains daily air quality measurements in New York, May to September 1973. The data columns are mean ozone in parts per billion, solar radiation in Langleys, average wind speed in miles per hour, maximum temperature in Fahrenheit, and numeric month and day of the month."
  },
  {
    "objectID": "worksheets/know-your-data-2.html#reading-csv-files-with-missing-values",
    "href": "worksheets/know-your-data-2.html#reading-csv-files-with-missing-values",
    "title": "Getting to know your data 2",
    "section": "Reading csv files with missing values",
    "text": "Reading csv files with missing values\nWe will first talk about how to replace specific values with NA when reading in data files. We prepare a simple comma-separated values (CSV) file with four columns, a, b, c, and d, which all use different ways to indicate a missing value.\n\n\n\n\n\n\n\n\nIn column a, second row, a field is completely empty, the line starts with a comma. In column b, first row, a missing value is indicated with #N/A. In column c, second row, a missing value is indicated with NA. In column d, fourth row, a missing value is indicated with -99.\nIf we read this input with read_csv(), we can see that the missing values in columns a and c are treated correctly but the others are not.\n\n\n\n\n\n\n\n\nThis outcome is determined by the na argument of read_csv(). By default, it is set to na = c(\"\", \"NA\"), which handles empty cells and cells containing NA correctly. Modify this argument so that the entire table is read correctly.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nread_csv(simple_csv, na = ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nread_csv(simple_csv, na = c(\"\", \"NA\", \"#N/A\", \"-99\"))\n\n\n\n\nAlso try other options to see what happens. For example, how does the result change if you remove the empty string from the na argument?\nAs an alternative to defining a global set of character strings that should be interpreted as missing values, you can make the substitution on a column-by-column basis, via the function replace_with_na_at() from the naniar package. This function allows you to specify one or more columns to work on and the specific data values that should be replaced with NA. The first argument to the function is the name of the data column on which you want to operate, given as a string, and the second argument is a logical expression determining whether replacement should be made or not, given as a formula. For example, the following code replaces -99 with NA in column d:\n\n\n\n\n\n\n\n\nNow use this same construct to replace the string #N/A with NA in column b.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nread_csv(simple_csv) |&gt;\n  replace_with_na_at(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nread_csv(simple_csv) |&gt;\n  replace_with_na_at(\"b\", ~.x == \"#N/A\")\n\n\n\n\nDo you see any remaining issues with this result?"
  },
  {
    "objectID": "worksheets/know-your-data-2.html#computing-with-missing-values",
    "href": "worksheets/know-your-data-2.html#computing-with-missing-values",
    "title": "Getting to know your data 2",
    "section": "Computing with missing values",
    "text": "Computing with missing values\nWhen performing common summary calculations, such as calculating the mean of a numerical column, any missing values will cause the final result to be NA. For example, if you wanted to calculate the mean ozone value in the airquality dataset, you might see the following:\n\n\n\n\n\n\n\n\nIf you are certain that it is Ok to ignore missing values in your summary calculation, you can set the argument na.rm = TRUE inside the mean() function. Try this.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nmean(airquality$Ozone) # not ignoring NA values\nmean(airquality$Ozone, na.rm = ___) # ignoring NA values\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nmean(airquality$Ozone) # not ignoring NA values\nmean(airquality$Ozone, na.rm = TRUE) # ignoring NA values\n\n\n\n\nNow try the same with the median, the maximum, and the sum of the Ozone column.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nmedian(airquality$Ozone)\nmedian(airquality$Ozone, na.rm = TRUE)\nmax(airquality$Ozone)\nmax(airquality$Ozone, na.rm = TRUE)\nsum(airquality$Ozone)\nsum(airquality$Ozone, na.rm = TRUE)\n\n\n\n\nTo test whether a specific value is missing, you cannot use the standard comparison operator ==. Instead, you have to use the function is.na(). Try this out by retaining only the rows in airquality for which the Ozone column contains a missing value.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nairquality |&gt;\n  filter(is.na(___))\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nairquality |&gt;\n  filter(is.na(Ozone))\n\n\n\n\nNow do the opposite. Retain only the rows for which the Ozone column does not contain a missing value.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nairquality |&gt;\n  filter(!is.na(Ozone))"
  },
  {
    "objectID": "worksheets/know-your-data-2.html#visualizing-missing-values",
    "href": "worksheets/know-your-data-2.html#visualizing-missing-values",
    "title": "Getting to know your data 2",
    "section": "Visualizing missing values",
    "text": "Visualizing missing values\nIt is also useful to be able to visualize missing values easily. By default, when we make for example a scatter plot, missing values are simply not shown, and instead ggplot gives us a warning about missing values.\n\n\n\n\n\n\n\n\nThis is not very helpful, because we don’t know where the values are missing. In this specific example, are they missing in the Ozone column or in the Solar.R column? And also, we may want to know whether missing values in one column coincide with particular values in the other column.\nThis can be addressed by using geom_miss_point() from the naniar package. Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(airquality, aes(x = Solar.R, y = Ozone)) +\n geom_miss_point()\n\n\n\n\nThe naniar package has various other methods to visualize missing values. For example, gg_miss_var() will provide an overall summary of how many missing values there are in each column in the data frame. Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\ngg_miss_var(airquality)"
  },
  {
    "objectID": "worksheets/intro-to-R.html#introduction",
    "href": "worksheets/intro-to-R.html#introduction",
    "title": "Introduction to R",
    "section": "Introduction",
    "text": "Introduction\nIn this worksheet, we will cover some of the basic concepts of the R programming language. The worksheet is not an exhaustive introduction to the language, but it will cover the most important concepts and in particular the concepts where R differs from other languages you may be familiar with. If you have prior R experience you can skip this worksheet.\nR is a language designed for interactive data analysis, and some of its features may seem strange when approached from the perspective of a general purpose programming language. Keep in mind that language features that simplify interactive work may get in the way of writing complex programs and vice versa.\nPlease wait a moment until the live R session is fully set up and all packages are loaded."
  },
  {
    "objectID": "worksheets/intro-to-R.html#basic-data-types",
    "href": "worksheets/intro-to-R.html#basic-data-types",
    "title": "Introduction to R",
    "section": "Basic data types",
    "text": "Basic data types\nR implements all the standard mathematical operations you would expect, such as addition, subtraction, etc., as well as special functions. This will generally work just like you would expect from other languages.\n\n\n\n\n\n\n\n\nTry this out. Can you calculate 2 to the power of 5? Or the sin of pi/4? Or the square-root of 2?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n2^5\nsin(pi/4)\nsqrt(2)\n\n\n\n\nOne way in which R differs from most programming languages is that it is inherently vectorized. In R, you always work with vectors of numbers rather than with individual values. (A vector is an ordered set of values of the same data type.) Vectors are created with c(...), as in c(1, 2, 3). You can also create vectors of consecutive integers using the colon notation, as in 1:3 or 3:1. The latter places the integers into the reverse order.\n\n\n\n\n\n\n\n\nTry this out. Make a vector of the integers from 1 to 10. Make a vector of the values 0.25, 0.5, 0.75. Make a vector of the words “orange”, “banana”, “grapefruit”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n1:10\nc(0.25, 0.5, 0.75)\nc(\"orange\", \"banana\", \"grapefruit\")\n\n\n\n\nMathematical operations are also vectorized, so you can for example multiply all values in a vector by the same number or calculate multiple square roots at once. You can also do mathematical operations combining two (or more) vectors and the operation will be element-wise. If the numbers of elements don’t match you will get a warning but R will still give you a result. However, it’s generally best to avoid combining vectors with mismatched lengths, as the results can be non-intuitive.\n\n\n\n\n\n\n\n\nTry this out. Make a vector of all the squares of the numbers from 1 to 5. Also make a vector of the values 0.25, 0.5, 0.75, by using a vectorized mathematical expression.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n(1:5)^2\n(1:3)/4\n\n\n\n\nR also has logical values TRUE and FALSE (written in all capitals). Logical values also are vectorized, and they can be created by vectorized comparisons. This is very important for data analysis tasks.\n\n\n\n\n\n\n\n\nTry this out. Manually create a vector of logical values. Then create a vector of logical values via comparison.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nc(TRUE, TRUE, TRUE, FALSE)\n(1:10) &lt;= 5\n\n\n\n\nYou can combine vectors of logical values with & (logical AND) and | (logical OR). You can negate logical values with ! (logical NOT).\n\n\n\n\n\n\n\n\nTry this out. Combine some logical vectors with & and |. Also negate a logical vector.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n!c(FALSE, TRUE) & c(TRUE, FALSE)\nc(FALSE, TRUE) | c(TRUE, FALSE)"
  },
  {
    "objectID": "worksheets/intro-to-R.html#missing-values",
    "href": "worksheets/intro-to-R.html#missing-values",
    "title": "Introduction to R",
    "section": "Missing values",
    "text": "Missing values\nR supports the concept of missing values. Missing values are data values that don’t exist. This is a common issue in real-world data. For example, consider a scenario where people are asked to fill out a questionaire about various aspects of who they are and where they live, and one question asks about where they were born, and some people simply don’t answer that question. The result is a missing value, and we need the ability to express this concept.\nIn R, missing values are denoted by NA. You can use NA as a value for any vector.\n\n\n\n\n\n\n\n\nNote that the NA indicating a missing value is not enclosed in quotes, even for vectors of words (i.e, character strings).\nIn computations, missing values remain missing. You can check for missingness via is.na().\n\n\n\n\n\n\n\n\nTry this out. Make both a numerical and a character vector with some missing values. Also test for the missing positions in one of the vectors you made.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nc(NA, 1, NA, 1)\nc(\"banana\", NA, \"orange\", NA)\nis.na(c(\"banana\", NA, \"orange\", NA))"
  },
  {
    "objectID": "worksheets/intro-to-R.html#variables-and-functions",
    "href": "worksheets/intro-to-R.html#variables-and-functions",
    "title": "Introduction to R",
    "section": "Variables and functions",
    "text": "Variables and functions\nAny data values or objects that you are working with in R can be assigned to variables to be reused later. Assignment in R is expressed with the &lt;- operator. (You can also assign with = but this is generally discouraged.) If you subsequently just write the variable name by itself R prints out the value corresponding to that variable.\n\n\n\n\n\n\n\n\nTry this out. Assign the number 5 to a variable called foo and then print the value of foo. Then calculate the cosine of this number.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nfoo &lt;- 5\nfoo\ncos(foo)\n\n\n\n\nIn addition to working with variables, we commonly use and interact with functions in R. Functions are a way to store code and reuse it at a later stage. To call a function (which means to execute the code the function stores), you write the name of the variable storing the function followed by parentheses, as in sin() for the sine function. Inside the parentheses we can place values that are called “arguments,” as in sin(0.5). These arguments turn into variables that are used inside the function body.\nIn R, function arguments are always named, which means you can write the name of the argument when you provide the argument value, as in sin(x = 0.5). This is helpful for functions with many arguments, as without providing the argument names it can be confusing which value gets assigned to which argument. If you don’t name the function arguments, then values are assigned to arguments in order (positional matching), similarly to how most other programming languages work.\nIn the following example, the function example_fun() takes three arguments, a, b, and c, and each argument has a default value that will be used in case the argument is not provided when the function is called. The function then simply prints the values of the arguments. This allows us to explore how argument matching works in R.\n\n\n\n\n\n\n\n\nNow try this out yourself. Using the function example_fun() defined above, see what happens when you provide different arguments, positional or named. Do you understand what example_fun(2, a = 1) does?"
  },
  {
    "objectID": "worksheets/intro-to-R.html#packages",
    "href": "worksheets/intro-to-R.html#packages",
    "title": "Introduction to R",
    "section": "Packages",
    "text": "Packages\nMany R features are provided by extension packages. You need to load those packages with library() before you can use them. For example, throughout this class, we make extensive use of the tidyverse package and therefore you will see library(tidyverse) at the beginning of most worksheets and homework templates. One of the most common problem students encounter in assignments is that they want to use a function from a package but have not properly loaded the package.\nNote that we don’t normally put the package name in quotes inside the library() statement.\nUpon loading, some packages write out all sorts of messages. In particular, the tidyverse package lists a number of “conflicts”. This frequently confuses students as they think something has gone wrong. You can just ignore these conflicts. They are expected and they will not interfere with your work in this class.\n\n\n\n\n\n\n\n\nTry out loading a package. Load the package ggridges. Then load the package cowplot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nlibrary(ggridges)\nlibrary(cowplot)"
  },
  {
    "objectID": "worksheets/intro-to-R.html#numerical-and-logical-indexing",
    "href": "worksheets/intro-to-R.html#numerical-and-logical-indexing",
    "title": "Introduction to R",
    "section": "Numerical and logical indexing",
    "text": "Numerical and logical indexing\nR has a variety of ways to extract specific values or subsets of a vector. First, you can extract an individual element by indexing with square brackets. For example, if x is a vector, x[1] is the first element, x[2] is the second element, and so on. Note that in R, the first element of a vector is number 1, not number 0 as it is in most other languages (Python, C, Rust, etc.). You can also extract multiple elements by placing a vector of numeric values inside the square brackets.\n\n\n\n\n\n\n\n\nNegative indices remove the respective elements.\n\n\n\n\n\n\n\n\nTry this out. Extract the first element from the names vector, then extract the last two, then extract all but the first.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nnames[1]\nnames[c(3, 4)]\nnames[-1]\n\n\n\n\nIn addition to numerical indexing, a frequently used indexing approach in R is logical indexing. In logical indexing, you provide inside the square brackets a logical vector that indicates for each element whether you want to keep it (TRUE) or not (FALSE). The benefit of this indexing approach is that you can combine it with logical statements to extract all elements that meet a specific condition.\n\n\n\n\n\n\n\n\nTry this out, by extracting all the even numbers from the numerical vector 1:10. To test whether a number x is even, you can use x %% 2 == 0.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nnumbers &lt;- 1:10\nnumbers[numbers %% 2 == 0]"
  },
  {
    "objectID": "worksheets/intro-to-R.html#data-frames",
    "href": "worksheets/intro-to-R.html#data-frames",
    "title": "Introduction to R",
    "section": "Data frames",
    "text": "Data frames\nA core concept of R is the data frame, which holds data in tabular form. A data frame is made up of multiple columns that all have the same number of elements. Different columns can be of different types.\nThere are a variety of ways to create a data frame. We will usually use the tibble() function from the tidyverse package.\n\n\n\n\n\n\n\n\nNote how we can assign names to the columns via named arguments in the tibble() function.\nTry this out. Create a tibble of your own."
  },
  {
    "objectID": "worksheets/intro-to-R.html#flow-control",
    "href": "worksheets/intro-to-R.html#flow-control",
    "title": "Introduction to R",
    "section": "Flow control",
    "text": "Flow control\nR has standard flow-control features such as for loops and if/else statements. These are almost never needed in data analysis and therefore I will not cover them here. If you find yourself wanting to use those constructs chances are you are replicating procedural programming patterns you have learned in other languages but that are not the most elegant way to solving a data analysis problem. I would encourage you to think about how to solve your problem using vectorized or functional programming patterns instead. (Functional programming patterns such as map() go beyond this basic tutorial but will be covered later in this class.)\nA concept closely related to flow control is the if_else() function from the tidyverse package. With if_else(), you can run a comparison at each position in a vector and then create a new vector whose elements depend on the outcome of each comparison.\nFor example, we can replace each occurrence of the word “orange” by “citrus” like so:\n\n\n\n\n\n\n\n\nThe first argument to if_else() is the logical condition you want to execute, the second argument is the resulting value if the condition is true, and the third argument is the resulting value if the condition is false.\nTry this out. In the following example, replace all numbers greater than 5 with the number 5 in the vector numbers.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nnumbers &lt;- c(10, 2, 4, 7, 6, -1, -8)\nif_else(numbers &gt; 5, ___, ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nnumbers &lt;- c(10, 2, 4, 7, 6, -1, -8)\nif_else(numbers &gt; 5, 5, numbers)"
  },
  {
    "objectID": "worksheets/getting-things-in-order.html",
    "href": "worksheets/getting-things-in-order.html",
    "title": "Getting things into the right order",
    "section": "",
    "text": "In this worksheet, we will discuss how to manipulate factor levels such that plots show visual elements in the correct order.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nWe will be working with the dataset penguins, which contains data on individual penguins on Antarctica.\npenguins\n\n\n\n\n\n\n\n\n\n\nWe will also be working with the dataset gapminder, which contains information about life expectancy, population number, and GDP for 142 different countries.\n\n\n\n\n\n\n\n\nFinally, we will be working with the dataset Aus_athletes, which contains various physiological measurements made on athletes competing in different sports."
  },
  {
    "objectID": "worksheets/getting-things-in-order.html#introduction",
    "href": "worksheets/getting-things-in-order.html#introduction",
    "title": "Getting things into the right order",
    "section": "",
    "text": "In this worksheet, we will discuss how to manipulate factor levels such that plots show visual elements in the correct order.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nWe will be working with the dataset penguins, which contains data on individual penguins on Antarctica.\npenguins\n\n\n\n\n\n\n\n\n\n\nWe will also be working with the dataset gapminder, which contains information about life expectancy, population number, and GDP for 142 different countries.\n\n\n\n\n\n\n\n\nFinally, we will be working with the dataset Aus_athletes, which contains various physiological measurements made on athletes competing in different sports."
  },
  {
    "objectID": "worksheets/getting-things-in-order.html#manual-reordering",
    "href": "worksheets/getting-things-in-order.html#manual-reordering",
    "title": "Getting things into the right order",
    "section": "Manual reordering",
    "text": "Manual reordering\nThe simplest form of reordering is manual, where we state explicitly in which order we want some graphical element to appear. We reorder manually with the function fct_relevel(), which takes as arguments the variable to reorder and the levels we want to reorder, in the order in which we want them to appear.\nHere is a simple example. We create a factor x with levels \"A\", \"B\", \"C\", in that order, and then we reorder the levels to \"B\", \"C\", \"A\".\n\n\n\n\n\n\n\n\nTry this out for yourself. Place the levels into a few different orderings. Also try listing only some of the levels to reorder.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nx &lt;- factor(c(\"A\", \"B\", \"A\", \"C\", \"B\"))\nx\n\nfct_relevel(x, \"C\", \"A\", \"B\")\n\n\n\n\nNow we apply this concept to a ggplot graph. We will work with the following boxplot visualization of the distribution of bill length versus penguin species.\n\n\n\n\n\n\n\n\n\nUse the function `fct_relevel()` to place the three species into the order Chinstrap, Gentoo, Adelie. (*Hint:* You will have to use a `mutate()` statement to modify the `species` column.)\n\n::: {.cell exercise='penguins-ordered-manual'}\n```{webr}\n#| exercise: penguins-ordered-manual\n\n:::\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  mutate(\n    species = fct_relevel(___)\n  ) |&gt;\n  ggplot(aes(species, bill_length_mm)) +\n  geom_boxplot(na.rm = TRUE)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  mutate(\n    species = fct_relevel(species, \"Chinstrap\", \"Gentoo\", \"Adelie\")\n  ) |&gt;\n  ggplot(aes(species, bill_length_mm)) +\n  geom_boxplot(na.rm = TRUE)\n\n\n\n\nNow flip the x and y axes, making sure that the order remains Chinstrap, Gentoo, Adelie from top to bottom.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  mutate(\n    species = fct_relevel(species, ___)\n  ) |&gt;\n  ggplot(aes(bill_length_mm, species)) +\n  geom_boxplot(na.rm = TRUE)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  mutate(\n    species = fct_relevel(species, \"Adelie\", \"Gentoo\", \"Chinstrap\")\n  ) |&gt;\n  ggplot(aes(bill_length_mm, species)) +\n  geom_boxplot(na.rm = TRUE)"
  },
  {
    "objectID": "worksheets/getting-things-in-order.html#reordering-based-on-frequency",
    "href": "worksheets/getting-things-in-order.html#reordering-based-on-frequency",
    "title": "Getting things into the right order",
    "section": "Reordering based on frequency",
    "text": "Reordering based on frequency\nManual reordering is cumbersome if there are many levels that need to be reorderd. Therefore, we often use functions that can reorder automatically based on some quantitative criterion. For example, we can use fct_infreq() to order a factor based on the number of occurrences of each level in the dataset. And we can reverse the order of a factor using the function fct_rev(). These two functions are particularly useful for making bar plots.\nConsider the following plot of the number of athletes competing in various sports in the Aus_athletes dataset. This plot is problematic because the sports are arranged in an arbitrary (here: alphabetic) order that is not meaningful for the data shown.\n\n\n\n\n\n\n\n\nReorder the sport column so that the sport with the most athletes appears on top and the sport with the least athletes at the bottom.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nAus_athletes |&gt;\n  mutate(\n    sport = ___\n  ) |&gt;\n  ggplot(aes(y = sport)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nAus_athletes |&gt;\n  mutate(\n    sport = fct_rev(fct_infreq(sport))\n  ) |&gt;\n  ggplot(aes(y = sport)) +\n  geom_bar()"
  },
  {
    "objectID": "worksheets/getting-things-in-order.html#reordering-based-on-numerical-values",
    "href": "worksheets/getting-things-in-order.html#reordering-based-on-numerical-values",
    "title": "Getting things into the right order",
    "section": "Reordering based on numerical values",
    "text": "Reordering based on numerical values\nAnother common problem we encounter is that we want to order a factor based on some other numerical variable, possibly after we have calculated some summary statistic such as the median, minimum, or maximum.\nAs an example for this problem, we consider a plot of the life expectancy in various countries in the Americas over time, shown as colored tiles.\n\n\n\n\n\n\n\n\nThe default alphabetic ordering creates a meaningless color pattern that is difficult to read. It would make more sense to order the countries by some function of the life expectancy values, such as the minimum, median, or maximum value. We can do this with the function fct_reorder(), which takes three arguments: The factor to reorder, the numerical variable on which to base the ordering, and the name of a function (such as min, median, max) to be applied to calculate the ordering statistic.\nModify the above plot so the countries are ordered by their median life expectancy over the observed time period.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\ngapminder |&gt;\n  filter(continent == \"Americas\") |&gt;\n  mutate(\n    country = fct_reorder(___, ___, ___)\n  ) |&gt;\n  ggplot(aes(year, country, fill = lifeExp)) + \n  geom_tile() +\n  scale_fill_viridis_c(option = \"A\")\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\ngapminder |&gt;\n  filter(continent == \"Americas\") |&gt;\n  mutate(\n    country = fct_reorder(country, lifeExp, median)\n  ) |&gt;\n  ggplot(aes(year, country, fill = lifeExp)) + \n  geom_tile() +\n  scale_fill_viridis_c(option = \"A\")\n\n\n\n\nTry other orderings, such as min, max, or mean.\nNext, instead of plotting this data as colored tiles, plot it as lines, using facets to make separate panels for each country.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\ngapminder |&gt;\n  filter(continent == \"Americas\") |&gt;\n  mutate(country = fct_reorder(country, lifeExp, median)) |&gt;\n  ggplot(___) + \n  geom____() +\n  facet_wrap(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\ngapminder |&gt;\n  filter(continent == \"Americas\") |&gt;\n  mutate(country = fct_reorder(country, lifeExp, median)) |&gt;\n  ggplot(aes(year, lifeExp)) + \n  geom_line() +\n  facet_wrap(vars(country))\n\n\n\n\nAgain, try various orderings, including min, max, or mean."
  },
  {
    "objectID": "worksheets/getting-things-in-order.html#lumping-of-factor-levels",
    "href": "worksheets/getting-things-in-order.html#lumping-of-factor-levels",
    "title": "Getting things into the right order",
    "section": "Lumping of factor levels",
    "text": "Lumping of factor levels\nFinally, we sometimes have factors with too many levels and we want to combine some into a catch-all level such as “Other”. We illustrate this concept with the following plot, which shows BMI (body-mass index) versus height for male athletes, broken down by sport.\n\n\n\n\n\n\n\n\nWe want to modify this plot so that all sports other than basketball and water polo are shown as “Other”. To achieve this goal, you will have to create a new column called sport_lump that contains a lumped version of the sport factor.\nThe function that does the lumping is called fct_other(), and it takes as argument the variable to lump and an argument keep listing the values to keep or alternatively an argument drop listing the values to drop. Since you want to keep only basketball and water polo, use the variant with the keep argument.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nAus_athletes |&gt;\n  filter(sex == \"m\") |&gt;\n  mutate(\n    sport_lump = fct_other(sport, keep = ___)\n  ) |&gt;\n  ggplot(aes(height, bmi, color = sport_lump)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nAus_athletes |&gt;\n  filter(sex == \"m\") |&gt;\n  mutate(\n    sport_lump = fct_other(sport, keep = c(\"basketball\", \"water polo\"))\n  ) |&gt;\n  ggplot(aes(height, bmi, color = sport_lump)) +\n  geom_point()\n\n\n\n\nNow use the variant of the fct_other() function with the drop argument. Drop field, rowing, and tennis from the sports considered individually.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nAus_athletes |&gt;\n  filter(sex == \"m\") |&gt;\n  mutate(\n    sport_lump = fct_other(sport, drop = ___)\n  ) |&gt;\n  ggplot(aes(height, bmi, color = sport_lump)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nAus_athletes |&gt;\n  filter(sex == \"m\") |&gt;\n  mutate(\n    sport_lump = fct_other(sport, drop = c(\"field\", \"rowing\", \"tennis\"))\n  ) |&gt;\n  ggplot(aes(height, bmi, color = sport_lump)) +\n  geom_point()\n\n\n\n\nFinally, try other lumping functions also. For example, the function fct_lump_n() retains the n most frequent levels and lump all others into \"Other\". See if you can create a meaningful example with the Aus_athletes dataset that uses the fct_lump_n() function. Hint: Try to make a bar plot, similar to the one we made in the section on reordering based on frequency."
  },
  {
    "objectID": "worksheets/data-wrangling-2.html",
    "href": "worksheets/data-wrangling-2.html",
    "title": "Data wrangling 2",
    "section": "",
    "text": "In this worksheet, we will continue with basic data manipulations, now moving on to grouping and summarizing, making data tables wider or longer, and joining data tables.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data. We will be working with data on individual penguins in Antarctica.\npenguins\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe’ll also be working with two datasets containing some information about Texas cities."
  },
  {
    "objectID": "worksheets/data-wrangling-2.html#introduction",
    "href": "worksheets/data-wrangling-2.html#introduction",
    "title": "Data wrangling 2",
    "section": "",
    "text": "In this worksheet, we will continue with basic data manipulations, now moving on to grouping and summarizing, making data tables wider or longer, and joining data tables.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data. We will be working with data on individual penguins in Antarctica.\npenguins\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe’ll also be working with two datasets containing some information about Texas cities."
  },
  {
    "objectID": "worksheets/data-wrangling-2.html#analyzing-subsets",
    "href": "worksheets/data-wrangling-2.html#analyzing-subsets",
    "title": "Data wrangling 2",
    "section": "Analyzing subsets",
    "text": "Analyzing subsets\nIn many data analysis settings, we want to break a dataset into subsets and then perform some summary calculation on each subset. The simplest example is counting, which we have done previously with the count() function.\n\n\n\n\n\n\n\n\nThis function subdivides the penguins dataset into subsets for each species and then calculates the number n for each subset, which is the number of observations in each subset.\nThe function count() here does all the work for us, but what if instead of counting we wanted to calculate the mean weight of the penguins for each species, or calculate the mean weight and count at the same time? We need a general framework that allows us to do these kinds of calculations with maximum flexibility.\nThe tidyverse approach is to first group a dataset with group_by() and then to calculate grouped summaries with summarize().\n\nGrouping\nLet’s first consider just grouping. If we look at the raw R output of just the penguins table or the penguins table after running it through group_by(species), we see that the table is the same, except in the second case there is a line # Groups:   species [3] which indicates that the table is grouped by species and there are three groups. (Here, we need to pipe the tables into the print() function to see the raw R output instead of a formatted table that would hide the grouping information.)\n\n\n\n\n\n\n\n\nWe can also group by multiple data columns at once, and we can undo any grouping with ungroup().\n\n\n\n\n\n\n\n\nNow try this yourself. Group the penguins dataset by sex and island.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  group_by(___) |&gt;\n  print()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  group_by(sex, island) |&gt;\n  print()\n\n\n\n\nNow undo the previous grouping.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  group_by(sex, island) |&gt;\n  ___ |&gt;\n  print()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  group_by(sex, island) |&gt;\n  ungroup() |&gt;\n  print()\n\n\n\n\nAlso verify what the output looks like when you omit the print() function at the end.\n\n\nPerforming summaries\nOnce we have set up a grouping for a data table, we can then calculate summary data with the summarize() function. This function works similarly to mutate(), in that we provide it with statements of the form &lt;new column name&gt; = &lt;computation&gt;, where &lt;new column name&gt; stands for the name of the new column that is being created and &lt;computation&gt; stands for the computation that is used to generate the values in the new column. As an example, if we want to calculate the mean weight (body mass) of penguins, we could write summarize(mean_weight = mean(body_mass_g)), and this would create a new column called mean_weight.\nTry this out. First group by sex and then calculate the mean weight for each sex.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  group_by(sex) |&gt;\n  summarize(\n    ___ = ___\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  group_by(sex) |&gt;\n  summarize(\n    mean_weight = mean(body_mass_g)\n  )\n\n\n\n\nWe see that male penguins on average are heavier than female penguins. We also see that there is a row containing NAs. This happens because there are a few entries in the dataset for which we know neither the penguins’ sex nor their weight.\nNext, see if the pattern changes if we subdivide the dataset by species.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  group_by(species, sex) |&gt;\n  summarize(\n    ___ = ___\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  group_by(species, sex) |&gt;\n  summarize(\n    mean_weight = mean(body_mass_g)\n  )\n\n\n\n\nWhen running this code, you see a message that summarise() (the tidyverse uses British spelling internally) has grouped the output by species. This happens because if you group by multiple variables and then perform a summary it usually makes sense to keep all but the innermost groupings. Verify this is the case by piping the output from summarize() into print().\nWe can perform multiple summaries at once by adding more statements inside the summarize() function. To try this out, calculate the mean bill length in addition to the mean weight.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  group_by(species, sex) |&gt;\n  summarize(\n    mean_weight = ___,\n    mean_bill_length = ___\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  group_by(species, sex) |&gt;\n  summarize(\n    mean_weight = mean(body_mass_g),\n    mean_bill_length = mean(bill_length_mm)\n  )\n\n\n\n\nWhen performing summaries, we often want to know how many observations there are in each group (i.e., we want to count). We can do this with the function n(), which inside summarize() gives us the group size. So, we can count by adding a statement such as count = n() inside summarize(). Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  group_by(species, sex) |&gt;\n  summarize(\n    mean_weight = ___,\n    mean_bill_length = ___,\n    count = ___\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  group_by(species, sex) |&gt;\n  summarize(\n    mean_weight = mean(body_mass_g),\n    mean_bill_length = mean(bill_length_mm),\n    count = n()\n  )\n\n\n\n\n\n\nRemoving missing values\nIf we try the previous calculation but grouping only by species and not by sex, we notice a problem: Most values have been replaced by NA.\n\n\n\n\n\n\n\n\nThis happens because R does not like to calculate the mean of a set of numbers where at least one is missing. Whenever there are missing values, we need to think carefully whether we can just ignore them or need to do something more sophisticated. In the penguins dataset there are only a handful of missing values, and therefore ignoring them is fine.\nWe can ignore missing values by setting na.rm = TRUE inside the mean() function. Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  group_by(species) |&gt;\n  summarize(\n    mean_weight = mean(body_mass_g, ___),\n    mean_bill_length = mean(bill_length_mm, ___)\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  group_by(species) |&gt;\n  summarize(\n    mean_weight = mean(body_mass_g, na.rm = TRUE),\n    mean_bill_length = mean(bill_length_mm, na.rm = TRUE)\n  )\n\n\n\n\nAlternatively, we could filter out all rows that contain NAs in the columns of interest. We test whether a column contains NAs with is.na(&lt;column name&gt;), and to keep rows without NAs we use !is.na(&lt;column name&gt;). Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  filter(!is.na(body_mass_g), ___) |&gt;\n  group_by(species) |&gt;\n  summarize(\n    mean_weight = mean(body_mass_g),\n    mean_bill_length = mean(bill_length_mm)\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  filter(!is.na(body_mass_g), !is.na(bill_length_mm)) |&gt;\n  group_by(species) |&gt;\n  summarize(\n    mean_weight = mean(body_mass_g),\n    mean_bill_length = mean(bill_length_mm)\n  )"
  },
  {
    "objectID": "worksheets/data-wrangling-2.html#making-tables-wider-or-longer",
    "href": "worksheets/data-wrangling-2.html#making-tables-wider-or-longer",
    "title": "Data wrangling 2",
    "section": "Making tables wider or longer",
    "text": "Making tables wider or longer\nFor efficient data processing, we usually want tables in long form, where each columns is one variable and each row is one observation. However, in some applications, for example when making a table easier to read for humans, a wide format can be preferred. In a wide format, some variables are displayed as column names, and other variables are distributed over multiple columns.\nConsider the following two versions of a summary table. The first is in long format, where sex is one column and the mean weight is another.\n\n\n\n\n\n\n\n\nThe second is in wide format, where the values of the sex variable (female or male) are used as column headings, and the mean weight values are distributed over these two columns.\n\n\n\n\n\n\n\n\nYou can turn a long table into a wide table using the function pivot_wider(), which takes two arguments: names_from specifies the long column from which the new wide column names should be taken (here e.g., \"sex\"), and values_from specifies the long column from which the new wide values should be taken (here e.g., \"mean_weight\"). Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins_long |&gt;\n  pivot_wider(names_from = ___, values_from = ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins_long |&gt;\n  pivot_wider(names_from = \"sex\", values_from = \"mean_weight\")\n\n\n\n\nYou can similarly turn a wide table into a long one using the function pivot_longer(). It has arguments cols, names_to, and values_to. cols specifies the wide columns on which to operate, names_to specifies into which long columns the names of the wide columns should be written, and values_to specfies into which long columns the values of the wide columns should be written. Note that while names_to and values_to are specified as strings (that is, in quotes, such as names_to = \"sex\"), the cols argument does not use quotes (e.g., cols = c(female, male)).\nTry this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins_wide |&gt;\n  pivot_longer(\n    cols = ___,\n    names_to = ___,\n    values_to = ___\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins_wide |&gt;\n  pivot_longer(\n    cols = c(female, male),\n    names_to = \"sex\",\n    values_to = \"mean_weight\"\n  )\n\n\n\n\nNotice how the arguments names_from and values_from in pivot_wider() are exactly equivalent to names_to and values_to in pivot_longer()."
  },
  {
    "objectID": "worksheets/data-wrangling-2.html#combining-datasets-with-joins",
    "href": "worksheets/data-wrangling-2.html#combining-datasets-with-joins",
    "title": "Data wrangling 2",
    "section": "Combining datasets with joins",
    "text": "Combining datasets with joins\nFinally, we sometimes encounter the situation where we have two data sets that contain different pieces of information about the same subjects or objects, and we need to merge these tables for further analysis. In this situation, we need to perform a join, and there are multiple different types of joins available: left_join(), right_join(), inner_join(), full_join(). These joins all differ in how they handle cases where an observation is present in only one of the two tables but missing in the other.\nTwo explore joins, consider the following two datasets, which contain the population number of three Texas cities and the city areas, respectively. The cities in the two tables are not the same, on purpose.\n\n\n\n\n\n\n\n\nTry to merge TX_area into TX_population, using left_join().\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nleft_join(___, ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nleft_join(TX_population, TX_area)\n\n\n\n\nWhat happens if you reverse the two arguments?\nNow try the same with full_join().\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nfull_join(___, ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nfull_join(TX_population, TX_area)\n\n\n\n\nTry also right_join() and inner_join(). See if you can describe what each join function does and how they differ from one another."
  },
  {
    "objectID": "worksheets/coordinate-systems-axes.html",
    "href": "worksheets/coordinate-systems-axes.html",
    "title": "Coordinate systems and axes",
    "section": "",
    "text": "In this worksheet, we will discuss how to change and customize scales and coordinate systems.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with three different datasets, boxoffice, temperatures, and tx_counties. You have already seen the first two previously.\nThe boxoffice dataset contains box-office gross results for Dec. 22-24, 2017.\n\n\n\n\n\n\n\n\nThe temperatures dataset contains the average temperature for each day of the year for four different locations.\n\n\n\n\n\n\n\n\nThe tx_counties dataset holds information about how many people lived in Texas counties in 2010. The column popratio is the ratio of the number of inhabitants to the median across all counties, and the column index simply counts the counties from most populous to least populous."
  },
  {
    "objectID": "worksheets/coordinate-systems-axes.html#introduction",
    "href": "worksheets/coordinate-systems-axes.html#introduction",
    "title": "Coordinate systems and axes",
    "section": "",
    "text": "In this worksheet, we will discuss how to change and customize scales and coordinate systems.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with three different datasets, boxoffice, temperatures, and tx_counties. You have already seen the first two previously.\nThe boxoffice dataset contains box-office gross results for Dec. 22-24, 2017.\n\n\n\n\n\n\n\n\nThe temperatures dataset contains the average temperature for each day of the year for four different locations.\n\n\n\n\n\n\n\n\nThe tx_counties dataset holds information about how many people lived in Texas counties in 2010. The column popratio is the ratio of the number of inhabitants to the median across all counties, and the column index simply counts the counties from most populous to least populous."
  },
  {
    "objectID": "worksheets/coordinate-systems-axes.html#scale-customizations",
    "href": "worksheets/coordinate-systems-axes.html#scale-customizations",
    "title": "Coordinate systems and axes",
    "section": "Scale customizations",
    "text": "Scale customizations\nWe can modify the appearance of the x and y axis with scale functions. All scale functions have name of the form scale_aesthetic_type(), where aesthetic stands for an aesthetic to which we’re mapping data (e.g., x, y, color, fill, etc), and type stands for the specific type of the scale. What scale types are available depends on both the aesthetic and the data.\nHere, we only consider position scales, which are scales for the x and y aesthetics. The most commonly used scales types for position scales are continuous for continuous data and discrete for discrete data, yielding the scale functions scale_x_continuous(), scale_y_continuous(), scale_x_discrete(), and scale_y_discrete(). But there are others, such as date, time, or binned. You can look them up here: https://ggplot2.tidyverse.org/reference/index.html#section-scales\nPosition scale functions are used to modify both the appearance of the axis (axis title, axis labels, number and location of breaks, etc.) and the mapping from data to position (including the range of data values considered, i.e., axis limits, and whether the data should be transformed, as is the case in log scales).\nLet’s start with this plot of the boxoffice data:\n\n\n\n\n\n\n\n\nWe can use scale functions to modify the axis titles, by setting the name argument. For example, scale_x_continuous(name = \"the x value\") would set the axis title to “the x value” in a continuous scale along the x axis.\nUse the appropriate scale functions to modify both axis titles in the above plot. Think about which axes (if any) are continuous and which are discrete.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  scale_x_continuous(___) +\n  scale_y_discrete(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  scale_x_continuous(name = \"weekend gross (million USD)\") +\n  scale_y_discrete(name = NULL)\n\n\n\n\nWe can also use scale functions to set axis limits, via the limits argument. For continuous scales, the limits argument takes a vector of two numbers representing the lower and upper limit. For example, limits = c(0, 80) would indicate an axis that runs from 0 to 80. For discrete scales, the limits argument takes a vector of all the categories that should be shown, in the order in which they should be shown.\nTry this out by setting a limit from 0 to 80 on the x axis.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  scale_x_continuous(\n    name = \"weekend gross (million USD)\",\n    limits = ___\n  ) +\n  scale_y_discrete(name = NULL)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  scale_x_continuous(\n    name = \"weekend gross (million USD)\",\n    limits = c(0, 80)\n  ) +\n  scale_y_discrete(name = NULL)\n\n\n\n\nWhat happens if you set the axis limits such that not all data points can be shown, for example an upper limit of 65 rather than 80? Do you understand why?\n(Hint: Scale limits are applied before the plot is drawn, and data points outside the scale limits are discarded. If this is not what you want, there’s an alternative way of setting limits. See the very end of this worksheet under “Coords”.)\nNext, we can use the breaks and labels arguments to customize which axis ticks are shown and how they are labeled. In general, you need exactly as many breaks as labels. If you define only breaks but not labels then labels are automatically generated from the breaks.\nBuilding on the code from the previous example, set breaks at 0, 25, 50, and 75, and format the labels such that they can be read as currency. For example, write $25M instead of just 25.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  scale_x_continuous(\n    name = \"weekend gross\",\n    limits = c(0, 80),\n    breaks = ___,\n    labels = ___\n  ) +\n  scale_y_discrete(name = NULL)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  scale_x_continuous(\n    name = \"weekend gross\",\n    limits = c(0, 80),\n    breaks = c(0, 25, 50, 75),\n    labels = c(\"0\", \"$25M\", \"$50M\", \"$75M\")\n  ) +\n  scale_y_discrete(name = NULL)\n\n\n\n\nWhen looking at the resulting plot, you may notice that the x axis extends beyond the limits you have set. This happens because by default ggplot scales expand the axis range by a small amount. You can set the axis expansion via the expand parameter. Setting the expansion can be a bit tricky, because we can set expansion at either end of a scale and we can define both additive and multiplicative expansion. (Additive expansion adds a fixed value, whereas multiplicative expansion adds a multiple of the scale range. ggplot uses additive expansion for discrete scales and multiplicative expansion for continuous scales, but you can use either for either scale.)\nThe simplest way to define expansions is with the expansion() function, which takes arguments mult for multiplicative expansion and add for additive expansion. Either takes a vector of two values, indicating expansion at the lower and upper end, respectively. Thus, expansion(mult = c(0, 0.1)) indicates multiplicative expansion of 0% at the lower end and 10% at the upper end, whereas expansion(add = c(2, 2)) indicates additive expansion of 2 units at either end of the scale.\nTry this yourself. Use the expand argument to remove the gap to the left of 0 on the x axis.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  scale_x_continuous(\n    name = \"weekend gross\",\n    limits = c(0, 80),\n    breaks = c(0, 25, 50, 75),\n    labels = c(\"0\", \"$25M\", \"$50M\", \"$75M\"),\n    expand = expansion(___)\n  ) +\n  scale_y_discrete(name = NULL)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  scale_x_continuous(\n    name = \"weekend gross\",\n    limits = c(0, 80),\n    breaks = c(0, 25, 50, 75),\n    labels = c(\"0\", \"$25M\", \"$50M\", \"$75M\"),\n    expand = expansion(mult = c(0, 0.06))\n  ) +\n  scale_y_discrete(name = NULL)\n\n\n\n\nTry different settings for the expand argument. Try both multiplicative and additive expansions. Apply different expansions to the y axis as well."
  },
  {
    "objectID": "worksheets/coordinate-systems-axes.html#logarithmic-scales",
    "href": "worksheets/coordinate-systems-axes.html#logarithmic-scales",
    "title": "Coordinate systems and axes",
    "section": "Logarithmic scales",
    "text": "Logarithmic scales\nScales can also transform the data before plotting. For example, log scales such as scale_x_log10() and scale_y_log10() log-transform the data. To try this out, we’ll be working with the tx_counties dataset:\n\n\n\n\n\n\n\n\nModify this plot so the y axis uses a log scale.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(tx_counties) +\n  aes(x = index, y = popratio) +\n  geom_point() +\n  scale_y_log10()\n\n\n\n\nNow customize the log scale by setting name, limits, breaks, and labels. These work exactly as they did in scale_x_continuous().\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(tx_counties) +\n  aes(x = index, y = popratio) +\n  geom_point() +\n  scale_y_log10(\n    name = ___,\n    limits = ___,\n    breaks = ___,\n    labels = ___\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(tx_counties) +\n  aes(x = index, y = popratio) +\n  geom_point() +\n  scale_y_log10(\n    name = \"population number / median\",\n    limits = c(0.003, 300),\n    breaks = c(0.01, 1, 100),\n    labels = c(\"0.01\", \"1\", \"100\")\n  )"
  },
  {
    "objectID": "worksheets/coordinate-systems-axes.html#coords",
    "href": "worksheets/coordinate-systems-axes.html#coords",
    "title": "Coordinate systems and axes",
    "section": "Coords",
    "text": "Coords\nWhile scales determine how data values are mapped and represented along one dimension, e.g. the x or the y axis, coordinate systems define how these dimensions are projected onto the 2d plot surface. The default coordinate system is the Cartesian coordinate system, which uses orthogonal x and y axes. In the following example, I have added the coord explicitly, but this is not normally necessary.\n\n\n\n\n\n\n\n\nWe can however add a different coord, for example coord_polar() to use a polar coordinate system. Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temperatures, aes(day_of_year, temperature, color = location)) +\n  geom_line() +\n  coord_polar()\n\n\n\n\nIn the polar coordinate system, the y axis (here, temperature) is mapped onto the radius, and the x axis (here, day of year) is mapped onto the angle. You can use scale_x_continuous() and scale_y_continuous() to modify the radial and angular axes. For example, you may want to change the temperature limits from 0 to 105 so the temperature curve for Chicago doesn’t hit the exact center of the plot. Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temperatures, aes(day_of_year, temperature, color = location)) +\n  geom_line() +\n  coord_polar() +\n  scale_y_continuous(limits = ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temperatures, aes(day_of_year, temperature, color = location)) +\n  geom_line() +\n  coord_polar() +\n  scale_y_continuous(limits = c(0, 105))\n\n\n\n\nThere are other useful coords. For example, coord_fixed() is a Cartesian coordinate system with fixed aspect ratio. This is useful when we plot variables along the x and y axes that are measured in the same units. In this case, we want the two axes to be coordinated, such that one step along x has the same meaning as one step along y.\nTo demonstrate this, we reshape the temperatures dataset into wide format, and then plot temperatures in San Diego versus temperatures in Houston.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(A side remark: Do you know why we write `San Diego` and not \"San Diego\" or 'San Diego' inside the aes() function? If you don’t, see if you can find out.)\nThe units along both the x and the y axis are temperatures, but a 10 degree difference in Houston is shown as a shorter distance than a 10 degree difference in San Diego. To address this problem, add coord_fixed() to the above plot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_wide, aes(`San Diego`, Houston)) +\n  geom_point() +\n  coord_fixed()\n\n\n\n\nThis plot is technically correct but it doesn’t look good, because breaks are spaced differently along the two axes. Also, the plot looks strangely narrow and tall. We can fix both issues by manually setting breaks and limits for both axes. Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temps_wide, aes(`San Diego`, Houston)) +\n  geom_point() +\n  coord_fixed() +\n  scale_x_continuous(\n    limits = ___,\n    breaks = ___\n  ) +\n  scale_y_continuous(\n    limits = ___,\n    breaks = ___\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_wide, aes(`San Diego`, Houston)) +\n  geom_point() +\n  coord_fixed() +\n  scale_x_continuous(\n    limits = c(45, 85),\n    breaks = c(40, 50, 60, 70, 80)\n  ) +\n  scale_y_continuous(\n    limits = c(48, 88),\n    breaks = c(50, 60, 70, 80)\n  )\n\n\n\n\nFinally, as the last example of what can be done with coords, we go back to the problem of setting limits on the box-office bar plot. Instead of setting limits with scale functions, we can also set them via the arguments xlim and ylim inside the coord, for example here coord_cartesian(). (This would be a good reason to explicity add coord_cartesian() to a plot.) When we set limits in the coord ggplot does not discard any data points. Instead it simply zooms in or out according to the limits set. Try this out by setting the x limits from 10 to 65 in the box-office plot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  coord_cartesian(\n    xlim = ___\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  coord_cartesian(\n    xlim = c(10, 65)\n  )\n\n\n\n\nNote: It is normally not a good idea to start a bar plot at a value other than 0. This exercise was solely meant to demonstrate how limits in coords differ from limits in scales."
  },
  {
    "objectID": "worksheets/color-selection.html",
    "href": "worksheets/color-selection.html",
    "title": "Color selection",
    "section": "",
    "text": "In this worksheet, you will practice choosing your own colors.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with two datasets that we have seen previously. First, the penguins dataset:\npenguins\n\n\n\n\n\n\n\n\n\n\nSecond, the temps_months dataset which contains the mean temperature for each month in four different locations.\n\n\n\n\n\n\n\n\nWe will start with a scatter plot of the penguins dataset.\n\n\n\n\n\n\n\n\nUse the color chooser app to manually pick three colors that are appropriate for a qualitative color scale. Then modify the plot to use this scale.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(penguins, aes(body_mass_g, bill_length_mm, color = species)) +\n  geom_point(size = 2, na.rm = TRUE) +\n  scale_color_manual(\n    values = ___ # your colors here \n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(penguins, aes(body_mass_g, bill_length_mm, color = species)) +\n  geom_point(size = 2, na.rm = TRUE) +\n  scale_color_manual(\n    # this is just an example, there are many possible choices here\n    values = c('#BF8A21', '#A74C48', '#17517A')\n  )\n\n\n\n\nNow let’s consider this heat map of temperatures in different locations throughout the year.\n\n\n\n\n\n\n\n\nUse the color chooser app to manually pick four to six colors that are appropriate for a sequential color scale. Then modify the plot to use this scale. (To create a manual color gradient, use scale_fill_gradientn().)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile() + \n  coord_fixed(expand = FALSE) +\n  scale_fill_gradientn(\n    colours = ___ # your colors here \n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile() + \n  coord_fixed(expand = FALSE) +\n  scale_fill_gradientn(\n    # this is just an example, there are many possible choices here\n    colours = c('#475010', '#8B9B38', '#C6D77C', '#F4F9E1')\n  )"
  },
  {
    "objectID": "worksheets/color-selection.html#introduction",
    "href": "worksheets/color-selection.html#introduction",
    "title": "Color selection",
    "section": "",
    "text": "In this worksheet, you will practice choosing your own colors.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with two datasets that we have seen previously. First, the penguins dataset:\npenguins\n\n\n\n\n\n\n\n\n\n\nSecond, the temps_months dataset which contains the mean temperature for each month in four different locations.\n\n\n\n\n\n\n\n\nWe will start with a scatter plot of the penguins dataset.\n\n\n\n\n\n\n\n\nUse the color chooser app to manually pick three colors that are appropriate for a qualitative color scale. Then modify the plot to use this scale.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(penguins, aes(body_mass_g, bill_length_mm, color = species)) +\n  geom_point(size = 2, na.rm = TRUE) +\n  scale_color_manual(\n    values = ___ # your colors here \n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(penguins, aes(body_mass_g, bill_length_mm, color = species)) +\n  geom_point(size = 2, na.rm = TRUE) +\n  scale_color_manual(\n    # this is just an example, there are many possible choices here\n    values = c('#BF8A21', '#A74C48', '#17517A')\n  )\n\n\n\n\nNow let’s consider this heat map of temperatures in different locations throughout the year.\n\n\n\n\n\n\n\n\nUse the color chooser app to manually pick four to six colors that are appropriate for a sequential color scale. Then modify the plot to use this scale. (To create a manual color gradient, use scale_fill_gradientn().)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile() + \n  coord_fixed(expand = FALSE) +\n  scale_fill_gradientn(\n    colours = ___ # your colors here \n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile() + \n  coord_fixed(expand = FALSE) +\n  scale_fill_gradientn(\n    # this is just an example, there are many possible choices here\n    colours = c('#475010', '#8B9B38', '#C6D77C', '#F4F9E1')\n  )"
  },
  {
    "objectID": "worksheets/aesthetic-mappings.html",
    "href": "worksheets/aesthetic-mappings.html",
    "title": "Aesthetic mappings",
    "section": "",
    "text": "In this worksheet, we will discuss a core concept of ggplot, the mapping of data values onto aesthetics.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will first work with the dataset temps_houston which contains the average temperature for each day of the year for Houston, TX."
  },
  {
    "objectID": "worksheets/aesthetic-mappings.html#introduction",
    "href": "worksheets/aesthetic-mappings.html#introduction",
    "title": "Aesthetic mappings",
    "section": "",
    "text": "In this worksheet, we will discuss a core concept of ggplot, the mapping of data values onto aesthetics.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will first work with the dataset temps_houston which contains the average temperature for each day of the year for Houston, TX."
  },
  {
    "objectID": "worksheets/aesthetic-mappings.html#basic-use-of-ggplot",
    "href": "worksheets/aesthetic-mappings.html#basic-use-of-ggplot",
    "title": "Aesthetic mappings",
    "section": "Basic use of ggplot",
    "text": "Basic use of ggplot\nIn the most basic use of ggplot, we call the ggplot() function with a dataset and an aesthetic mapping (created with aes()), and then we add a geom, such as geom_line() to draw lines or geom_point() to draw points.\nTry this for yourself. Map the column day_of_year onto the x axis and the column temperature onto the y axis, and use geom_line() to display the data.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_houston, aes(x = day_of_year, y = temperature)) +\n  geom_line()\n\n\n\n\nTry again. Now use geom_point() instead of geom_line().\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_houston, aes(x = day_of_year, y = temperature)) +\n  geom_point()\n\n\n\n\nAnd now swap which column you map to x and which to y.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_houston, aes(x = temperature, y = day_of_year)) +\n  geom_point()"
  },
  {
    "objectID": "worksheets/aesthetic-mappings.html#more-complex-geoms",
    "href": "worksheets/aesthetic-mappings.html#more-complex-geoms",
    "title": "Aesthetic mappings",
    "section": "More complex geoms",
    "text": "More complex geoms\nYou can use other geoms to make different types of plots. For example, geom_boxplot() will make boxplots. For boxplots, we frequently want categorical data on the x or y axis. For example, we might want a separate boxplot for each month. Try this out. Puth month on the x axis, temperature on the y axis, and use geom_boxplot().\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temps_houston, aes(x = month, y = temperature)) +\n  ___()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_houston, aes(x = month, y = temperature)) +\n  geom_boxplot()\n\n\n\n\nNow put the month on the y axis and the temperature on the x axis.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temps_houston, aes(x = ___, y = ___)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_houston, aes(x = temperature, y = month)) +\n  geom_boxplot()"
  },
  {
    "objectID": "worksheets/aesthetic-mappings.html#adding-color",
    "href": "worksheets/aesthetic-mappings.html#adding-color",
    "title": "Aesthetic mappings",
    "section": "Adding color",
    "text": "Adding color\nNext we will be working with the dataset temperatures, which is similar to temps_houston but contains data for three more locations.\n\n\n\n\n\n\n\n\nMake a line plot of temperature against day_of_year, using the color aesthetic to color the lines by location.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temperatures, aes(x = day_of_year, y = temperature, color = ___)) +\n  geom_line()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temperatures, aes(x = day_of_year, y = temperature, color = location)) +\n  geom_line()\n\n\n\n\nTry again, this time using location as the location along the y axis and temperature for the color. This plot looks better with geom_point() than geom_line(). (Try it out to see why. Also, try geom_point(size = 5) to create larger points.)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temperatures, aes(x = ___, y = ___, color = ___)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temperatures, aes(x = day_of_year, y = location, color = temperature)) +\n  geom_point()"
  },
  {
    "objectID": "worksheets/aesthetic-mappings.html#using-the-fill-aesthetic",
    "href": "worksheets/aesthetic-mappings.html#using-the-fill-aesthetic",
    "title": "Aesthetic mappings",
    "section": "Using the fill aesthetic",
    "text": "Using the fill aesthetic\nSome geoms use a fill aesthetic, which is similar to color but applies to shaded areas. (color applies to lines and points.) For example, we can use the fill aesthetic with geom_boxplot() to color the interior of the box. Try this yourself. Plot month on x, temperature on y, and color the interior of the box by location.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temperatures, aes(x = month, y = ___, fill = ___)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temperatures, aes(x = month, y = temperature, fill = location)) +\n  geom_boxplot()\n\n\n\n\nCan you color the lines of the boxplot by location and the interior by month? Try it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temperatures, aes(x = month, y = temperature, color = ___, fill = ___)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temperatures, aes(x = month, y = temperature, color = location, fill = month)) +\n  geom_boxplot()"
  },
  {
    "objectID": "worksheets/aesthetic-mappings.html#using-aesthetics-as-parameters",
    "href": "worksheets/aesthetic-mappings.html#using-aesthetics-as-parameters",
    "title": "Aesthetic mappings",
    "section": "Using aesthetics as parameters",
    "text": "Using aesthetics as parameters\nMany of the aesthetics (such as color, fill, and also size to change line size or point thickness) can be used as parameters inside a geom rather than inside an aes() statement. The difference is that when you use an aesthetic as a parameter, you specify a specific value, such as color = \"blue\", rather than a mapping, such as aes(color = location). Notice the difference: Inside the aes() function, we don’t actually specify the specific color values, ggplot does that for us. We only say that we want the data values of the location column to correspond to different colors. (We will learn later how to tell ggplot to use specific colors in this mapping.)\nTry this with the boxplot example from the previous section. Map location onto the fill aesthetic but set the color of the lines to \"navyblue\".\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temperatures, aes(x = month, y = temperature, fill = ___)) +\n  geom_boxplot(color = ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temperatures, aes(x = month, y = temperature, fill = location)) +\n  geom_boxplot(color = \"navyblue\")\n\n\n\n\nNow do the reverse. Map location onto the line colors but fill the box with the color \"navyblue\".\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temperatures, aes(x = month, y = temperature, color = ___)) +\n  geom_boxplot(fill = ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temperatures, aes(x = month, y = temperature, color = location)) +\n  geom_boxplot(fill = \"navyblue\")"
  },
  {
    "objectID": "slides/visualizing-proportions.html#the-archetypal-visualization-of-proportions-pie-chart",
    "href": "slides/visualizing-proportions.html#the-archetypal-visualization-of-proportions-pie-chart",
    "title": "Visualizing proportions",
    "section": "The archetypal visualization of proportions: pie chart",
    "text": "The archetypal visualization of proportions: pie chart\n\n\n\n\n\n\n\n \n\n\n\n\n\n\nParty composition of the 8th German Bundestag, 1976–1980"
  },
  {
    "objectID": "slides/visualizing-proportions.html#pie-chart-vs-stacked-bars-vs-side-by-side-bars",
    "href": "slides/visualizing-proportions.html#pie-chart-vs-stacked-bars-vs-side-by-side-bars",
    "title": "Visualizing proportions",
    "section": "Pie chart vs stacked bars vs side-by-side bars",
    "text": "Pie chart vs stacked bars vs side-by-side bars"
  },
  {
    "objectID": "slides/visualizing-proportions.html#pie-chart-vs-stacked-bars-vs-side-by-side-bars-1",
    "href": "slides/visualizing-proportions.html#pie-chart-vs-stacked-bars-vs-side-by-side-bars-1",
    "title": "Visualizing proportions",
    "section": "Pie chart vs stacked bars vs side-by-side bars",
    "text": "Pie chart vs stacked bars vs side-by-side bars"
  },
  {
    "objectID": "slides/visualizing-proportions.html#pie-chart-vs-stacked-bars-vs-side-by-side-bars-2",
    "href": "slides/visualizing-proportions.html#pie-chart-vs-stacked-bars-vs-side-by-side-bars-2",
    "title": "Visualizing proportions",
    "section": "Pie chart vs stacked bars vs side-by-side bars",
    "text": "Pie chart vs stacked bars vs side-by-side bars"
  },
  {
    "objectID": "slides/visualizing-proportions.html#example-where-side-by-side-bars-are-preferred",
    "href": "slides/visualizing-proportions.html#example-where-side-by-side-bars-are-preferred",
    "title": "Visualizing proportions",
    "section": "Example where side-by-side bars are preferred",
    "text": "Example where side-by-side bars are preferred\n\n\n\n\n\n\n \n\n\n\n\n\n\nInspired by: https://en.wikipedia.org/wiki/File:Piecharts.svg"
  },
  {
    "objectID": "slides/visualizing-proportions.html#example-where-side-by-side-bars-are-preferred-1",
    "href": "slides/visualizing-proportions.html#example-where-side-by-side-bars-are-preferred-1",
    "title": "Visualizing proportions",
    "section": "Example where side-by-side bars are preferred",
    "text": "Example where side-by-side bars are preferred\n\n\n\n\n\n\n \n\n\n\n\n\n\nInspired by: https://en.wikipedia.org/wiki/File:Piecharts.svg"
  },
  {
    "objectID": "slides/visualizing-proportions.html#example-where-side-by-side-bars-are-preferred-2",
    "href": "slides/visualizing-proportions.html#example-where-side-by-side-bars-are-preferred-2",
    "title": "Visualizing proportions",
    "section": "Example where side-by-side bars are preferred",
    "text": "Example where side-by-side bars are preferred\n\n\n\n\n\n\n \n\n\n\n\n\n\nInspired by: https://en.wikipedia.org/wiki/File:Piecharts.svg"
  },
  {
    "objectID": "slides/visualizing-proportions.html#example-where-side-by-side-bars-are-preferred-3",
    "href": "slides/visualizing-proportions.html#example-where-side-by-side-bars-are-preferred-3",
    "title": "Visualizing proportions",
    "section": "Example where side-by-side bars are preferred",
    "text": "Example where side-by-side bars are preferred\n\n\n\n\n\n\n \n\n\n\n\n\n\nInspired by: https://en.wikipedia.org/wiki/File:Piecharts.svg"
  },
  {
    "objectID": "slides/visualizing-proportions.html#example-where-stacked-bars-are-preferred",
    "href": "slides/visualizing-proportions.html#example-where-stacked-bars-are-preferred",
    "title": "Visualizing proportions",
    "section": "Example where stacked bars are preferred",
    "text": "Example where stacked bars are preferred\n\n\n\n\n\n\n \n\n\n\n\n\n\nChange in the gender composition of the Rwandan parliament from 1997 to 2016"
  },
  {
    "objectID": "slides/visualizing-proportions.html#pros-and-cons-of-different-approaches",
    "href": "slides/visualizing-proportions.html#pros-and-cons-of-different-approaches",
    "title": "Visualizing proportions",
    "section": "Pros and cons of different approaches",
    "text": "Pros and cons of different approaches\n\n\n\n\n\n\n\n\n\n\n \n    Pie chart    \nStacked bars\nSide-by-side bars\n\n\n\n\nAllows easy comparison of relative proportions\n✖\n✖\n✔"
  },
  {
    "objectID": "slides/visualizing-proportions.html#pros-and-cons-of-different-approaches-1",
    "href": "slides/visualizing-proportions.html#pros-and-cons-of-different-approaches-1",
    "title": "Visualizing proportions",
    "section": "Pros and cons of different approaches",
    "text": "Pros and cons of different approaches\n\n\n\n\n\n\n\n\n\n\n \n    Pie chart    \nStacked bars\nSide-by-side bars\n\n\n\n\nAllows easy comparison of relative proportions\n✖\n✖\n✔\n\n\nShows data as proportions of a whole\n✔\n✔\n✖"
  },
  {
    "objectID": "slides/visualizing-proportions.html#pros-and-cons-of-different-approaches-2",
    "href": "slides/visualizing-proportions.html#pros-and-cons-of-different-approaches-2",
    "title": "Visualizing proportions",
    "section": "Pros and cons of different approaches",
    "text": "Pros and cons of different approaches\n\n\n\n\n\n\n\n\n\n\n \n    Pie chart    \nStacked bars\nSide-by-side bars\n\n\n\n\nAllows easy comparison of relative proportions\n✖\n✖\n✔\n\n\nShows data as proportions of a whole\n✔\n✔\n✖\n\n\nEmphasizes simple fractions (1/2, 1/3, …)\n✔\n✖\n✖"
  },
  {
    "objectID": "slides/visualizing-proportions.html#pros-and-cons-of-different-approaches-3",
    "href": "slides/visualizing-proportions.html#pros-and-cons-of-different-approaches-3",
    "title": "Visualizing proportions",
    "section": "Pros and cons of different approaches",
    "text": "Pros and cons of different approaches\n\n\n\n\n\n\n\n\n\n\n \n    Pie chart    \nStacked bars\nSide-by-side bars\n\n\n\n\nAllows easy comparison of relative proportions\n✖\n✖\n✔\n\n\nShows data as proportions of a whole\n✔\n✔\n✖\n\n\nEmphasizes simple fractions (1/2, 1/3, …)\n✔\n✖\n✖\n\n\nVisually appealing for small datasets\n✔\n✖\n✔"
  },
  {
    "objectID": "slides/visualizing-proportions.html#pros-and-cons-of-different-approaches-4",
    "href": "slides/visualizing-proportions.html#pros-and-cons-of-different-approaches-4",
    "title": "Visualizing proportions",
    "section": "Pros and cons of different approaches",
    "text": "Pros and cons of different approaches\n\n\n\n\n\n\n\n\n\n\n \n    Pie chart    \nStacked bars\nSide-by-side bars\n\n\n\n\nAllows easy comparison of relative proportions\n✖\n✖\n✔\n\n\nShows data as proportions of a whole\n✔\n✔\n✖\n\n\nEmphasizes simple fractions (1/2, 1/3, …)\n✔\n✖\n✖\n\n\nVisually appealing for small datasets\n✔\n✖\n✔\n\n\nWorks well for a large number of subsets\n✖\n✖\n✔"
  },
  {
    "objectID": "slides/visualizing-proportions.html#pros-and-cons-of-different-approaches-5",
    "href": "slides/visualizing-proportions.html#pros-and-cons-of-different-approaches-5",
    "title": "Visualizing proportions",
    "section": "Pros and cons of different approaches",
    "text": "Pros and cons of different approaches\n\n\n\n\n\n\n\n\n\n\n \n    Pie chart    \nStacked bars\nSide-by-side bars\n\n\n\n\nAllows easy comparison of relative proportions\n✖\n✖\n✔\n\n\nShows data as proportions of a whole\n✔\n✔\n✖\n\n\nEmphasizes simple fractions (1/2, 1/3, …)\n✔\n✖\n✖\n\n\nVisually appealing for small datasets\n✔\n✖\n✔\n\n\nWorks well for a large number of subsets\n✖\n✖\n✔\n\n\nWorks well for time series and similar\n✖\n✔\n✖\n\n\n\n\n\nNo one visualization fits all scenarios!"
  },
  {
    "objectID": "slides/visualizing-proportions.html#mosaic-plots-subdivide-data-along-two-dimensions",
    "href": "slides/visualizing-proportions.html#mosaic-plots-subdivide-data-along-two-dimensions",
    "title": "Visualizing proportions",
    "section": "Mosaic plots subdivide data along two dimensions",
    "text": "Mosaic plots subdivide data along two dimensions\n\n\n\n\n\n\nDataset: Bridges in Pittsburgh by construction material and era of construction"
  },
  {
    "objectID": "slides/visualizing-proportions.html#closely-related-to-mosaic-plot-treemap",
    "href": "slides/visualizing-proportions.html#closely-related-to-mosaic-plot-treemap",
    "title": "Visualizing proportions",
    "section": "Closely related to mosaic plot: Treemap",
    "text": "Closely related to mosaic plot: Treemap\n\n\n\n\n\n\nDataset: Bridges in Pittsburgh by construction material and era of construction"
  },
  {
    "objectID": "slides/visualizing-proportions.html#treemaps-work-well-for-more-complex-cases",
    "href": "slides/visualizing-proportions.html#treemaps-work-well-for-more-complex-cases",
    "title": "Visualizing proportions",
    "section": "Treemaps work well for more complex cases",
    "text": "Treemaps work well for more complex cases\n\n\n\n\n\n\nDataset: Land surface area of US states"
  },
  {
    "objectID": "slides/visualizing-proportions.html#we-can-nest-pie-charts-with-clever-coloring",
    "href": "slides/visualizing-proportions.html#we-can-nest-pie-charts-with-clever-coloring",
    "title": "Visualizing proportions",
    "section": "We can nest pie charts with clever coloring",
    "text": "We can nest pie charts with clever coloring\n\n\n\n\n\n\nDataset: Bridges in Pittsburgh by construction material and era of construction"
  },
  {
    "objectID": "slides/visualizing-proportions.html#parallel-sets-can-show-many-subdivisions-at-once",
    "href": "slides/visualizing-proportions.html#parallel-sets-can-show-many-subdivisions-at-once",
    "title": "Visualizing proportions",
    "section": "Parallel sets can show many subdivisions at once",
    "text": "Parallel sets can show many subdivisions at once\n\n\n\n\n\n\nDataset: Bridges in Pittsburgh by construction material and era of construction"
  },
  {
    "objectID": "slides/visualizing-proportions.html#dont-show-nested-proportions-without-nesting",
    "href": "slides/visualizing-proportions.html#dont-show-nested-proportions-without-nesting",
    "title": "Visualizing proportions",
    "section": "Don’t show nested proportions without nesting!",
    "text": "Don’t show nested proportions without nesting!\n\n\n\nDataset: Bridges in Pittsburgh by construction material and era of construction"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-1",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-1",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2",
    "text": "Making pie charts with ggplot2\n\nWe have three options:\n\n\n\ngeom_bar()/geom_col() with poolar coordinates\nPros: simple\nCons: hard to customize\n\n\n\n\ngeom_arc_bar() with stat_pie()\nPros: relatively simple, some customization\nCons: requires ggforce & some more complex code\n\n\n\n\ngeom_arc_bar() with manual computation\nPros: maximum flexibility for customization\nCons: requires ggforce & much more complex code"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-polar-coords",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-polar-coords",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: polar coords",
    "text": "Making pie charts with ggplot2: polar coords\n\n\n# the data\nbundestag &lt;- tibble(\n  party = c(\"CDU/CSU\", \"SPD\", \"FDP\"),\n  seats = c(243, 214, 39)\n)\n\nbundestag\n\n# A tibble: 3 × 2\n  party   seats\n  &lt;chr&gt;   &lt;dbl&gt;\n1 CDU/CSU   243\n2 SPD       214\n3 FDP        39"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-polar-coords-1",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-polar-coords-1",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: polar coords",
    "text": "Making pie charts with ggplot2: polar coords\n\n\n\n# the data\nbundestag &lt;- tibble(\n  party = c(\"CDU/CSU\", \"SPD\", \"FDP\"),\n  seats = c(243, 214, 39)\n)\n\n# make bar chart\nggplot(bundestag) +\n  aes(seats, \"YY\", fill = party) + \n  geom_col()"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-polar-coords-2",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-polar-coords-2",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: polar coords",
    "text": "Making pie charts with ggplot2: polar coords\n\n\n\n# the data\nbundestag &lt;- tibble(\n  party = c(\"CDU/CSU\", \"SPD\", \"FDP\"),\n  seats = c(243, 214, 39)\n)\n\n# make bar chart in polar coords\nggplot(bundestag) +\n  aes(seats, \"YY\", fill = party) + \n  geom_col() +\n  coord_polar()"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-polar-coords-3",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-polar-coords-3",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: polar coords",
    "text": "Making pie charts with ggplot2: polar coords\n\n\n\n# the data\nbundestag &lt;- tibble(\n  party = c(\"CDU/CSU\", \"SPD\", \"FDP\"),\n  seats = c(243, 214, 39)\n)\n\n# make bar chart in polar coords\nggplot(bundestag) +\n  aes(seats, \"YY\", fill = party) + \n  geom_col() +\n  coord_polar() +\n  scale_x_continuous(\n    name = NULL, breaks = NULL\n  ) +\n  scale_y_discrete(\n    name = NULL, breaks = NULL\n  ) +\n  ggtitle(\"German Bundestag 1976-1980\")"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-stat-pie",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-stat-pie",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: ggforce stat pie",
    "text": "Making pie charts with ggplot2: ggforce stat pie\n\n\n\nlibrary(ggforce)\n\nggplot(bundestag) +\n  aes(\n    x0 = 0, y0 = 0, # position of pie center\n    r0 = 0, r = 1,  # inner and outer radius\n    amount = seats, # size of pie slices\n    fill = party\n  ) + \n  geom_arc_bar(stat = \"pie\")"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-stat-pie-1",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-stat-pie-1",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: ggforce stat pie",
    "text": "Making pie charts with ggplot2: ggforce stat pie\n\n\n\nlibrary(ggforce)\n\nggplot(bundestag) +\n  aes(\n    x0 = 0, y0 = 0, # position of pie center\n    r0 = 0, r = 1,  # inner and outer radius\n    amount = seats, # size of pie slices\n    fill = party\n  ) + \n  geom_arc_bar(stat = \"pie\") +\n  coord_fixed() # make pie perfectly circular"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-stat-pie-2",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-stat-pie-2",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: ggforce stat pie",
    "text": "Making pie charts with ggplot2: ggforce stat pie\n\n\n\nlibrary(ggforce)\n\nggplot(bundestag) +\n  aes(\n    x0 = 0, y0 = 0, # position of pie center\n    r0 = 0, r = 1,  # inner and outer radius\n    amount = seats, # size of pie slices\n    fill = party\n  ) + \n  geom_arc_bar(stat = \"pie\") +\n  coord_fixed(  # make pie perfectly circular\n    # adjust limits as needed\n    xlim = c(-1, 3), ylim = c(-1, 3)\n  )"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-stat-pie-3",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-stat-pie-3",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: ggforce stat pie",
    "text": "Making pie charts with ggplot2: ggforce stat pie\n\n\n\nlibrary(ggforce)\n\nggplot(bundestag) +\n  aes(\n    x0 = 1, y0 = 1, # position of pie center\n    r0 = 0, r = 1,  # inner and outer radius\n    amount = seats, # size of pie slices\n    fill = party\n  ) + \n  geom_arc_bar(stat = \"pie\") +\n  coord_fixed(  # make pie perfectly circular\n    # adjust limits as needed\n    xlim = c(-1, 3), ylim = c(-1, 3)\n  )"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-stat-pie-4",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-stat-pie-4",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: ggforce stat pie",
    "text": "Making pie charts with ggplot2: ggforce stat pie\n\n\n\nlibrary(ggforce)\n\nggplot(bundestag) +\n  aes(\n    x0 = 1, y0 = 1, # position of pie center\n    r0 = 1, r = 2,  # inner and outer radius\n    amount = seats, # size of pie slices\n    fill = party\n  ) + \n  geom_arc_bar(stat = \"pie\") +\n  coord_fixed(  # make pie perfectly circular\n    # adjust limits as needed\n    xlim = c(-1, 3), ylim = c(-1, 3)\n  )"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: ggforce manual",
    "text": "Making pie charts with ggplot2: ggforce manual\n\n\n# prepare pie data\npie_data &lt;- bundestag |&gt;\n  arrange(seats)    # sort so pie slices end up sorted\n\npie_data\n\n# A tibble: 3 × 2\n  party   seats\n  &lt;chr&gt;   &lt;dbl&gt;\n1 FDP        39\n2 SPD       214\n3 CDU/CSU   243"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-1",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-1",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: ggforce manual",
    "text": "Making pie charts with ggplot2: ggforce manual\n\n\n# prepare pie data\npie_data &lt;- bundestag |&gt;\n  arrange(seats) |&gt; # sort so pie slices end up sorted\n  mutate(\n    end_angle = 2*pi*cumsum(seats)/sum(seats)    # ending angle for each pie slice\n  )\n\npie_data\n\n# A tibble: 3 × 3\n  party   seats end_angle\n  &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt;\n1 FDP        39     0.494\n2 SPD       214     3.20 \n3 CDU/CSU   243     6.28"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-2",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-2",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: ggforce manual",
    "text": "Making pie charts with ggplot2: ggforce manual\n\n\n# prepare pie data\npie_data &lt;- bundestag |&gt;\n  arrange(seats) |&gt; # sort so pie slices end up sorted\n  mutate(\n    end_angle = 2*pi*cumsum(seats)/sum(seats),   # ending angle for each pie slice\n    start_angle = lag(end_angle, default = 0)    # starting angle for each pie slice\n  )\n\npie_data\n\n# A tibble: 3 × 4\n  party   seats end_angle start_angle\n  &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;\n1 FDP        39     0.494       0    \n2 SPD       214     3.20        0.494\n3 CDU/CSU   243     6.28        3.20"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-3",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-3",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: ggforce manual",
    "text": "Making pie charts with ggplot2: ggforce manual\n\n\n# prepare pie data\npie_data &lt;- bundestag |&gt;\n  arrange(seats) |&gt; # sort so pie slices end up sorted\n  mutate(\n    end_angle = 2*pi*cumsum(seats)/sum(seats),   # ending angle for each pie slice\n    start_angle = lag(end_angle, default = 0),   # starting angle for each pie slice\n    mid_angle = 0.5*(start_angle + end_angle),   # middle of each pie slice, for text labels\n  )\n\npie_data\n\n# A tibble: 3 × 5\n  party   seats end_angle start_angle mid_angle\n  &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;\n1 FDP        39     0.494       0         0.247\n2 SPD       214     3.20        0.494     1.85 \n3 CDU/CSU   243     6.28        3.20      4.74"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-4",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-4",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: ggforce manual",
    "text": "Making pie charts with ggplot2: ggforce manual\n\n\n# prepare pie data\npie_data &lt;- bundestag |&gt;\n  arrange(seats) |&gt; # sort so pie slices end up sorted\n  mutate(\n    end_angle = 2*pi*cumsum(seats)/sum(seats),   # ending angle for each pie slice\n    start_angle = lag(end_angle, default = 0),   # starting angle for each pie slice\n    mid_angle = 0.5*(start_angle + end_angle),   # middle of each pie slice, for text labels\n    # horizontal and vertical justifications for outer labels\n    hjust = if_else(mid_angle &gt; pi, 1, 0),\n    vjust = if_else(mid_angle &lt; pi/2 | mid_angle &gt; 3*pi/2, 0, 1)\n  )\n\npie_data\n\n# A tibble: 3 × 7\n  party   seats end_angle start_angle mid_angle hjust vjust\n  &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 FDP        39     0.494       0         0.247     0     0\n2 SPD       214     3.20        0.494     1.85      0     1\n3 CDU/CSU   243     6.28        3.20      4.74      1     0"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-5",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-5",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: ggforce manual",
    "text": "Making pie charts with ggplot2: ggforce manual\n\n\n\nggplot(pie_data) +\n  aes(\n    x0 = 0, y0 = 0, r0 = 0, r = 1,\n    start = start_angle, end = end_angle,\n    fill = party\n  ) +\n  geom_arc_bar() +\n  coord_fixed()"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-6",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-6",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: ggforce manual",
    "text": "Making pie charts with ggplot2: ggforce manual\n\n\n\nggplot(pie_data) +\n  aes(\n    x0 = 0, y0 = 0, r0 = 0, r = 1,\n    start = start_angle, end = end_angle,\n    fill = party\n  ) +\n  geom_arc_bar() +\n  geom_text( # place amounts inside the pie\n    aes(\n      x = 0.6 * sin(mid_angle),\n      y = 0.6 * cos(mid_angle),\n      label = seats\n    )\n  ) +\n  coord_fixed()"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-7",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-7",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: ggforce manual",
    "text": "Making pie charts with ggplot2: ggforce manual\n\n\n\nggplot(pie_data) +\n  aes(\n    x0 = 0, y0 = 0, r0 = 0, r = 1,\n    start = start_angle, end = end_angle,\n    fill = party\n  ) +\n  geom_arc_bar() +\n  geom_text( # place amounts inside the pie\n    aes(\n      x = 0.2 * sin(mid_angle),\n      y = 0.2 * cos(mid_angle),\n      label = seats\n    )\n  ) +\n  coord_fixed()"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-8",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-8",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: ggforce manual",
    "text": "Making pie charts with ggplot2: ggforce manual\n\n\n\nggplot(pie_data) +\n  aes(\n    x0 = 0, y0 = 0, r0 = 0, r = 1,\n    start = start_angle, end = end_angle,\n    fill = party\n  ) +\n  geom_arc_bar() +\n  geom_text( # place amounts inside the pie\n    aes(\n      x = 0.8 * sin(mid_angle),\n      y = 0.8 * cos(mid_angle),\n      label = seats\n    )\n  ) +\n  coord_fixed()"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-9",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-9",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: ggforce manual",
    "text": "Making pie charts with ggplot2: ggforce manual\n\n\n\nggplot(pie_data) +\n  aes(\n    x0 = 0, y0 = 0, r0 = 0, r = 1,\n    start = start_angle, end = end_angle,\n    fill = party\n  ) +\n  geom_arc_bar() +\n  geom_text( # place amounts inside the pie\n    aes(\n      x = 0.6 * sin(mid_angle),\n      y = 0.6 * cos(mid_angle),\n      label = seats\n    )\n  ) +\n  coord_fixed()"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-10",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-10",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: ggforce manual",
    "text": "Making pie charts with ggplot2: ggforce manual\n\n\n\nggplot(pie_data) +\n  aes(\n    x0 = 0, y0 = 0, r0 = 0, r = 1,\n    start = start_angle, end = end_angle,\n    fill = party\n  ) +\n  geom_arc_bar() +\n  geom_text( # place amounts inside the pie\n    aes(\n      x = 0.6 * sin(mid_angle),\n      y = 0.6 * cos(mid_angle),\n      label = seats\n    )\n  ) +\n  geom_text( # place party name outside the pie\n    aes(\n      x = 1.05 * sin(mid_angle),\n      y = 1.05 * cos(mid_angle),\n      label = party,\n      hjust = hjust, vjust = vjust\n    )\n  ) +\n  coord_fixed()"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-11",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-11",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: ggforce manual",
    "text": "Making pie charts with ggplot2: ggforce manual\n\n\n\nggplot(pie_data) +\n  aes(\n    x0 = 0, y0 = 0, r0 = 0, r = 1,\n    start = start_angle, end = end_angle,\n    fill = party\n  ) +\n  geom_arc_bar() +\n  geom_text( # place amounts inside the pie\n    aes(\n      x = 0.6 * sin(mid_angle),\n      y = 0.6 * cos(mid_angle),\n      label = seats\n    )\n  ) +\n  geom_text( # place party name outside the pie\n    aes(\n      x = 1.05 * sin(mid_angle),\n      y = 1.05 * cos(mid_angle),\n      label = party,\n      hjust = hjust, vjust = vjust\n    )\n  ) +\n  coord_fixed(\n    xlim = c(-1.8, 1.3)\n  )"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-12",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-12",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: ggforce manual",
    "text": "Making pie charts with ggplot2: ggforce manual\n\n\n\nggplot(pie_data) +\n  aes(\n    x0 = 0, y0 = 0, r0 = 0.4, r = 1,\n    start = start_angle, end = end_angle,\n    fill = party\n  ) +\n  geom_arc_bar() +\n  geom_text( # place amounts inside the pie\n    aes(\n      x = 0.7 * sin(mid_angle),\n      y = 0.7 * cos(mid_angle),\n      label = seats\n    )\n  ) +\n  geom_text( # place party name outside the pie\n    aes(\n      x = 1.05 * sin(mid_angle),\n      y = 1.05 * cos(mid_angle),\n      label = party,\n      hjust = hjust, vjust = vjust\n    )\n  ) +\n  coord_fixed(\n    xlim = c(-1.8, 1.3)\n  )"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-13",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-13",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: ggforce manual",
    "text": "Making pie charts with ggplot2: ggforce manual\n\n\n\nggplot(pie_data) +\n  aes(\n    x0 = 0, y0 = 0, r0 = 0.4, r = 1,\n    start = start_angle, end = end_angle,\n    fill = party\n  ) +\n  geom_arc_bar() +\n  geom_text( # place amounts inside the pie\n    aes(\n      x = 0.7 * sin(mid_angle),\n      y = 0.7 * cos(mid_angle),\n      label = seats\n    )\n  ) +\n  geom_text( # place party name outside the pie\n    aes(\n      x = 1.05 * sin(mid_angle),\n      y = 1.05 * cos(mid_angle),\n      label = party,\n      hjust = hjust, vjust = vjust\n    )\n  ) +\n  coord_fixed(\n    xlim = c(-1.8, 1.3), ylim = c(-1.0, 1.1)\n  ) +\n  theme_void()"
  },
  {
    "objectID": "slides/visualizing-proportions.html#further-reading",
    "href": "slides/visualizing-proportions.html#further-reading",
    "title": "Visualizing proportions",
    "section": "Further reading",
    "text": "Further reading\n\nFundamentals of Data Visualization: Chapter 10: Visualizing proportions\nFundamentals of Data Visualization: Chapter 11: Visualizing nested proportions\nggplot2 reference documentation: position_stack(), position_fill()\nggplot2 reference documentation: position_dodge()\nggforce reference documentation: geom_arc_bar()"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#passengers-on-the-titanic",
    "href": "slides/visualizing-distributions-1.html#passengers-on-the-titanic",
    "title": "Visualizing distributions 1",
    "section": "Passengers on the Titanic",
    "text": "Passengers on the Titanic\n\n\n\n\n\n\n\nage\nsex\nclass\nsurvived\n\n\n\n\n0.2\nfemale\n3rd\nsurvived\n\n\n0.3\nmale\n3rd\ndied\n\n\n0.8\nmale\n2nd\nsurvived\n\n\n0.8\nmale\n2nd\nsurvived\n\n\n0.8\nmale\n3rd\nsurvived\n\n\n0.9\nmale\n1st\nsurvived\n\n\n1.0\nfemale\n2nd\nsurvived\n\n\n1.0\nfemale\n3rd\nsurvived\n\n\n1.0\nmale\n2nd\nsurvived\n\n\n1.0\nmale\n2nd\nsurvived\n\n\n1.0\nmale\n3rd\nsurvived\n\n\n1.5\nfemale\n3rd\ndied\n\n\n1.5\nfemale\n3rd\ndied\n\n\n2.0\nfemale\n1st\ndied\n\n\n2.0\nfemale\n2nd\nsurvived\n\n\n\n\n\n\n\n\n\n\n\n\n\nage\nsex\nclass\nsurvived\n\n\n\n\n2\nfemale\n3rd\ndied\n\n\n2\nfemale\n3rd\ndied\n\n\n2\nmale\n2nd\nsurvived\n\n\n2\nmale\n2nd\nsurvived\n\n\n2\nmale\n2nd\nsurvived\n\n\n3\nfemale\n2nd\nsurvived\n\n\n3\nfemale\n3rd\nsurvived\n\n\n3\nmale\n2nd\nsurvived\n\n\n3\nmale\n2nd\nsurvived\n\n\n3\nmale\n3rd\nsurvived\n\n\n3\nmale\n3rd\nsurvived\n\n\n4\nfemale\n2nd\nsurvived\n\n\n4\nfemale\n2nd\nsurvived\n\n\n4\nfemale\n3rd\nsurvived\n\n\n4\nfemale\n3rd\nsurvived\n\n\n\n\n\n\n\n\n\n\n\n\n\nage\nsex\nclass\nsurvived\n\n\n\n\n4\nmale\n1st\nsurvived\n\n\n4\nmale\n3rd\ndied\n\n\n4\nmale\n3rd\nsurvived\n\n\n5\nfemale\n3rd\nsurvived\n\n\n5\nfemale\n3rd\nsurvived\n\n\n5\nmale\n3rd\ndied\n\n\n6\nfemale\n2nd\nsurvived\n\n\n6\nfemale\n3rd\ndied\n\n\n6\nmale\n1st\nsurvived\n\n\n6\nmale\n3rd\ndied\n\n\n6\nmale\n3rd\ndied\n\n\n7\nfemale\n2nd\nsurvived\n\n\n8\nfemale\n2nd\nsurvived\n\n\n8\nfemale\n2nd\nsurvived\n\n\n8\nmale\n2nd\nsurvived"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#histogram-define-bins-and-count-cases",
    "href": "slides/visualizing-distributions-1.html#histogram-define-bins-and-count-cases",
    "title": "Visualizing distributions 1",
    "section": "Histogram: Define bins and count cases",
    "text": "Histogram: Define bins and count cases\n\n\n\n\n\n\n\n\nage range\ncount\n\n\n\n\n0–4\n33\n\n\n5–9\n20\n\n\n10–14\n15\n\n\n15–19\n81\n\n\n20–24\n139\n\n\n25–29\n113\n\n\n30–34\n93\n\n\n35–39\n75\n\n\n\n\n\n\n\n\n\n\n\n\n\nage range\ncount\n\n\n\n\n40–44\n47\n\n\n45–49\n59\n\n\n50–54\n31\n\n\n55–59\n23\n\n\n60–64\n19\n\n\n65–69\n4\n\n\n70–74\n4\n\n\n75–79\n0"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#histograms-depend-on-the-chosen-bin-width",
    "href": "slides/visualizing-distributions-1.html#histograms-depend-on-the-chosen-bin-width",
    "title": "Visualizing distributions 1",
    "section": "Histograms depend on the chosen bin width",
    "text": "Histograms depend on the chosen bin width"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#alternative-to-histogram-kernel-density-estimate-kde",
    "href": "slides/visualizing-distributions-1.html#alternative-to-histogram-kernel-density-estimate-kde",
    "title": "Visualizing distributions 1",
    "section": "Alternative to histogram: Kernel density estimate (KDE)",
    "text": "Alternative to histogram: Kernel density estimate (KDE)\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\nHistograms show raw counts, KDEs show proportions.(KDE total area = 1)"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#kdes-also-depend-on-parameter-settings",
    "href": "slides/visualizing-distributions-1.html#kdes-also-depend-on-parameter-settings",
    "title": "Visualizing distributions 1",
    "section": "KDEs also depend on parameter settings",
    "text": "KDEs also depend on parameter settings"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#careful-kdes-can-show-non-sensical-data",
    "href": "slides/visualizing-distributions-1.html#careful-kdes-can-show-non-sensical-data",
    "title": "Visualizing distributions 1",
    "section": "Careful: KDEs can show non-sensical data",
    "text": "Careful: KDEs can show non-sensical data"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#careful-are-bars-stacked-or-overlapping",
    "href": "slides/visualizing-distributions-1.html#careful-are-bars-stacked-or-overlapping",
    "title": "Visualizing distributions 1",
    "section": "Careful: Are bars stacked or overlapping?",
    "text": "Careful: Are bars stacked or overlapping?\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\nStacked or overlapping histograms are rarely a good choice."
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#alternative-age-pyramid",
    "href": "slides/visualizing-distributions-1.html#alternative-age-pyramid",
    "title": "Visualizing distributions 1",
    "section": "Alternative: Age pyramid",
    "text": "Alternative: Age pyramid"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#alternative-densities-showing-proportions-of-total",
    "href": "slides/visualizing-distributions-1.html#alternative-densities-showing-proportions-of-total",
    "title": "Visualizing distributions 1",
    "section": "Alternative: Densities showing proportions of total",
    "text": "Alternative: Densities showing proportions of total"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#overlapping-density-plots-usually-look-fine",
    "href": "slides/visualizing-distributions-1.html#overlapping-density-plots-usually-look-fine",
    "title": "Visualizing distributions 1",
    "section": "Overlapping density plots usually look fine",
    "text": "Overlapping density plots usually look fine"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#getting-the-data",
    "href": "slides/visualizing-distributions-1.html#getting-the-data",
    "title": "Visualizing distributions 1",
    "section": "Getting the data",
    "text": "Getting the data\n\nAll examples will use the titanic dataset:\n\ntitanic &lt;- read_csv(\"https://wilkelab.org/SDS366/datasets/titanic.csv\") |&gt;\n  select(age, sex, class, survived)\n\ntitanic\n\n# A tibble: 756 × 4\n     age sex    class survived\n   &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   \n 1 29    female 1st   survived\n 2  2    female 1st   died    \n 3 30    male   1st   died    \n 4 25    female 1st   died    \n 5  0.92 male   1st   survived\n 6 47    male   1st   survived\n 7 63    female 1st   survived\n 8 39    male   1st   died    \n 9 58    female 1st   survived\n10 71    male   1st   died    \n# ℹ 746 more rows"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#making-histograms-with-ggplot-geom_histogram",
    "href": "slides/visualizing-distributions-1.html#making-histograms-with-ggplot-geom_histogram",
    "title": "Visualizing distributions 1",
    "section": "Making histograms with ggplot: geom_histogram()",
    "text": "Making histograms with ggplot: geom_histogram()\n\nggplot(titanic, aes(age)) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`."
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#setting-the-bin-width",
    "href": "slides/visualizing-distributions-1.html#setting-the-bin-width",
    "title": "Visualizing distributions 1",
    "section": "Setting the bin width",
    "text": "Setting the bin width\n\nggplot(titanic, aes(age)) +\n  geom_histogram(binwidth = 5)\n\n\n\n\n \n\n\n\n\n\nDo you like the bin placement?"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#always-set-the-bin-center-as-well",
    "href": "slides/visualizing-distributions-1.html#always-set-the-bin-center-as-well",
    "title": "Visualizing distributions 1",
    "section": "Always set the bin center as well",
    "text": "Always set the bin center as well\n\nggplot(titanic, aes(age)) +\n  geom_histogram(\n    binwidth = 5,  # width of the bins\n    center = 2.5   # center of the bin containing that value\n  )"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#always-set-the-bin-center-as-well-1",
    "href": "slides/visualizing-distributions-1.html#always-set-the-bin-center-as-well-1",
    "title": "Visualizing distributions 1",
    "section": "Always set the bin center as well",
    "text": "Always set the bin center as well\n\nggplot(titanic, aes(age)) +\n  geom_histogram(\n    binwidth = 5,  # width of the bins\n    center = 12.5   # center of the bin containing that value\n  )"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#making-density-plots-with-ggplot-geom_density",
    "href": "slides/visualizing-distributions-1.html#making-density-plots-with-ggplot-geom_density",
    "title": "Visualizing distributions 1",
    "section": "Making density plots with ggplot: geom_density()",
    "text": "Making density plots with ggplot: geom_density()\n\nggplot(titanic, aes(age)) +\n  geom_density(fill = \"skyblue\")"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#making-density-plots-with-ggplot-geom_density-1",
    "href": "slides/visualizing-distributions-1.html#making-density-plots-with-ggplot-geom_density-1",
    "title": "Visualizing distributions 1",
    "section": "Making density plots with ggplot: geom_density()",
    "text": "Making density plots with ggplot: geom_density()\n\nggplot(titanic, aes(age)) +\n  geom_density() # without fill"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#modifying-bandwidth-bw-and-kernel-parameters",
    "href": "slides/visualizing-distributions-1.html#modifying-bandwidth-bw-and-kernel-parameters",
    "title": "Visualizing distributions 1",
    "section": "Modifying bandwidth (bw) and kernel parameters",
    "text": "Modifying bandwidth (bw) and kernel parameters\n\nggplot(titanic, aes(age)) +\n  geom_density(\n    fill = \"skyblue\",\n    bw = 0.5,               # a small bandwidth\n    kernel = \"gaussian\"     # Gaussian kernel (the default)\n  )"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#modifying-bandwidth-bw-and-kernel-parameters-1",
    "href": "slides/visualizing-distributions-1.html#modifying-bandwidth-bw-and-kernel-parameters-1",
    "title": "Visualizing distributions 1",
    "section": "Modifying bandwidth (bw) and kernel parameters",
    "text": "Modifying bandwidth (bw) and kernel parameters\n\nggplot(titanic, aes(age)) +\n  geom_density(\n    fill = \"skyblue\",\n    bw = 2,                 # a moderate bandwidth\n    kernel = \"rectangular\"  # rectangular kernel\n  )"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#the-grammar-of-graphics-pipeline",
    "href": "slides/visualizing-distributions-1.html#the-grammar-of-graphics-pipeline",
    "title": "Visualizing distributions 1",
    "section": "The Grammar-of-Graphics pipeline",
    "text": "The Grammar-of-Graphics pipeline"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#small-multiples-facet_wrap",
    "href": "slides/visualizing-distributions-1.html#small-multiples-facet_wrap",
    "title": "Visualizing distributions 1",
    "section": "Small multiples: facet_wrap()",
    "text": "Small multiples: facet_wrap()\n\nggplot(titanic, aes(age)) +\n  geom_density(fill = \"skyblue\") +\n  # make a separate facet for each class\n  facet_wrap(~class)"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#small-multiples-facet_grid",
    "href": "slides/visualizing-distributions-1.html#small-multiples-facet_grid",
    "title": "Visualizing distributions 1",
    "section": "Small multiples: facet_grid()",
    "text": "Small multiples: facet_grid()\n\nggplot(titanic, aes(age)) +\n  geom_density(fill = \"skyblue\") +\n  # make a separate facet for each combination of class and survival\n  facet_grid(survived ~ class)"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#statistical-transformations-stats-can-be-set-explicitly",
    "href": "slides/visualizing-distributions-1.html#statistical-transformations-stats-can-be-set-explicitly",
    "title": "Visualizing distributions 1",
    "section": "Statistical transformations (stats) can be set explicitly",
    "text": "Statistical transformations (stats) can be set explicitly\n\nggplot(titanic, aes(age)) +\n  geom_density(\n    stat = \"density\",    # the default for geom_density()\n    fill = \"skyblue\"\n  )"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#statistical-transformations-stats-can-be-set-explicitly-1",
    "href": "slides/visualizing-distributions-1.html#statistical-transformations-stats-can-be-set-explicitly-1",
    "title": "Visualizing distributions 1",
    "section": "Statistical transformations (stats) can be set explicitly",
    "text": "Statistical transformations (stats) can be set explicitly\n\nggplot(titanic, aes(age)) +\n  geom_area(  # geom_area() does not normally use stat = \"density\"\n    stat = \"density\",\n    fill = \"skyblue\"\n  )"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#statistical-transformations-stats-can-be-set-explicitly-2",
    "href": "slides/visualizing-distributions-1.html#statistical-transformations-stats-can-be-set-explicitly-2",
    "title": "Visualizing distributions 1",
    "section": "Statistical transformations (stats) can be set explicitly",
    "text": "Statistical transformations (stats) can be set explicitly\n\nggplot(titanic, aes(age)) +\n  geom_line(  # neither does geom_line()\n    stat = \"density\"\n  )"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#statistical-transformations-stats-can-be-set-explicitly-3",
    "href": "slides/visualizing-distributions-1.html#statistical-transformations-stats-can-be-set-explicitly-3",
    "title": "Visualizing distributions 1",
    "section": "Statistical transformations (stats) can be set explicitly",
    "text": "Statistical transformations (stats) can be set explicitly\n\nggplot(titanic, aes(age)) +\n  # we can use multiple geoms on top of each other\n  geom_area(stat = \"density\", fill = \"skyblue\") +\n  geom_line(stat = \"density\")"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#parameters-are-handed-through-to-the-stat",
    "href": "slides/visualizing-distributions-1.html#parameters-are-handed-through-to-the-stat",
    "title": "Visualizing distributions 1",
    "section": "Parameters are handed through to the stat",
    "text": "Parameters are handed through to the stat\n\n\n\nggplot(titanic, aes(age)) +\n  geom_line(stat = \"density\", bw = 3)\n\n\n\n\n \n\n\n\n\n\n\nggplot(titanic, aes(age)) +\n  geom_line(stat = \"density\", bw = 0.3)\n\n\n\n\n \n\n\n\n\n\n\nHere, bw is a parameter of stat_density(), not of geom_line()."
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#we-can-explicitly-map-results-from-stat-computations",
    "href": "slides/visualizing-distributions-1.html#we-can-explicitly-map-results-from-stat-computations",
    "title": "Visualizing distributions 1",
    "section": "We can explicitly map results from stat computations",
    "text": "We can explicitly map results from stat computations\n\nggplot(titanic, aes(age)) +\n  geom_tile( # geom_tile() draws rectangular colored areas\n    aes(\n      y = 1, # draw all tiles at the same y location\n      fill = after_stat(density)  # use computed density for fill\n    ),\n    stat = \"density\",\n    n = 20    # number of points calculated by stat_density() \n  )"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#we-can-explicitly-map-results-from-stat-computations-1",
    "href": "slides/visualizing-distributions-1.html#we-can-explicitly-map-results-from-stat-computations-1",
    "title": "Visualizing distributions 1",
    "section": "We can explicitly map results from stat computations",
    "text": "We can explicitly map results from stat computations\n\nggplot(titanic, aes(age)) +\n  geom_tile( # geom_tile() draws rectangular colored areas\n    aes(\n      y = 1, # draw all tiles at the same y location\n      fill = after_stat(density)  # use computed density for fill\n    ),\n    stat = \"density\",\n    n = 200    # number of points calculated by stat_density() \n  )"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#further-reading",
    "href": "slides/visualizing-distributions-1.html#further-reading",
    "title": "Visualizing distributions 1",
    "section": "Further reading",
    "text": "Further reading\n\nFundamentals of Data Visualization: Chapter 7: Visualizing distributions\nData Visualization—A Practical Introduction: 4.6 Histograms and density plots\nggplot2 reference documentation: geom_histogram()\nggplot2 reference documentation: geom_density()"
  },
  {
    "objectID": "slides/telling-a-story.html#how-did-i-get-to-teach-data-visualization",
    "href": "slides/telling-a-story.html#how-did-i-get-to-teach-data-visualization",
    "title": "Telling a story",
    "section": "How did I get to teach data visualization?",
    "text": "How did I get to teach data visualization?"
  },
  {
    "objectID": "slides/telling-a-story.html#what-is-a-story",
    "href": "slides/telling-a-story.html#what-is-a-story",
    "title": "Telling a story",
    "section": "What is a story?",
    "text": "What is a story?\n\nA story is a collection of observations, facts, or events presented in a specific order such that they create an emotional reaction."
  },
  {
    "objectID": "slides/telling-a-story.html#every-story-needs-an-arc",
    "href": "slides/telling-a-story.html#every-story-needs-an-arc",
    "title": "Telling a story",
    "section": "Every story needs an arc",
    "text": "Every story needs an arc\n\nOpening\n\n\n\nChallenge\n\n\n\nAction\n\n\n\nResolution"
  },
  {
    "objectID": "slides/telling-a-story.html#every-story-needs-an-arc-1",
    "href": "slides/telling-a-story.html#every-story-needs-an-arc-1",
    "title": "Telling a story",
    "section": "Every story needs an arc",
    "text": "Every story needs an arc\n\nOpening\n\n\n\nChallenge\n\n\n\nAction\n\n\n\nResolution\n\n\nChallenge and resolution arethe two most important parts"
  },
  {
    "objectID": "slides/telling-a-story.html#mapping-my-story-onto-this-format",
    "href": "slides/telling-a-story.html#mapping-my-story-onto-this-format",
    "title": "Telling a story",
    "section": "Mapping my story onto this format",
    "text": "Mapping my story onto this format\n\nOpening: We need to make many data visualizations in my lab\n\n\nChallenge: I end up telling my students the same things over and over\n\n\nAction: I go and write a book about data visualization\n\n\nResolution: The book is written. But now I teach the material, so I still keep saying the same things over and over"
  },
  {
    "objectID": "slides/telling-a-story.html#other-story-structures",
    "href": "slides/telling-a-story.html#other-story-structures",
    "title": "Telling a story",
    "section": "Other story structures",
    "text": "Other story structures\n\nAction\n\n\n\nBackground\n\n\n\nDevelopment\n\n\n\nClimax\n\n\n\nEnding\n\n\n(Better for action moviesthan for scientific reports)"
  },
  {
    "objectID": "slides/telling-a-story.html#mapping-my-story-onto-this-format-1",
    "href": "slides/telling-a-story.html#mapping-my-story-onto-this-format-1",
    "title": "Telling a story",
    "section": "Mapping my story onto this format",
    "text": "Mapping my story onto this format\n\nAction: In May 2017, I embark on a major project: Write a book on data visualization\n\n\nBackground: I do this because we need to make many data visualizations in my lab, and I end up telling my students the same things over and over\n\n\nDevelopment: Writing the book takes me almost two years; along the way, I add many features to ggplot2 and become a member of the ggplot2 team\n\n\nClimax: The book is released in April 2019\n\n\nEnding: Now I’m a dataviz teacher"
  },
  {
    "objectID": "slides/telling-a-story.html#other-story-structures-1",
    "href": "slides/telling-a-story.html#other-story-structures-1",
    "title": "Telling a story",
    "section": "Other story structures",
    "text": "Other story structures\n\nLead\n\n\n\nDevelopment\n\n\n(Commonly used in newspaper articles)"
  },
  {
    "objectID": "slides/telling-a-story.html#mapping-my-story-onto-this-format-2",
    "href": "slides/telling-a-story.html#mapping-my-story-onto-this-format-2",
    "title": "Telling a story",
    "section": "Mapping my story onto this format",
    "text": "Mapping my story onto this format\n\nLead: Because I see the need for more education in data visualization, I have written an entire book about the topic\n\n\nDevelopment: I had previously written an R package to improve figure design, but it wasn’t sufficient: Good judgement cannot be automated\n\n\nSo I wrote a book; the book is entirely about concepts, not about coding, and it is meant as a resource for anybody doing data visualizations, regardless of their preferred visualization software"
  },
  {
    "objectID": "slides/telling-a-story.html#example-preprints-in-biology",
    "href": "slides/telling-a-story.html#example-preprints-in-biology",
    "title": "Telling a story",
    "section": "Example: Preprints in biology",
    "text": "Example: Preprints in biology\n\n\n\n\n\n \n\n\n\n\n\nOpening"
  },
  {
    "objectID": "slides/telling-a-story.html#example-preprints-in-biology-1",
    "href": "slides/telling-a-story.html#example-preprints-in-biology-1",
    "title": "Telling a story",
    "section": "Example: Preprints in biology",
    "text": "Example: Preprints in biology\n\n\n\n\n\n \n\n\n\n\nWhat happened in 2014 to curtail the growth?\n\nChallenge"
  },
  {
    "objectID": "slides/telling-a-story.html#example-preprints-in-biology-2",
    "href": "slides/telling-a-story.html#example-preprints-in-biology-2",
    "title": "Telling a story",
    "section": "Example: Preprints in biology",
    "text": "Example: Preprints in biology\n\n\n\n\n\n \n\n\n\n\nbioRxiv opened in 2014\n\nResolution"
  },
  {
    "objectID": "slides/telling-a-story.html#keep-in-mind",
    "href": "slides/telling-a-story.html#keep-in-mind",
    "title": "Telling a story",
    "section": "Keep in mind",
    "text": "Keep in mind\n\n\nEvery figure needs a clear purpose within the story arc\nA complete arc will usually require at least two figures"
  },
  {
    "objectID": "slides/telling-a-story.html#prepare-figures-that-make-a-clear-point",
    "href": "slides/telling-a-story.html#prepare-figures-that-make-a-clear-point",
    "title": "Telling a story",
    "section": "Prepare figures that make a clear point",
    "text": "Prepare figures that make a clear point"
  },
  {
    "objectID": "slides/telling-a-story.html#prepare-figures-that-make-a-clear-point-1",
    "href": "slides/telling-a-story.html#prepare-figures-that-make-a-clear-point-1",
    "title": "Telling a story",
    "section": "Prepare figures that make a clear point",
    "text": "Prepare figures that make a clear point\n\n\n\n\n\n \n\n\n\n\nAmerican and Delta have the shortest delays"
  },
  {
    "objectID": "slides/telling-a-story.html#make-your-figures-memorable",
    "href": "slides/telling-a-story.html#make-your-figures-memorable",
    "title": "Telling a story",
    "section": "Make your figures memorable",
    "text": "Make your figures memorable"
  },
  {
    "objectID": "slides/telling-a-story.html#make-your-figures-memorable-1",
    "href": "slides/telling-a-story.html#make-your-figures-memorable-1",
    "title": "Telling a story",
    "section": "Make your figures memorable",
    "text": "Make your figures memorable"
  },
  {
    "objectID": "slides/telling-a-story.html#further-reading",
    "href": "slides/telling-a-story.html#further-reading",
    "title": "Telling a story",
    "section": "Further reading",
    "text": "Further reading\n\nFundamentals of Data Visualization: Chapter 29: Telling a story and making a point\nJoshua Schimel (2011) Writing Science: How to Write Papers That Get Cited and Proposals That Get Funded"
  },
  {
    "objectID": "slides/figure-design.html#how-do-we-go",
    "href": "slides/figure-design.html#how-do-we-go",
    "title": "Figure design",
    "section": "",
    "text": "How do we go from this\n\n\n\n\n\n \n\n\n\n\n\n   to this?\n\n\n\n\n\n \n\n\n\n\n\n\nRequires coordinated modification of multiple elements:\n\n\n\ngeoms (via arguments to geoms)\nscales (via scale_*() functions)\nplot appearance (via themes)"
  },
  {
    "objectID": "slides/figure-design.html#the-starting-point-a-rough-draft",
    "href": "slides/figure-design.html#the-starting-point-a-rough-draft",
    "title": "Figure design",
    "section": "The starting point, a rough draft",
    "text": "The starting point, a rough draft\n\n\n\nggplot(lincoln_temps) +\n  aes(x = mean_temp, y = month_long) +\n  geom_density_ridges()\n\n\n\n\n\n \n\n\n\n\n\n\nYou can download the dataset using this code:\nlincoln_temps &lt;- readRDS(url(\"https://wilkelab.org/SDS366/datasets/lincoln_temps.rds\"))"
  },
  {
    "objectID": "slides/figure-design.html#set-scale-and-bandwidth-to-shape-ridgelines",
    "href": "slides/figure-design.html#set-scale-and-bandwidth-to-shape-ridgelines",
    "title": "Figure design",
    "section": "Set scale and bandwidth to shape ridgelines",
    "text": "Set scale and bandwidth to shape ridgelines\n\n\n\nggplot(lincoln_temps) +\n  aes(x = mean_temp, y = month_long) +\n  geom_density_ridges(\n    scale = 3, bandwidth = 3.4\n  )"
  },
  {
    "objectID": "slides/figure-design.html#set-rel_min_height-to-cut-ridgelines-near-zero",
    "href": "slides/figure-design.html#set-rel_min_height-to-cut-ridgelines-near-zero",
    "title": "Figure design",
    "section": "Set rel_min_height to cut ridgelines near zero",
    "text": "Set rel_min_height to cut ridgelines near zero\n\n\n\nggplot(lincoln_temps) +\n  aes(x = mean_temp, y = month_long) +\n  geom_density_ridges(\n    scale = 3, bandwidth = 3.4,\n    rel_min_height = 0.01\n  )"
  },
  {
    "objectID": "slides/figure-design.html#use-scale_-functions-to-specify-axis-labels",
    "href": "slides/figure-design.html#use-scale_-functions-to-specify-axis-labels",
    "title": "Figure design",
    "section": "Use scale_*() functions to specify axis labels",
    "text": "Use scale_*() functions to specify axis labels\n\n\n\nggplot(lincoln_temps) +\n  aes(x = mean_temp, y = month_long) +\n  geom_density_ridges(\n    scale = 3, bandwidth = 3.4,\n    rel_min_height = 0.01,\n  ) +\n  scale_x_continuous(\n    name = \"mean temperature (°F)\"\n  ) +\n  scale_y_discrete(\n    name = NULL  # NULL means no label\n  )"
  },
  {
    "objectID": "slides/figure-design.html#specify-scale-expansion",
    "href": "slides/figure-design.html#specify-scale-expansion",
    "title": "Figure design",
    "section": "Specify scale expansion",
    "text": "Specify scale expansion\n\n\n\nggplot(lincoln_temps) +\n  aes(x = mean_temp, y = month_long) +\n  geom_density_ridges(\n    scale = 3, bandwidth = 3.4,\n    rel_min_height = 0.01\n  ) +\n  scale_x_continuous(\n    name = \"mean temperature (°F)\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(\n    name = NULL,\n    expand = expansion(add = c(0.2, 2.6))\n  )"
  },
  {
    "objectID": "slides/figure-design.html#set-overall-plot-theme",
    "href": "slides/figure-design.html#set-overall-plot-theme",
    "title": "Figure design",
    "section": "Set overall plot theme",
    "text": "Set overall plot theme\n\n\n\nggplot(lincoln_temps) +\n  aes(x = mean_temp, y = month_long) +\n  geom_density_ridges(\n    scale = 3, bandwidth = 3.4,\n    rel_min_height = 0.01\n  ) +\n  scale_x_continuous(\n    name = \"mean temperature (°F)\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(\n    name = NULL,\n    expand = expansion(add = c(0.2, 2.6))\n  ) +\n  theme_minimal_grid()  # from cowplot"
  },
  {
    "objectID": "slides/figure-design.html#align-y-axis-labels-to-grid-lines",
    "href": "slides/figure-design.html#align-y-axis-labels-to-grid-lines",
    "title": "Figure design",
    "section": "Align y axis labels to grid lines",
    "text": "Align y axis labels to grid lines\n\n\n\nggplot(lincoln_temps) +\n  aes(x = mean_temp, y = month_long) +\n  geom_density_ridges(\n    scale = 3, bandwidth = 3.4,\n    rel_min_height = 0.01\n  ) +\n  scale_x_continuous(\n    name = \"mean temperature (°F)\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(\n    name = NULL,\n    expand = expansion(add = c(0.2, 2.6))\n  ) +\n  theme_minimal_grid() +\n  theme(\n    axis.text.y = element_text(vjust = 0)\n  )"
  },
  {
    "objectID": "slides/figure-design.html#change-fill-color-from-default-gray-to-blue",
    "href": "slides/figure-design.html#change-fill-color-from-default-gray-to-blue",
    "title": "Figure design",
    "section": "Change fill color from default gray to blue",
    "text": "Change fill color from default gray to blue\n\n\n\nggplot(lincoln_temps) +\n  aes(x = mean_temp, y = month_long) +\n  geom_density_ridges(\n    scale = 3, bandwidth = 3.4,\n    rel_min_height = 0.01,\n    fill = \"#7DCCFF\"\n  ) +\n  scale_x_continuous(\n    name = \"mean temperature (°F)\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(\n    name = NULL,\n    expand = expansion(add = c(0.2, 2.6))\n  ) +\n  theme_minimal_grid() +\n  theme(\n    axis.text.y = element_text(vjust = 0)\n  )"
  },
  {
    "objectID": "slides/figure-design.html#draw-lines-in-white-instead-of-black",
    "href": "slides/figure-design.html#draw-lines-in-white-instead-of-black",
    "title": "Figure design",
    "section": "Draw lines in white instead of black",
    "text": "Draw lines in white instead of black\n\n\n\nggplot(lincoln_temps) +\n  aes(x = mean_temp, y = month_long) +\n  geom_density_ridges(\n    scale = 3, bandwidth = 3.4,\n    rel_min_height = 0.01,\n    fill = \"#7DCCFF\",\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"mean temperature (°F)\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(\n    name = NULL,\n    expand = expansion(add = c(0.2, 2.6))\n  ) +\n  theme_minimal_grid() +\n  theme(\n    axis.text.y = element_text(vjust = 0)\n  )"
  },
  {
    "objectID": "slides/figure-design.html#using-ready-made-themes",
    "href": "slides/figure-design.html#using-ready-made-themes",
    "title": "Figure design",
    "section": "Using ready-made themes",
    "text": "Using ready-made themes\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point()\n  # default theme is theme_gray()"
  },
  {
    "objectID": "slides/figure-design.html#using-ready-made-themes-1",
    "href": "slides/figure-design.html#using-ready-made-themes-1",
    "title": "Figure design",
    "section": "Using ready-made themes",
    "text": "Using ready-made themes\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point() +\n  theme_gray()"
  },
  {
    "objectID": "slides/figure-design.html#using-ready-made-themes-2",
    "href": "slides/figure-design.html#using-ready-made-themes-2",
    "title": "Figure design",
    "section": "Using ready-made themes",
    "text": "Using ready-made themes\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point() +\n  theme_gray(14) # most themes take a font-size argument to scale text size"
  },
  {
    "objectID": "slides/figure-design.html#using-ready-made-themes-3",
    "href": "slides/figure-design.html#using-ready-made-themes-3",
    "title": "Figure design",
    "section": "Using ready-made themes",
    "text": "Using ready-made themes\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point() +\n  theme_bw(14)"
  },
  {
    "objectID": "slides/figure-design.html#using-ready-made-themes-4",
    "href": "slides/figure-design.html#using-ready-made-themes-4",
    "title": "Figure design",
    "section": "Using ready-made themes",
    "text": "Using ready-made themes\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point() +\n  theme_minimal(14)"
  },
  {
    "objectID": "slides/figure-design.html#using-ready-made-themes-5",
    "href": "slides/figure-design.html#using-ready-made-themes-5",
    "title": "Figure design",
    "section": "Using ready-made themes",
    "text": "Using ready-made themes\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point() +\n  theme_classic(14)"
  },
  {
    "objectID": "slides/figure-design.html#using-ready-made-themes-6",
    "href": "slides/figure-design.html#using-ready-made-themes-6",
    "title": "Figure design",
    "section": "Using ready-made themes",
    "text": "Using ready-made themes\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point() +\n  theme_half_open()  # from package cowplot"
  },
  {
    "objectID": "slides/figure-design.html#using-ready-made-themes-7",
    "href": "slides/figure-design.html#using-ready-made-themes-7",
    "title": "Figure design",
    "section": "Using ready-made themes",
    "text": "Using ready-made themes\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point() +\n  theme_minimal_grid()  # from package cowplot"
  },
  {
    "objectID": "slides/figure-design.html#using-ready-made-themes-8",
    "href": "slides/figure-design.html#using-ready-made-themes-8",
    "title": "Figure design",
    "section": "Using ready-made themes",
    "text": "Using ready-made themes\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point() +\n  theme_minimal_hgrid()  # from package cowplot"
  },
  {
    "objectID": "slides/figure-design.html#using-ready-made-themes-9",
    "href": "slides/figure-design.html#using-ready-made-themes-9",
    "title": "Figure design",
    "section": "Using ready-made themes",
    "text": "Using ready-made themes\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point() +\n  theme_minimal_vgrid()  # from package cowplot"
  },
  {
    "objectID": "slides/figure-design.html#using-ready-made-themes-10",
    "href": "slides/figure-design.html#using-ready-made-themes-10",
    "title": "Figure design",
    "section": "Using ready-made themes",
    "text": "Using ready-made themes\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point() +\n  theme_economist(14)       # from package ggthemes"
  },
  {
    "objectID": "slides/figure-design.html#using-ready-made-themes-11",
    "href": "slides/figure-design.html#using-ready-made-themes-11",
    "title": "Figure design",
    "section": "Using ready-made themes",
    "text": "Using ready-made themes\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point() +\n  theme_economist(14) + # from package ggthemes\n  scale_color_economist()"
  },
  {
    "objectID": "slides/figure-design.html#using-ready-made-themes-12",
    "href": "slides/figure-design.html#using-ready-made-themes-12",
    "title": "Figure design",
    "section": "Using ready-made themes",
    "text": "Using ready-made themes\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point() +\n  theme_fivethirtyeight(14) + # from package ggthemes\n  scale_color_fivethirtyeight()"
  },
  {
    "objectID": "slides/figure-design.html#customizing-theme-elements",
    "href": "slides/figure-design.html#customizing-theme-elements",
    "title": "Figure design",
    "section": "Customizing theme elements",
    "text": "Customizing theme elements\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid()"
  },
  {
    "objectID": "slides/figure-design.html#customizing-theme-elements-1",
    "href": "slides/figure-design.html#customizing-theme-elements-1",
    "title": "Figure design",
    "section": "Customizing theme elements",
    "text": "Customizing theme elements\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    # change overall font family\n    # (requires font to be available)\n    text = element_text(\n      family = \"Comic Sans MS\"\n    )\n  )"
  },
  {
    "objectID": "slides/figure-design.html#customizing-theme-elements-2",
    "href": "slides/figure-design.html#customizing-theme-elements-2",
    "title": "Figure design",
    "section": "Customizing theme elements",
    "text": "Customizing theme elements\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    # change color of axis titles\n    axis.title = element_text(\n      color = \"royalblue2\"\n    )\n  )"
  },
  {
    "objectID": "slides/figure-design.html#customizing-theme-elements-3",
    "href": "slides/figure-design.html#customizing-theme-elements-3",
    "title": "Figure design",
    "section": "Customizing theme elements",
    "text": "Customizing theme elements\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    # change color of only the x axis title\n    axis.title.x = element_text(\n      color = \"royalblue2\"\n    )\n  )"
  },
  {
    "objectID": "slides/figure-design.html#customizing-theme-elements-4",
    "href": "slides/figure-design.html#customizing-theme-elements-4",
    "title": "Figure design",
    "section": "Customizing theme elements",
    "text": "Customizing theme elements\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    # change all text colors?\n    # why does it not work?\n    text = element_text(color = \"royalblue2\")\n  )"
  },
  {
    "objectID": "slides/figure-design.html#customizing-theme-elements-5",
    "href": "slides/figure-design.html#customizing-theme-elements-5",
    "title": "Figure design",
    "section": "Customizing theme elements",
    "text": "Customizing theme elements\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    text = element_text(color = \"royalblue2\"),\n    axis.text = element_text(\n      color = \"royalblue2\"\n    )\n  )\n\n\n\n\n\n \n\n\n\n\n\n\nThe element axis.text has its own color set in the theme. Therefore it doesn’t inherit from text."
  },
  {
    "objectID": "slides/figure-design.html#horizontal-and-vertical-alignment",
    "href": "slides/figure-design.html#horizontal-and-vertical-alignment",
    "title": "Figure design",
    "section": "Horizontal and vertical alignment",
    "text": "Horizontal and vertical alignment\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    axis.title.x = element_text(\n      # horizontal justification\n      # (0 = left)\n      hjust = 0\n    )\n  )"
  },
  {
    "objectID": "slides/figure-design.html#horizontal-and-vertical-alignment-1",
    "href": "slides/figure-design.html#horizontal-and-vertical-alignment-1",
    "title": "Figure design",
    "section": "Horizontal and vertical alignment",
    "text": "Horizontal and vertical alignment\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    axis.title.x = element_text(\n      # horizontal justification\n      # (0.5 = center)\n      hjust = 0.5\n    )\n  )"
  },
  {
    "objectID": "slides/figure-design.html#horizontal-and-vertical-alignment-2",
    "href": "slides/figure-design.html#horizontal-and-vertical-alignment-2",
    "title": "Figure design",
    "section": "Horizontal and vertical alignment",
    "text": "Horizontal and vertical alignment\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    axis.title.x = element_text(\n      # horizontal justification\n      # (1 = right)\n      hjust = 1\n    )\n  )"
  },
  {
    "objectID": "slides/figure-design.html#horizontal-and-vertical-alignment-3",
    "href": "slides/figure-design.html#horizontal-and-vertical-alignment-3",
    "title": "Figure design",
    "section": "Horizontal and vertical alignment",
    "text": "Horizontal and vertical alignment\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    axis.text.y = element_text(\n      # vertical justification\n      # (0 = bottom)\n      vjust = 0\n    )\n  )"
  },
  {
    "objectID": "slides/figure-design.html#horizontal-and-vertical-alignment-4",
    "href": "slides/figure-design.html#horizontal-and-vertical-alignment-4",
    "title": "Figure design",
    "section": "Horizontal and vertical alignment",
    "text": "Horizontal and vertical alignment\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    axis.text.y = element_text(\n      # vertical justification\n      # (0.5 = center)\n      vjust = 0.5\n    )\n  )"
  },
  {
    "objectID": "slides/figure-design.html#horizontal-and-vertical-alignment-5",
    "href": "slides/figure-design.html#horizontal-and-vertical-alignment-5",
    "title": "Figure design",
    "section": "Horizontal and vertical alignment",
    "text": "Horizontal and vertical alignment\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    axis.text.y = element_text(\n      # vertical justification\n      # (1 = top)\n      vjust = 1\n    )\n  )"
  },
  {
    "objectID": "slides/figure-design.html#remove-elements-entirely-element_blank",
    "href": "slides/figure-design.html#remove-elements-entirely-element_blank",
    "title": "Figure design",
    "section": "Remove elements entirely: element_blank()",
    "text": "Remove elements entirely: element_blank()\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    # all text gone\n    text = element_blank()\n  )"
  },
  {
    "objectID": "slides/figure-design.html#remove-elements-entirely-element_blank-1",
    "href": "slides/figure-design.html#remove-elements-entirely-element_blank-1",
    "title": "Figure design",
    "section": "Remove elements entirely: element_blank()",
    "text": "Remove elements entirely: element_blank()\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    # no axis titles\n    axis.title = element_blank()\n  )"
  },
  {
    "objectID": "slides/figure-design.html#set-background-color-element_rect",
    "href": "slides/figure-design.html#set-background-color-element_rect",
    "title": "Figure design",
    "section": "Set background color: element_rect()",
    "text": "Set background color: element_rect()\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    plot.background = element_rect(\n      fill = \"aliceblue\"\n    )\n  )"
  },
  {
    "objectID": "slides/figure-design.html#set-background-color-element_rect-1",
    "href": "slides/figure-design.html#set-background-color-element_rect-1",
    "title": "Figure design",
    "section": "Set background color: element_rect()",
    "text": "Set background color: element_rect()\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    panel.background = element_rect(\n      fill = \"aliceblue\"\n    )\n  )"
  },
  {
    "objectID": "slides/figure-design.html#set-background-color-element_rect-2",
    "href": "slides/figure-design.html#set-background-color-element_rect-2",
    "title": "Figure design",
    "section": "Set background color: element_rect()",
    "text": "Set background color: element_rect()\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    legend.box.background = element_rect(\n      fill = \"aliceblue\",\n      color = \"steelblue4\" # line color\n    )\n  )"
  },
  {
    "objectID": "slides/figure-design.html#set-background-color-element_rect-3",
    "href": "slides/figure-design.html#set-background-color-element_rect-3",
    "title": "Figure design",
    "section": "Set background color: element_rect()",
    "text": "Set background color: element_rect()\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    legend.box.background = element_rect(\n      fill = \"aliceblue\",\n      color = \"steelblue4\" # line color\n    ),\n    legend.box.margin = margin(7, 7, 7, 7)\n  )"
  },
  {
    "objectID": "slides/figure-design.html#move-the-legend-legend.position",
    "href": "slides/figure-design.html#move-the-legend-legend.position",
    "title": "Figure design",
    "section": "Move the legend: legend.position",
    "text": "Move the legend: legend.position\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    legend.box.background = element_rect(\n      fill = \"aliceblue\",\n      color = \"steelblue4\" # line color\n    ),\n    legend.box.margin = margin(7, 7, 7, 7),\n    # legend on top of plot\n    legend.position = \"top\"\n  )"
  },
  {
    "objectID": "slides/figure-design.html#move-the-legend-legend.position-1",
    "href": "slides/figure-design.html#move-the-legend-legend.position-1",
    "title": "Figure design",
    "section": "Move the legend: legend.position",
    "text": "Move the legend: legend.position\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    legend.box.background = element_rect(\n      fill = \"aliceblue\",\n      color = \"steelblue4\" # line color\n    ),\n    legend.box.margin = margin(7, 7, 7, 7),\n    # legend inside plot\n    legend.position = \"inside\", \n    # relative position inside plot panel\n    legend.position.inside = c(0.98, 0.02),\n    # justification relative to position\n    legend.justification = c(1, 0)\n  )"
  },
  {
    "objectID": "slides/figure-design.html#further-reading",
    "href": "slides/figure-design.html#further-reading",
    "title": "Figure design",
    "section": "Further reading",
    "text": "Further reading\n\nFundamentals of Data Visualization: Chapter 23: Balance the data and the context\nData Visualization—A Practical Introduction: Chapter 8.3: Change the appearance of plots with themes\nggplot2 reference documentation: Complete themes\nggplot2 reference documentation: Modify components of a theme"
  },
  {
    "objectID": "slides/data-wrangling-1.html#elementary-data-manipulations",
    "href": "slides/data-wrangling-1.html#elementary-data-manipulations",
    "title": "Data wrangling 1",
    "section": "Elementary data manipulations",
    "text": "Elementary data manipulations\n\n\nPick rows: filter()\nPick columns: select()\nSort rows: arrange()\nCount things: count()\nMake new columns: mutate()"
  },
  {
    "objectID": "slides/data-wrangling-1.html#the-pipe-feeds-data-into-functions",
    "href": "slides/data-wrangling-1.html#the-pipe-feeds-data-into-functions",
    "title": "Data wrangling 1",
    "section": "The pipe |> feeds data into functions",
    "text": "The pipe |&gt; feeds data into functions\n\n\nlibrary(palmerpenguins) # loads the `penguins` dataset\n\nhead(penguins)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "slides/data-wrangling-1.html#the-pipe-feeds-data-into-functions-1",
    "href": "slides/data-wrangling-1.html#the-pipe-feeds-data-into-functions-1",
    "title": "Data wrangling 1",
    "section": "The pipe |> feeds data into functions",
    "text": "The pipe |&gt; feeds data into functions\n\n\nlibrary(palmerpenguins) # loads the `penguins` dataset\n\n# head(penguins)\npenguins |&gt;\n  head()\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "slides/data-wrangling-1.html#the-pipe-feeds-data-into-functions-2",
    "href": "slides/data-wrangling-1.html#the-pipe-feeds-data-into-functions-2",
    "title": "Data wrangling 1",
    "section": "The pipe |> feeds data into functions",
    "text": "The pipe |&gt; feeds data into functions\n\n\nggplot(penguins, aes(bill_length_mm, bill_depth_mm, color = species)) + \n  geom_point()"
  },
  {
    "objectID": "slides/data-wrangling-1.html#the-pipe-feeds-data-into-functions-3",
    "href": "slides/data-wrangling-1.html#the-pipe-feeds-data-into-functions-3",
    "title": "Data wrangling 1",
    "section": "The pipe |> feeds data into functions",
    "text": "The pipe |&gt; feeds data into functions\n\n\npenguins |&gt;\n  ggplot(aes(bill_length_mm, bill_depth_mm, color = species)) +\n  geom_point()"
  },
  {
    "objectID": "slides/data-wrangling-1.html#old-school-magrittr-pipe",
    "href": "slides/data-wrangling-1.html#old-school-magrittr-pipe",
    "title": "Data wrangling 1",
    "section": "Old-school “magrittr” pipe: %>%",
    "text": "Old-school “magrittr” pipe: %&gt;%\n\n\npenguins %&gt;%\n  ggplot(aes(bill_length_mm, bill_depth_mm, color = species)) +\n  geom_point()"
  },
  {
    "objectID": "slides/data-wrangling-1.html#which-to-use-native-pipe-or-old-school-pipe",
    "href": "slides/data-wrangling-1.html#which-to-use-native-pipe-or-old-school-pipe",
    "title": "Data wrangling 1",
    "section": "Which to use? Native pipe or old-school pipe?",
    "text": "Which to use? Native pipe or old-school pipe?\n\n\nThe native pipe |&gt; is the future. I’ll be using it throughout.\nThe magrittr %&gt;% works fine. You can use it if you llike to."
  },
  {
    "objectID": "slides/data-wrangling-1.html#pick-rows-from-a-table-filter",
    "href": "slides/data-wrangling-1.html#pick-rows-from-a-table-filter",
    "title": "Data wrangling 1",
    "section": "Pick rows from a table: filter()",
    "text": "Pick rows from a table: filter()"
  },
  {
    "objectID": "slides/data-wrangling-1.html#filter-out-penguins-of-species-gentoo",
    "href": "slides/data-wrangling-1.html#filter-out-penguins-of-species-gentoo",
    "title": "Data wrangling 1",
    "section": "Filter out penguins of species Gentoo",
    "text": "Filter out penguins of species Gentoo\n\n\npenguins |&gt;\n  filter(species == \"Gentoo\")\n\n# A tibble: 124 × 8\n   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Gentoo  Biscoe           46.1          13.2               211        4500\n 2 Gentoo  Biscoe           50            16.3               230        5700\n 3 Gentoo  Biscoe           48.7          14.1               210        4450\n 4 Gentoo  Biscoe           50            15.2               218        5700\n 5 Gentoo  Biscoe           47.6          14.5               215        5400\n 6 Gentoo  Biscoe           46.5          13.5               210        4550\n 7 Gentoo  Biscoe           45.4          14.6               211        4800\n 8 Gentoo  Biscoe           46.7          15.3               219        5200\n 9 Gentoo  Biscoe           43.3          13.4               209        4400\n10 Gentoo  Biscoe           46.8          15.4               215        5150\n# ℹ 114 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "slides/data-wrangling-1.html#filter-out-penguins-with-bill-length-50-mm",
    "href": "slides/data-wrangling-1.html#filter-out-penguins-with-bill-length-50-mm",
    "title": "Data wrangling 1",
    "section": "Filter out penguins with bill length > 50 mm",
    "text": "Filter out penguins with bill length &gt; 50 mm\n\n\npenguins |&gt;\n  filter(bill_length_mm &gt; 50)\n\n# A tibble: 52 × 8\n   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Gentoo  Biscoe           50.2          14.3               218        5700\n 2 Gentoo  Biscoe           59.6          17                 230        6050\n 3 Gentoo  Biscoe           50.5          15.9               222        5550\n 4 Gentoo  Biscoe           50.5          15.9               225        5400\n 5 Gentoo  Biscoe           50.1          15                 225        5000\n 6 Gentoo  Biscoe           50.4          15.3               224        5550\n 7 Gentoo  Biscoe           54.3          15.7               231        5650\n 8 Gentoo  Biscoe           50.7          15                 223        5550\n 9 Gentoo  Biscoe           51.1          16.3               220        6000\n10 Gentoo  Biscoe           52.5          15.6               221        5450\n# ℹ 42 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "slides/data-wrangling-1.html#pick-columns-from-a-table-select",
    "href": "slides/data-wrangling-1.html#pick-columns-from-a-table-select",
    "title": "Data wrangling 1",
    "section": "Pick columns from a table: select()",
    "text": "Pick columns from a table: select()"
  },
  {
    "objectID": "slides/data-wrangling-1.html#pick-columns-species-island-and-sex",
    "href": "slides/data-wrangling-1.html#pick-columns-species-island-and-sex",
    "title": "Data wrangling 1",
    "section": "Pick columns species, island, and sex",
    "text": "Pick columns species, island, and sex\n\n\npenguins |&gt;\n  select(species, island, sex)\n\n# A tibble: 344 × 3\n   species island    sex   \n   &lt;fct&gt;   &lt;fct&gt;     &lt;fct&gt; \n 1 Adelie  Torgersen male  \n 2 Adelie  Torgersen female\n 3 Adelie  Torgersen female\n 4 Adelie  Torgersen &lt;NA&gt;  \n 5 Adelie  Torgersen female\n 6 Adelie  Torgersen male  \n 7 Adelie  Torgersen female\n 8 Adelie  Torgersen male  \n 9 Adelie  Torgersen &lt;NA&gt;  \n10 Adelie  Torgersen &lt;NA&gt;  \n# ℹ 334 more rows"
  },
  {
    "objectID": "slides/data-wrangling-1.html#sort-the-rows-in-a-table-arrange",
    "href": "slides/data-wrangling-1.html#sort-the-rows-in-a-table-arrange",
    "title": "Data wrangling 1",
    "section": "Sort the rows in a table: arrange()",
    "text": "Sort the rows in a table: arrange()"
  },
  {
    "objectID": "slides/data-wrangling-1.html#sort-penguins-by-bill-length-ascending",
    "href": "slides/data-wrangling-1.html#sort-penguins-by-bill-length-ascending",
    "title": "Data wrangling 1",
    "section": "Sort penguins by bill length, ascending",
    "text": "Sort penguins by bill length, ascending\n\n\npenguins |&gt;\n  arrange(bill_length_mm)\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Dream               32.1          15.5               188        3050\n 2 Adelie  Dream               33.1          16.1               178        2900\n 3 Adelie  Torgersen           33.5          19                 190        3600\n 4 Adelie  Dream               34            17.1               185        3400\n 5 Adelie  Torgersen           34.1          18.1               193        3475\n 6 Adelie  Torgersen           34.4          18.4               184        3325\n 7 Adelie  Biscoe              34.5          18.1               187        2900\n 8 Adelie  Torgersen           34.6          21.1               198        4400\n 9 Adelie  Torgersen           34.6          17.2               189        3200\n10 Adelie  Biscoe              35            17.9               190        3450\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "slides/data-wrangling-1.html#sort-penguins-by-bill-length-descending",
    "href": "slides/data-wrangling-1.html#sort-penguins-by-bill-length-descending",
    "title": "Data wrangling 1",
    "section": "Sort penguins by bill length, descending",
    "text": "Sort penguins by bill length, descending\n\n\npenguins |&gt;\n  arrange(desc(bill_length_mm))\n\n# A tibble: 344 × 8\n   species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;     &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Gentoo    Biscoe           59.6          17                 230        6050\n 2 Chinstrap Dream            58            17.8               181        3700\n 3 Gentoo    Biscoe           55.9          17                 228        5600\n 4 Chinstrap Dream            55.8          19.8               207        4000\n 5 Gentoo    Biscoe           55.1          16                 230        5850\n 6 Gentoo    Biscoe           54.3          15.7               231        5650\n 7 Chinstrap Dream            54.2          20.8               201        4300\n 8 Chinstrap Dream            53.5          19.9               205        4500\n 9 Gentoo    Biscoe           53.4          15.8               219        5500\n10 Chinstrap Dream            52.8          20                 205        4550\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "slides/data-wrangling-1.html#count-things",
    "href": "slides/data-wrangling-1.html#count-things",
    "title": "Data wrangling 1",
    "section": "Count things",
    "text": "Count things\n\n\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "slides/data-wrangling-1.html#count-things-1",
    "href": "slides/data-wrangling-1.html#count-things-1",
    "title": "Data wrangling 1",
    "section": "Count things",
    "text": "Count things\n\n\npenguins |&gt;\n  count(species)\n\n# A tibble: 3 × 2\n  species       n\n  &lt;fct&gt;     &lt;int&gt;\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124"
  },
  {
    "objectID": "slides/data-wrangling-1.html#count-things-2",
    "href": "slides/data-wrangling-1.html#count-things-2",
    "title": "Data wrangling 1",
    "section": "Count things",
    "text": "Count things\n\n\npenguins |&gt;\n  count(species, island)\n\n# A tibble: 5 × 3\n  species   island        n\n  &lt;fct&gt;     &lt;fct&gt;     &lt;int&gt;\n1 Adelie    Biscoe       44\n2 Adelie    Dream        56\n3 Adelie    Torgersen    52\n4 Chinstrap Dream        68\n5 Gentoo    Biscoe      124"
  },
  {
    "objectID": "slides/data-wrangling-1.html#use-the-pipe-to-build-analysis-pipelines",
    "href": "slides/data-wrangling-1.html#use-the-pipe-to-build-analysis-pipelines",
    "title": "Data wrangling 1",
    "section": "Use the pipe to build analysis pipelines",
    "text": "Use the pipe to build analysis pipelines\n\n\npenguins |&gt;\n  filter(species == \"Adelie\")\n\n# A tibble: 152 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 142 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "slides/data-wrangling-1.html#use-the-pipe-to-build-analysis-pipelines-1",
    "href": "slides/data-wrangling-1.html#use-the-pipe-to-build-analysis-pipelines-1",
    "title": "Data wrangling 1",
    "section": "Use the pipe to build analysis pipelines",
    "text": "Use the pipe to build analysis pipelines\n\n\npenguins |&gt;\n  filter(species == \"Adelie\") |&gt;\n  select(island, sex)\n\n# A tibble: 152 × 2\n   island    sex   \n   &lt;fct&gt;     &lt;fct&gt; \n 1 Torgersen male  \n 2 Torgersen female\n 3 Torgersen female\n 4 Torgersen &lt;NA&gt;  \n 5 Torgersen female\n 6 Torgersen male  \n 7 Torgersen female\n 8 Torgersen male  \n 9 Torgersen &lt;NA&gt;  \n10 Torgersen &lt;NA&gt;  \n# ℹ 142 more rows"
  },
  {
    "objectID": "slides/data-wrangling-1.html#use-the-pipe-to-build-analysis-pipelines-2",
    "href": "slides/data-wrangling-1.html#use-the-pipe-to-build-analysis-pipelines-2",
    "title": "Data wrangling 1",
    "section": "Use the pipe to build analysis pipelines",
    "text": "Use the pipe to build analysis pipelines\n\n\npenguins |&gt;\n  filter(species == \"Adelie\") |&gt;\n  select(island, sex) |&gt;\n  count(island, sex)\n\n# A tibble: 8 × 3\n  island    sex        n\n  &lt;fct&gt;     &lt;fct&gt;  &lt;int&gt;\n1 Biscoe    female    22\n2 Biscoe    male      22\n3 Dream     female    27\n4 Dream     male      28\n5 Dream     &lt;NA&gt;       1\n6 Torgersen female    24\n7 Torgersen male      23\n8 Torgersen &lt;NA&gt;       5"
  },
  {
    "objectID": "slides/data-wrangling-1.html#make-a-new-table-column-mutate",
    "href": "slides/data-wrangling-1.html#make-a-new-table-column-mutate",
    "title": "Data wrangling 1",
    "section": "Make a new table column: mutate()",
    "text": "Make a new table column: mutate()"
  },
  {
    "objectID": "slides/data-wrangling-1.html#example-flipper-length-in-cm",
    "href": "slides/data-wrangling-1.html#example-flipper-length-in-cm",
    "title": "Data wrangling 1",
    "section": "Example: flipper length in cm",
    "text": "Example: flipper length in cm\n\n\npenguins |&gt;\n  select(species, island, flipper_length_mm)\n\n# A tibble: 344 × 3\n   species island    flipper_length_mm\n   &lt;fct&gt;   &lt;fct&gt;                 &lt;int&gt;\n 1 Adelie  Torgersen               181\n 2 Adelie  Torgersen               186\n 3 Adelie  Torgersen               195\n 4 Adelie  Torgersen                NA\n 5 Adelie  Torgersen               193\n 6 Adelie  Torgersen               190\n 7 Adelie  Torgersen               181\n 8 Adelie  Torgersen               195\n 9 Adelie  Torgersen               193\n10 Adelie  Torgersen               190\n# ℹ 334 more rows"
  },
  {
    "objectID": "slides/data-wrangling-1.html#example-flipper-length-in-cm-1",
    "href": "slides/data-wrangling-1.html#example-flipper-length-in-cm-1",
    "title": "Data wrangling 1",
    "section": "Example: flipper length in cm",
    "text": "Example: flipper length in cm\n\n\npenguins |&gt;\n  select(species, island, flipper_length_mm) |&gt;\n  mutate(flipper_length_cm = flipper_length_mm / 10)\n\n# A tibble: 344 × 4\n   species island    flipper_length_mm flipper_length_cm\n   &lt;fct&gt;   &lt;fct&gt;                 &lt;int&gt;             &lt;dbl&gt;\n 1 Adelie  Torgersen               181              18.1\n 2 Adelie  Torgersen               186              18.6\n 3 Adelie  Torgersen               195              19.5\n 4 Adelie  Torgersen                NA              NA  \n 5 Adelie  Torgersen               193              19.3\n 6 Adelie  Torgersen               190              19  \n 7 Adelie  Torgersen               181              18.1\n 8 Adelie  Torgersen               195              19.5\n 9 Adelie  Torgersen               193              19.3\n10 Adelie  Torgersen               190              19  \n# ℹ 334 more rows"
  },
  {
    "objectID": "slides/data-wrangling-1.html#make-multiple-columns-at-once",
    "href": "slides/data-wrangling-1.html#make-multiple-columns-at-once",
    "title": "Data wrangling 1",
    "section": "Make multiple columns at once",
    "text": "Make multiple columns at once\n\n\npenguins |&gt;\n  select(species, island, flipper_length_mm) |&gt;\n  mutate(\n    flipper_length_cm = flipper_length_mm / 10,  # &lt;- notice the comma\n    flipper_length_in = flipper_length_mm / 25.4\n  )\n\n# A tibble: 344 × 5\n   species island    flipper_length_mm flipper_length_cm flipper_length_in\n   &lt;fct&gt;   &lt;fct&gt;                 &lt;int&gt;             &lt;dbl&gt;             &lt;dbl&gt;\n 1 Adelie  Torgersen               181              18.1              7.13\n 2 Adelie  Torgersen               186              18.6              7.32\n 3 Adelie  Torgersen               195              19.5              7.68\n 4 Adelie  Torgersen                NA              NA               NA   \n 5 Adelie  Torgersen               193              19.3              7.60\n 6 Adelie  Torgersen               190              19                7.48\n 7 Adelie  Torgersen               181              18.1              7.13\n 8 Adelie  Torgersen               195              19.5              7.68\n 9 Adelie  Torgersen               193              19.3              7.60\n10 Adelie  Torgersen               190              19                7.48\n# ℹ 334 more rows"
  },
  {
    "objectID": "slides/data-wrangling-1.html#further-reading",
    "href": "slides/data-wrangling-1.html#further-reading",
    "title": "Data wrangling 1",
    "section": "Further reading",
    "text": "Further reading\n\nR for Data Science: Chapter 5: Data transformation\nR for Data Science: Chapter 18: Pipes\ndplyr documentation: Introduction to dplyr\ndplyr reference documentation: One table verbs"
  },
  {
    "objectID": "slides/color-spaces.html#the-rgb-color-space",
    "href": "slides/color-spaces.html#the-rgb-color-space",
    "title": "Color spaces and color-vision deficiency",
    "section": "The RGB color space",
    "text": "The RGB color space\n\n\n\nred R (0-255):  amount of red light\ngreen G (0-255):  amount of green light\nblue B (0-255):  amount of blue light\n\n\n\n\n\nR\n\n\nG\n\n\nB\n\n\nhex code\n\n\n     color     \n\n\n\n\n\n\n0\n\n\n0\n\n\n0\n\n\n#000000\n\n\n\n\n\n\n255\n\n\n255\n\n\n255\n\n\n#FFFFFF\n\n\n\n\n\n\n255\n\n\n0\n\n\n0\n\n\n#FF0000\n\n\n\n\n\n\n0\n\n\n255\n\n\n255\n\n\n#00FFFF\n\n\n\n\n\n\n128\n\n\n128\n\n\n128\n\n\n#808080\n\n\n\n\n\n\n0\n\n\n158\n\n\n115\n\n\n#009E73"
  },
  {
    "objectID": "slides/color-spaces.html#the-rgb-color-space-1",
    "href": "slides/color-spaces.html#the-rgb-color-space-1",
    "title": "Color spaces and color-vision deficiency",
    "section": "The RGB color space",
    "text": "The RGB color space\n\n\n\n\n\n\n \n\n\n\n\n\n\nMost people cannot reason well about the RGB color space"
  },
  {
    "objectID": "slides/color-spaces.html#the-hsv-color-space",
    "href": "slides/color-spaces.html#the-hsv-color-space",
    "title": "Color spaces and color-vision deficiency",
    "section": "The HSV color space",
    "text": "The HSV color space\n\n\nhue H (0-360):  hue of the color\nsaturation S (0-1):  colorfulness relative to the brightness  of the color\nvalue V (0-1):  subjective perception of amount  of light emitted"
  },
  {
    "objectID": "slides/color-spaces.html#the-hsv-color-space-1",
    "href": "slides/color-spaces.html#the-hsv-color-space-1",
    "title": "Color spaces and color-vision deficiency",
    "section": "The HSV color space",
    "text": "The HSV color space\n\n\n\n\n\n\n \n\n\n\n\n\n\nProblem: Color changes in non-intuitive ways with saturation and value"
  },
  {
    "objectID": "slides/color-spaces.html#the-hls-color-space",
    "href": "slides/color-spaces.html#the-hls-color-space",
    "title": "Color spaces and color-vision deficiency",
    "section": "The HLS color space",
    "text": "The HLS color space\n\n\nhue H (0-360):  hue of the color\nlightness L (0-1):  brightness relative to the brightness  of a similarly illuminated white\nsaturation S (0-1):  colorfulness relative to the brightness  of the color"
  },
  {
    "objectID": "slides/color-spaces.html#the-hls-color-space-1",
    "href": "slides/color-spaces.html#the-hls-color-space-1",
    "title": "Color spaces and color-vision deficiency",
    "section": "The HLS color space",
    "text": "The HLS color space\n\n\n\n\n\n\n \n\n\n\n\n\n\nProblem: For high saturation, perceived lightness changes with hue"
  },
  {
    "objectID": "slides/color-spaces.html#the-luv-color-space",
    "href": "slides/color-spaces.html#the-luv-color-space",
    "title": "Color spaces and color-vision deficiency",
    "section": "The Luv color space",
    "text": "The Luv color space\n\n\nluminance L (0-100):  amount of light emitted\ngreen/red axis u (approx. -100 to 100):  amount of green vs. red\nblue/yellow axis v (approx. -100 to 100):  amount of blue vs. yellow"
  },
  {
    "objectID": "slides/color-spaces.html#the-luv-space-in-polar-coordinates-hcl",
    "href": "slides/color-spaces.html#the-luv-space-in-polar-coordinates-hcl",
    "title": "Color spaces and color-vision deficiency",
    "section": "The Luv space in polar coordinates: HCL",
    "text": "The Luv space in polar coordinates: HCL\n\n\nhue H (0-360):  hue of the color\nluminance L (0-100):  amount of light emitted\nchroma C ():  colorfulness of the color"
  },
  {
    "objectID": "slides/color-spaces.html#the-hcl-color-space-hue-chroma-plane",
    "href": "slides/color-spaces.html#the-hcl-color-space-hue-chroma-plane",
    "title": "Color spaces and color-vision deficiency",
    "section": "The HCL color space: Hue-Chroma plane",
    "text": "The HCL color space: Hue-Chroma plane"
  },
  {
    "objectID": "slides/color-spaces.html#the-hcl-color-space-luminance-chroma-plane",
    "href": "slides/color-spaces.html#the-hcl-color-space-luminance-chroma-plane",
    "title": "Color spaces and color-vision deficiency",
    "section": "The HCL color space: Luminance-Chroma plane",
    "text": "The HCL color space: Luminance-Chroma plane"
  },
  {
    "objectID": "slides/color-spaces.html#we-can-explore-hcl-colors-from-r",
    "href": "slides/color-spaces.html#we-can-explore-hcl-colors-from-r",
    "title": "Color spaces and color-vision deficiency",
    "section": "We can explore HCL colors from R",
    "text": "We can explore HCL colors from R\ncolorspace::choose_color()"
  },
  {
    "objectID": "slides/color-spaces.html#we-can-explore-hcl-colors-from-r-1",
    "href": "slides/color-spaces.html#we-can-explore-hcl-colors-from-r-1",
    "title": "Color spaces and color-vision deficiency",
    "section": "We can explore HCL colors from R",
    "text": "We can explore HCL colors from R\nThe app is also available on the class website\n\n\n\n\n\n\n\n\nOpen color chooser app"
  },
  {
    "objectID": "slides/color-spaces.html#avoid-high-chroma",
    "href": "slides/color-spaces.html#avoid-high-chroma",
    "title": "Color spaces and color-vision deficiency",
    "section": "1. Avoid high chroma",
    "text": "1. Avoid high chroma\n\n\nHigh chroma: Toys\n\n\nLow chroma: Elegance\n\n\n\nToys photo by Pixabay from Pexels\nHome interior photo by Saviesa Home from Pexels"
  },
  {
    "objectID": "slides/color-spaces.html#be-aware-of-color-vision-deficiency",
    "href": "slides/color-spaces.html#be-aware-of-color-vision-deficiency",
    "title": "Color spaces and color-vision deficiency",
    "section": "2. Be aware of color-vision deficiency",
    "text": "2. Be aware of color-vision deficiency\n\n5%–8% of men are color blind!\n\n\n\nRed-green color-vision deficiency is the most common"
  },
  {
    "objectID": "slides/color-spaces.html#be-aware-of-color-vision-deficiency-1",
    "href": "slides/color-spaces.html#be-aware-of-color-vision-deficiency-1",
    "title": "Color spaces and color-vision deficiency",
    "section": "2. Be aware of color-vision deficiency",
    "text": "2. Be aware of color-vision deficiency\n5%–8% of men are color blind!\n\nBlue-green color-vision deficiency is rare but does occur"
  },
  {
    "objectID": "slides/color-spaces.html#be-aware-of-color-vision-deficiency-2",
    "href": "slides/color-spaces.html#be-aware-of-color-vision-deficiency-2",
    "title": "Color spaces and color-vision deficiency",
    "section": "2. Be aware of color-vision deficiency",
    "text": "2. Be aware of color-vision deficiency\nChoose colors that can be distinguished with CVD"
  },
  {
    "objectID": "slides/color-spaces.html#consider-using-the-okabe-ito-scale",
    "href": "slides/color-spaces.html#consider-using-the-okabe-ito-scale",
    "title": "Color spaces and color-vision deficiency",
    "section": "Consider using the Okabe-Ito scale",
    "text": "Consider using the Okabe-Ito scale\n\n\n\n\n\nName\nHex code   \nR, G, B (0-255)\n\n\n\n\norange\n#E69F00\n230, 159, 0\n\n\nsky blue\n#56B4E9\n86, 180, 233\n\n\nbluish green\n#009E73\n0, 158, 115\n\n\nyellow\n#F0E442\n240, 228, 66\n\n\nblue\n#0072B2\n0, 114, 178\n\n\nvermilion\n#D55E00\n213, 94, 0\n\n\nreddish purple\n#CC79A7\n204, 121, 167\n\n\nblack\n#000000\n0, 0, 0"
  },
  {
    "objectID": "slides/color-spaces.html#cvd-is-worse-for-thin-lines-and-tiny-dots",
    "href": "slides/color-spaces.html#cvd-is-worse-for-thin-lines-and-tiny-dots",
    "title": "Color spaces and color-vision deficiency",
    "section": "CVD is worse for thin lines and tiny dots",
    "text": "CVD is worse for thin lines and tiny dots"
  },
  {
    "objectID": "slides/color-spaces.html#when-in-doubt-run-cvd-simulations",
    "href": "slides/color-spaces.html#when-in-doubt-run-cvd-simulations",
    "title": "Color spaces and color-vision deficiency",
    "section": "When in doubt, run CVD simulations",
    "text": "When in doubt, run CVD simulations\n\nOriginal"
  },
  {
    "objectID": "slides/color-spaces.html#further-reading",
    "href": "slides/color-spaces.html#further-reading",
    "title": "Color spaces and color-vision deficiency",
    "section": "Further reading",
    "text": "Further reading\n\nFundamentals of Data Visualization: Chapter 19: Common pitfalls of color use\nWikipedia: HSL and HSV\ncolorspace package documentation: Color Spaces\ncolorspace package documentation: Apps for Choosing Colors and Palettes Interactively"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#dataset-daily-average-temperatures-for-various-locations",
    "href": "slides/aesthetic-mappings.html#dataset-daily-average-temperatures-for-various-locations",
    "title": "Aesthetic mappings",
    "section": "Dataset:Daily average temperatures for various locations",
    "text": "Dataset:Daily average temperatures for various locations\n\n\n\n\n\n\nlocation\nday_of_year\nmonth\ntemperature\n\n\n\n\nDeath Valley\n1\n01\n51.0\n\n\nDeath Valley\n2\n01\n51.2\n\n\nDeath Valley\n3\n01\n51.3\n\n\nDeath Valley\n4\n01\n51.4\n\n\nDeath Valley\n5\n01\n51.6\n\n\nDeath Valley\n6\n01\n51.7\n\n\nDeath Valley\n7\n01\n51.9\n\n\nDeath Valley\n8\n01\n52.0\n\n\nDeath Valley\n9\n01\n52.2\n\n\nDeath Valley\n10\n01\n52.3\n\n\nDeath Valley\n11\n01\n52.5\n\n\nDeath Valley\n12\n01\n52.7\n\n\nDeath Valley\n13\n01\n52.9"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#temperatures-mapped-onto-y-position",
    "href": "slides/aesthetic-mappings.html#temperatures-mapped-onto-y-position",
    "title": "Aesthetic mappings",
    "section": "Temperatures mapped onto y position",
    "text": "Temperatures mapped onto y position"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#temperatures-mapped-onto-color",
    "href": "slides/aesthetic-mappings.html#temperatures-mapped-onto-color",
    "title": "Aesthetic mappings",
    "section": "Temperatures mapped onto color",
    "text": "Temperatures mapped onto color"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#commonly-used-aesthetics",
    "href": "slides/aesthetic-mappings.html#commonly-used-aesthetics",
    "title": "Aesthetic mappings",
    "section": "Commonly used aesthetics",
    "text": "Commonly used aesthetics"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#the-same-data-values-can-be-mapped-to-different-aesthetics",
    "href": "slides/aesthetic-mappings.html#the-same-data-values-can-be-mapped-to-different-aesthetics",
    "title": "Aesthetic mappings",
    "section": "The same data values can be mapped to different aesthetics",
    "text": "The same data values can be mapped to different aesthetics"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#we-can-use-many-different-aesthetics-at-once",
    "href": "slides/aesthetic-mappings.html#we-can-use-many-different-aesthetics-at-once",
    "title": "Aesthetic mappings",
    "section": "We can use many different aesthetics at once",
    "text": "We can use many different aesthetics at once"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#getting-the-data",
    "href": "slides/aesthetic-mappings.html#getting-the-data",
    "title": "Aesthetic mappings",
    "section": "Getting the data",
    "text": "Getting the data\nAll examples will use the temperatures dataset:\n\n\ntemperatures &lt;- read_csv(\"https://wilkelab.org/SDS366/datasets/tempnormals.csv\") |&gt;\n  mutate(\n    location = factor(\n      location, levels = c(\"Death Valley\", \"Houston\", \"San Diego\", \"Chicago\")\n    )\n  ) |&gt;\n  select(location, station_id, day_of_year, month, temperature)"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#we-define-the-mapping-with-aes",
    "href": "slides/aesthetic-mappings.html#we-define-the-mapping-with-aes",
    "title": "Aesthetic mappings",
    "section": "We define the mapping with aes()",
    "text": "We define the mapping with aes()\n\n\nggplot(\n  data = temperatures,\n  mapping = aes(x = day_of_year, y = temperature, color = location)\n) + \n  geom_line()"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#we-define-the-mapping-with-aes-1",
    "href": "slides/aesthetic-mappings.html#we-define-the-mapping-with-aes-1",
    "title": "Aesthetic mappings",
    "section": "We define the mapping with aes()",
    "text": "We define the mapping with aes()\n\n\nggplot(\n  data = temperatures,\n  mapping = aes(x = day_of_year, y = location, color = temperature)\n) + \n  geom_point(size = 5)"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#we-frequently-omit-argument-names",
    "href": "slides/aesthetic-mappings.html#we-frequently-omit-argument-names",
    "title": "Aesthetic mappings",
    "section": "We frequently omit argument names",
    "text": "We frequently omit argument names\nLong form, all arguments are named:\n\nggplot(\n  data = temperatures,\n  mapping = aes(x = day_of_year, y = location, color = temperature)\n) + geom_point(size = 5)\n\n\nAbbreviated form, common arguments remain unnamed:\n\nggplot(temperatures, aes(day_of_year, location, color = temperature)) + \n  geom_point(size = 5)"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#the-geom-determines-how-the-data-is-shown",
    "href": "slides/aesthetic-mappings.html#the-geom-determines-how-the-data-is-shown",
    "title": "Aesthetic mappings",
    "section": "The geom determines how the data is shown",
    "text": "The geom determines how the data is shown\n\n\nggplot(temperatures, aes(day_of_year, temperature, color = location)) + \n  geom_line()"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#the-geom-determines-how-the-data-is-shown-1",
    "href": "slides/aesthetic-mappings.html#the-geom-determines-how-the-data-is-shown-1",
    "title": "Aesthetic mappings",
    "section": "The geom determines how the data is shown",
    "text": "The geom determines how the data is shown\n\n\nggplot(temperatures, aes(day_of_year, location, color = temperature)) + \n  geom_point(size = 5)"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#the-geom-determines-how-the-data-is-shown-2",
    "href": "slides/aesthetic-mappings.html#the-geom-determines-how-the-data-is-shown-2",
    "title": "Aesthetic mappings",
    "section": "The geom determines how the data is shown",
    "text": "The geom determines how the data is shown\n\n\nggplot(temperatures, aes(month, temperature, color = location)) + \n  geom_boxplot()"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#the-geom-determines-how-the-data-is-shown-3",
    "href": "slides/aesthetic-mappings.html#the-geom-determines-how-the-data-is-shown-3",
    "title": "Aesthetic mappings",
    "section": "The geom determines how the data is shown",
    "text": "The geom determines how the data is shown\n\n\nggplot(temperatures, aes(month, temperature, fill = location)) + \n  geom_violin() + \n  facet_wrap(~location) # make separate panel per location"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#distinguish-between-color-and-fill",
    "href": "slides/aesthetic-mappings.html#distinguish-between-color-and-fill",
    "title": "Aesthetic mappings",
    "section": "Distinguish between color and fill",
    "text": "Distinguish between color and fill\n\ncolor Applies color to points, lines, text, borders\n\n\nfill Applies color to any filled areas"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#many-geoms-use-both-color-and-fill",
    "href": "slides/aesthetic-mappings.html#many-geoms-use-both-color-and-fill",
    "title": "Aesthetic mappings",
    "section": "Many geoms use both color and fill",
    "text": "Many geoms use both color and fill\n\n\nggplot(temperatures, aes(month, temperature, color = location)) + \n  geom_boxplot()"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#many-geoms-use-both-color-and-fill-1",
    "href": "slides/aesthetic-mappings.html#many-geoms-use-both-color-and-fill-1",
    "title": "Aesthetic mappings",
    "section": "Many geoms use both color and fill",
    "text": "Many geoms use both color and fill\n\n\nggplot(temperatures, aes(month, temperature, fill = location)) + \n  geom_boxplot()"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#many-geoms-use-both-color-and-fill-2",
    "href": "slides/aesthetic-mappings.html#many-geoms-use-both-color-and-fill-2",
    "title": "Aesthetic mappings",
    "section": "Many geoms use both color and fill",
    "text": "Many geoms use both color and fill\n\n\nggplot(temperatures, aes(month, temperature, color = location, fill = location)) + \n  geom_boxplot()"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#aesthetics-can-also-be-used-as-parameters",
    "href": "slides/aesthetic-mappings.html#aesthetics-can-also-be-used-as-parameters",
    "title": "Aesthetic mappings",
    "section": "Aesthetics can also be used as parameters",
    "text": "Aesthetics can also be used as parameters\n\n\nggplot(temperatures, aes(month, temperature, fill = location)) + \n  geom_boxplot(color = \"steelblue\")"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#aesthetics-can-also-be-used-as-parameters-1",
    "href": "slides/aesthetic-mappings.html#aesthetics-can-also-be-used-as-parameters-1",
    "title": "Aesthetic mappings",
    "section": "Aesthetics can also be used as parameters",
    "text": "Aesthetics can also be used as parameters\n\n\nggplot(temperatures, aes(month, temperature, color = location)) + \n  geom_boxplot(fill = \"steelblue\")"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#further-reading",
    "href": "slides/aesthetic-mappings.html#further-reading",
    "title": "Aesthetic mappings",
    "section": "Further reading",
    "text": "Further reading\n\nFundamentals of Data Visualization: Chapter 2: Visualizing data\nData Visualization—A Practical Introduction: Chapter 3: Make a plot\nggplot2 reference documentation\nggplot2 book\nggplot2 cheatsheet"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "SDS 366",
    "section": "",
    "text": "This is the home page for SDS 366, Data Visualization in R. All course materials will be posted on this site.\nInstructor: Claus O. Wilke\nMeeting times: TTH 5:00pm to 6:30pm\nVenue: FAC 21\nSyllabus: click here\nUpcoming lectures and assignments: click here"
  },
  {
    "objectID": "index.html#computing-requirements",
    "href": "index.html#computing-requirements",
    "title": "SDS 366",
    "section": "Computing requirements",
    "text": "Computing requirements\nFor students enrolled in this course, you only need a working web browser to access the edupod server, located at: https://edupod.cns.utexas.edu/\nIf you are using the edupod server, stop reading here. Everything is pre-installed and no further action is needed.\nTo run any of the materials locally on your own machine, you will need the following:\n\nA recent version of R, download from here.\nA recent version of RStudio, download from here, OR a recent version of Positron, download from here.\nThe following R packages:\nbroom, cluster, colorspace, cowplot, gapminder, GGally, gganimate, ggiraph, ggdendro, ggdist, ggforce, ggplot2movies, ggrepel, ggridges, ggthemes, gifski, glue, knitr, learnr, naniar, margins, MASS, Matrix, nycflights13, palmerpenguins, patchwork, quarto, rmarkdown, rnaturalearth, rnaturalearthhires, scales, sf, sp, tidyverse, transformr, tsne, umap\n\nYou can install all required R packages at once by running the following code in the R command line:\n# first run this command:\ninstall.packages(\n  c(\n    \"broom\", \"cluster\", \"colorspace\", \"cowplot\", \"gapminder\", \n    \"GGally\", \"gganimate\", \"ggiraph\", \"ggdendro\", \"ggdist\", \"ggforce\",\n    \"ggplot2movies\", \"ggrepel\", \"ggridges\", \"ggthemes\", \"gifski\", \"glue\",\n    \"knitr\", \"learnr\", \"naniar\", \"margins\", \"MASS\", \"Matrix\",\n    \"nycflights13\", \"palmerpenguins\", \"patchwork\", \"quarto\", \"rmarkdown\",\n    \"rnaturalearth\", \"scales\", \"sf\", \"sp\", \"tidyverse\",\n    \"transformr\", \"tsne\", \"umap\"\n  )\n)\n\n# then run this command:\ninstall.packages(\n  \"rnaturalearthhires\", repos = \"https://packages.ropensci.org\", type = \"source\"\n)"
  },
  {
    "objectID": "accommodations.html",
    "href": "accommodations.html",
    "title": "Disability and Access Accommodations",
    "section": "",
    "text": "Some students receive special course accommodations from Disability and Access. Below is a list of common accommodation requests and my explanation of how I usually handle them. If you have any questions regarding any of these accommodations and/or have additional requests, please reach out to me on Canvas, in office hours, or after class and we can discuss."
  },
  {
    "objectID": "accommodations.html#classroom-accommodations",
    "href": "accommodations.html#classroom-accommodations",
    "title": "Disability and Access Accommodations",
    "section": "Classroom Accommodations",
    "text": "Classroom Accommodations\n\nUse of technology to take notes during class. You are welcome to use any note-taking technology you find helpful. To the extent that your note-taking technology creates any sort of recordings of class materials, see the next point.\nUse of technology to audio record during class. You are welcome to record audio, for your own personal use as a study aid. Audio recordings should not be shared or otherwise made available to third parties. Be aware that the section in the syllabus about class recordings applies to any personal recordings you may be making.\nA copy of class notes from a volunteer. I am happy to ask whether there are any volunteers willing to share class notes.\nAccess to materials shown in class. All materials are posted either on Canvas or on the class website, https://wilkelab.org/SDS366.\nFlexibility with deadlines. The amount of flexibility we can provide is strongly constrained by the class structure. We cannot accept homework submissions after the assignment has been graded and solutions have been released. This will typically happen 2-3 days after the original deadline. We cannot accept project submissions after the project has been released for peer grading. This will happen 2 days after the original deadline. In all cases, if you need a deadline extension please reach out on Canvas as early as possible (ideally before the deadline has passed) and ask for a specific amount of time you would like to have added to the deadline. (Example: “Could I have a deadline extension of one day?”) Mention in your message that you have an approved accommodation for flexibility with deadlines. You do not need to explain why you need the extension.\nPlease note that deadline extensions should be occasional, one-off events. I will not approve a blanket deadline extension for all assingments throughout the semester. I also encourage you to manage your deadlines proactively. Materials for homework assignments will be posted at least one week before the deadline, and materials for projects will be posted at least two weeks before the deadline. This should give you plenty of time to complete your assignments early and not push things to the last minute.\nFlexibility with attendance. Regular attendance is a component of the overall grade in this class. However, you are not required to attend every single lecture. You can make up for missed lectures by participating in the online discussions on Canvas instead. See the participation component of the class grade described in the syllabus."
  },
  {
    "objectID": "accommodations.html#testing-accommodations",
    "href": "accommodations.html#testing-accommodations",
    "title": "Disability and Access Accommodations",
    "section": "Testing accommodations",
    "text": "Testing accommodations\nThis class does not have any timed exams or tests and therefore testing accommodations do not apply."
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "SDS 366 Schedule Spring 2025",
    "section": "",
    "text": "Materials:\n\n\nSlides\n\nWorksheet 1: Introduction to Quarto\nWorksheet 2: Introduction to R\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides Part I (visualizing amounts)\nWorksheet Part I\nSlides Part II (telling a story)\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides Part I (pipe, sorting, filtering, mutating)\nWorksheet Part I\nSlides Part II (summarizing, pivoting, joining)\nWorksheet Part II"
  },
  {
    "objectID": "schedule.html#lectures",
    "href": "schedule.html#lectures",
    "title": "SDS 366 Schedule Spring 2025",
    "section": "",
    "text": "Materials:\n\n\nSlides\n\nWorksheet 1: Introduction to Quarto\nWorksheet 2: Introduction to R\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides Part I (visualizing amounts)\nWorksheet Part I\nSlides Part II (telling a story)\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides Part I (pipe, sorting, filtering, mutating)\nWorksheet Part I\nSlides Part II (summarizing, pivoting, joining)\nWorksheet Part II"
  },
  {
    "objectID": "schedule.html#homeworks",
    "href": "schedule.html#homeworks",
    "title": "SDS 366 Schedule Spring 2025",
    "section": "Homeworks",
    "text": "Homeworks\nAll homeworks are due by 11:00pm on the day they are due. Homeworks need to be submitted as pdf files on Canvas.\n\nHomework 1 (due Jan 23, 2025)\n\nMaterials:\n\n\nQuarto template\nPDF\n\n\n\nHomework 2 (due Jan 30, 2025)\n\nMaterials:\n\n\nQuarto template\nPDF\n\n\n\nHomework 3 (due Feb 6, 2025)\n\nMaterials:\n\n\nQuarto template\nPDF\n\n\n\nHomework 4 (due Feb 27, 2025)\n\n\nHomework 5 (due Mar 6, 2025)\n\n\nHomework 6 (due Apr 3, 2025)\n\n\nHomework 7 (due Apr 10, 2025)"
  },
  {
    "objectID": "schedule.html#projects",
    "href": "schedule.html#projects",
    "title": "SDS 366 Schedule Spring 2025",
    "section": "Projects",
    "text": "Projects\nAll projects are due by 11:00pm on the day they are due. Projects need to be submitted on Canvas. Please carefully read the submission instructions for each project.\n\nProject 1 (due Feb 13, 2025)\n\nMaterials:\n\n\nInstructions (pdf)\nProject Template (qmd)\nProject Template (pdf)\nGrading rubric (pdf)\nExample project (pdf)\n\n\n\nProject 2 (due Mar 13, 2025)\n\n\nProject 3 (due Apr 26, 2025)"
  },
  {
    "objectID": "slides/color-scales.html#uses-of-color-in-data-visualization",
    "href": "slides/color-scales.html#uses-of-color-in-data-visualization",
    "title": "Color scales",
    "section": "Uses of color in data visualization",
    "text": "Uses of color in data visualization\n\n\n\n1. Distinguish categories (qualitative)"
  },
  {
    "objectID": "slides/color-scales.html#qualitative-scale-example",
    "href": "slides/color-scales.html#qualitative-scale-example",
    "title": "Color scales",
    "section": "Qualitative scale example",
    "text": "Qualitative scale example\n\n\n\n\n\n \n\n\n\n\n\nPalette name: Okabe-Ito"
  },
  {
    "objectID": "slides/color-scales.html#qualitative-scale-example-1",
    "href": "slides/color-scales.html#qualitative-scale-example-1",
    "title": "Color scales",
    "section": "Qualitative scale example",
    "text": "Qualitative scale example\n\n\n\n\n\n \n\n\n\n\n\nPalette name: ColorBrewer Set1"
  },
  {
    "objectID": "slides/color-scales.html#qualitative-scale-example-2",
    "href": "slides/color-scales.html#qualitative-scale-example-2",
    "title": "Color scales",
    "section": "Qualitative scale example",
    "text": "Qualitative scale example\n\n\n\n\n\n \n\n\n\n\n\nPalette name: ColorBrewer Set3"
  },
  {
    "objectID": "slides/color-scales.html#uses-of-color-in-data-visualization-1",
    "href": "slides/color-scales.html#uses-of-color-in-data-visualization-1",
    "title": "Color scales",
    "section": "Uses of color in data visualization",
    "text": "Uses of color in data visualization\n\n\n\n1. Distinguish categories (qualitative)\n\n\n\n\n\n\n\n2. Represent numeric values (sequential)"
  },
  {
    "objectID": "slides/color-scales.html#sequential-scale-example",
    "href": "slides/color-scales.html#sequential-scale-example",
    "title": "Color scales",
    "section": "Sequential scale example",
    "text": "Sequential scale example\n\n\n\n\n\n\n \n\n\n\n\n\n\nPalette name: Viridis"
  },
  {
    "objectID": "slides/color-scales.html#sequential-scale-example-1",
    "href": "slides/color-scales.html#sequential-scale-example-1",
    "title": "Color scales",
    "section": "Sequential scale example",
    "text": "Sequential scale example\n\n\n\n\n\n\n \n\n\n\n\n\n\nPalette name: Inferno"
  },
  {
    "objectID": "slides/color-scales.html#sequential-scale-example-2",
    "href": "slides/color-scales.html#sequential-scale-example-2",
    "title": "Color scales",
    "section": "Sequential scale example",
    "text": "Sequential scale example\n\n\n\n\n\n\n \n\n\n\n\n\n\nPalette name: Cividis"
  },
  {
    "objectID": "slides/color-scales.html#uses-of-color-in-data-visualization-2",
    "href": "slides/color-scales.html#uses-of-color-in-data-visualization-2",
    "title": "Color scales",
    "section": "Uses of color in data visualization",
    "text": "Uses of color in data visualization\n\n\n\n1. Distinguish categories (qualitative)\n\n\n\n\n\n\n\n2. Represent numeric values (sequential)\n\n\n\n\n\n\n\n3. Represent numeric values (diverging)"
  },
  {
    "objectID": "slides/color-scales.html#diverging-scale-example",
    "href": "slides/color-scales.html#diverging-scale-example",
    "title": "Color scales",
    "section": "Diverging scale example",
    "text": "Diverging scale example\n\n\n\n\n\n \n\n\n\n\n\nPalette name: ColorBrewer PiYG"
  },
  {
    "objectID": "slides/color-scales.html#diverging-scale-example-1",
    "href": "slides/color-scales.html#diverging-scale-example-1",
    "title": "Color scales",
    "section": "Diverging scale example",
    "text": "Diverging scale example\n\n\n\n\n\n \n\n\n\n\n\nPalette name: Carto Earth"
  },
  {
    "objectID": "slides/color-scales.html#diverging-scale-example-2",
    "href": "slides/color-scales.html#diverging-scale-example-2",
    "title": "Color scales",
    "section": "Diverging scale example",
    "text": "Diverging scale example\n\n\n\n\n\n \n\n\n\n\n\nPalette name: Blue-Red"
  },
  {
    "objectID": "slides/color-scales.html#uses-of-color-in-data-visualization-3",
    "href": "slides/color-scales.html#uses-of-color-in-data-visualization-3",
    "title": "Color scales",
    "section": "Uses of color in data visualization",
    "text": "Uses of color in data visualization\n\n\n\n1. Distinguish categories (qualitative)\n\n\n\n\n\n\n\n2. Represent numeric values (sequential)\n\n\n\n\n\n\n\n3. Represent numeric values (diverging)\n\n\n\n\n\n\n\n4. Highlight"
  },
  {
    "objectID": "slides/color-scales.html#highlight-example",
    "href": "slides/color-scales.html#highlight-example",
    "title": "Color scales",
    "section": "Highlight example",
    "text": "Highlight example\n\n\n\n\n\n \n\n\n\n\n\nPalette name: Grays with accents"
  },
  {
    "objectID": "slides/color-scales.html#highlight-example-1",
    "href": "slides/color-scales.html#highlight-example-1",
    "title": "Color scales",
    "section": "Highlight example",
    "text": "Highlight example\n\n\n\n\n\n \n\n\n\n\n\nPalette name: Okabe Ito accent"
  },
  {
    "objectID": "slides/color-scales.html#highlight-example-2",
    "href": "slides/color-scales.html#highlight-example-2",
    "title": "Color scales",
    "section": "Highlight example",
    "text": "Highlight example\n\n\n\n\n\n \n\n\n\n\n\nPalette name: ColorBrewer accent"
  },
  {
    "objectID": "slides/color-scales.html#getting-the-data",
    "href": "slides/color-scales.html#getting-the-data",
    "title": "Color scales",
    "section": "Getting the data",
    "text": "Getting the data\n\nThe temps_months dataset:\n\ntemps_months &lt;- read_csv(\"https://wilkelab.org/SDS366/datasets/tempnormals.csv\") |&gt;\n  group_by(location, month_name) |&gt;\n  summarize(mean = mean(temperature)) |&gt;\n  mutate(\n    month = factor(\n      month_name,\n      levels = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\")\n    ),\n    location = factor(location, levels = c(\"Death Valley\", \"Houston\", \"San Diego\", \"Chicago\"))\n  ) |&gt;\n  select(-month_name)\n\ntemps_months\n\n# A tibble: 48 × 3\n# Groups:   location [4]\n   location  mean month\n   &lt;fct&gt;    &lt;dbl&gt; &lt;fct&gt;\n 1 Chicago   50.4 Apr  \n 2 Chicago   74.1 Aug  \n 3 Chicago   29   Dec  \n 4 Chicago   28.9 Feb  \n 5 Chicago   24.8 Jan  \n 6 Chicago   75.8 Jul  \n 7 Chicago   71.0 Jun  \n 8 Chicago   38.8 Mar  \n 9 Chicago   60.9 May  \n10 Chicago   41.6 Nov  \n# ℹ 38 more rows"
  },
  {
    "objectID": "slides/color-scales.html#getting-the-data-1",
    "href": "slides/color-scales.html#getting-the-data-1",
    "title": "Color scales",
    "section": "Getting the data",
    "text": "Getting the data\n\nThe popgrowth dataset:\n\nUS_census &lt;- read_csv(\"https://wilkelab.org/SDS366/datasets/US_census.csv\")\nUS_regions &lt;- read_csv(\"https://wilkelab.org/SDS366/datasets/US_regions.csv\")\n\npopgrowth &lt;- left_join(US_census, US_regions) |&gt;\n    group_by(region, division, state) |&gt;\n    summarize(\n      pop2000 = sum(pop2000, na.rm = TRUE),\n      pop2010 = sum(pop2010, na.rm = TRUE),\n      popgrowth = (pop2010-pop2000)/pop2000,\n      .groups = \"drop\"\n    ) |&gt;\n    mutate(region = factor(region, levels = c(\"West\", \"South\", \"Midwest\", \"Northeast\")))\n\npopgrowth\n\n# A tibble: 51 × 6\n   region  division           state      pop2000  pop2010 popgrowth\n   &lt;fct&gt;   &lt;chr&gt;              &lt;chr&gt;        &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n 1 Midwest East North Central Illinois  12419293 12830632   0.0331 \n 2 Midwest East North Central Indiana    6080485  6483802   0.0663 \n 3 Midwest East North Central Michigan   9938444  9883640  -0.00551\n 4 Midwest East North Central Ohio      11353140 11536504   0.0162 \n 5 Midwest East North Central Wisconsin  5363675  5686986   0.0603 \n 6 Midwest West North Central Iowa       2926324  3046355   0.0410 \n 7 Midwest West North Central Kansas     2688418  2853118   0.0613 \n 8 Midwest West North Central Minnesota  4919479  5303925   0.0781 \n 9 Midwest West North Central Missouri   5595211  5988927   0.0704 \n10 Midwest West North Central Nebraska   1711263  1826341   0.0672 \n# ℹ 41 more rows"
  },
  {
    "objectID": "slides/color-scales.html#ggplot2-color-scale-functions-are-a-bit-of-a-mess",
    "href": "slides/color-scales.html#ggplot2-color-scale-functions-are-a-bit-of-a-mess",
    "title": "Color scales",
    "section": "ggplot2 color scale functions are a bit of a mess",
    "text": "ggplot2 color scale functions are a bit of a mess\n\n\n\n\n\n\n\n\n\n\nScale function                                   \nAesthetic   \nData type    \nPalette type\n\n\n\n\nscale_color_hue()\ncolor\ndiscrete\nqualitative"
  },
  {
    "objectID": "slides/color-scales.html#ggplot2-color-scale-functions-are-a-bit-of-a-mess-1",
    "href": "slides/color-scales.html#ggplot2-color-scale-functions-are-a-bit-of-a-mess-1",
    "title": "Color scales",
    "section": "ggplot2 color scale functions are a bit of a mess",
    "text": "ggplot2 color scale functions are a bit of a mess\n\n\n\n\n\n\n\n\n\n\nScale function                                   \nAesthetic   \nData type    \nPalette type\n\n\n\n\nscale_color_hue()\ncolor\ndiscrete\nqualitative\n\n\nscale_fill_hue()\nfill\ndiscrete\nqualitative"
  },
  {
    "objectID": "slides/color-scales.html#ggplot2-color-scale-functions-are-a-bit-of-a-mess-2",
    "href": "slides/color-scales.html#ggplot2-color-scale-functions-are-a-bit-of-a-mess-2",
    "title": "Color scales",
    "section": "ggplot2 color scale functions are a bit of a mess",
    "text": "ggplot2 color scale functions are a bit of a mess\n\n\n\n\n\n\n\n\n\n\nScale function                                   \nAesthetic   \nData type    \nPalette type\n\n\n\n\nscale_color_hue()\ncolor\ndiscrete\nqualitative\n\n\nscale_fill_hue()\nfill\ndiscrete\nqualitative\n\n\nscale_color_gradient()\ncolor\ncontinuous\nsequential"
  },
  {
    "objectID": "slides/color-scales.html#ggplot2-color-scale-functions-are-a-bit-of-a-mess-3",
    "href": "slides/color-scales.html#ggplot2-color-scale-functions-are-a-bit-of-a-mess-3",
    "title": "Color scales",
    "section": "ggplot2 color scale functions are a bit of a mess",
    "text": "ggplot2 color scale functions are a bit of a mess\n\n\n\n\n\n\n\n\n\n\nScale function                                   \nAesthetic   \nData type    \nPalette type\n\n\n\n\nscale_color_hue()\ncolor\ndiscrete\nqualitative\n\n\nscale_fill_hue()\nfill\ndiscrete\nqualitative\n\n\nscale_color_gradient()\ncolor\ncontinuous\nsequential\n\n\nscale_color_gradient2()\ncolor\ncontinuous\ndiverging"
  },
  {
    "objectID": "slides/color-scales.html#ggplot2-color-scale-functions-are-a-bit-of-a-mess-4",
    "href": "slides/color-scales.html#ggplot2-color-scale-functions-are-a-bit-of-a-mess-4",
    "title": "Color scales",
    "section": "ggplot2 color scale functions are a bit of a mess",
    "text": "ggplot2 color scale functions are a bit of a mess\n\n\n\n\n\n\n\n\n\n\nScale function                                   \nAesthetic   \nData type    \nPalette type\n\n\n\n\nscale_color_hue()\ncolor\ndiscrete\nqualitative\n\n\nscale_fill_hue()\nfill\ndiscrete\nqualitative\n\n\nscale_color_gradient()\ncolor\ncontinuous\nsequential\n\n\nscale_color_gradient2()\ncolor\ncontinuous\ndiverging\n\n\nscale_fill_viridis_c()\ncolor\ncontinuous\nsequential\n\n\nscale_fill_viridis_d()\nfill\ndiscrete\nsequential\n\n\nscale_color_brewer()\ncolor\ndiscrete\nqualitative, diverging, sequential\n\n\nscale_fill_brewer()\nfill\ndiscrete\nqualitative, diverging, sequential\n\n\nscale_color_distiller()\ncolor\ncontinuous\nqualitative, diverging, sequential\n\n\n\n\n… and there are many many more"
  },
  {
    "objectID": "slides/color-scales.html#examples",
    "href": "slides/color-scales.html#examples",
    "title": "Color scales",
    "section": "Examples",
    "text": "Examples\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile(width = 0.95, height = 0.95) + \n  coord_fixed(expand = FALSE) +\n  theme_classic()\n  # no fill scale defined, default is scale_fill_gradient()"
  },
  {
    "objectID": "slides/color-scales.html#examples-1",
    "href": "slides/color-scales.html#examples-1",
    "title": "Color scales",
    "section": "Examples",
    "text": "Examples\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile(width = 0.95, height = 0.95) + \n  coord_fixed(expand = FALSE) +\n  theme_classic() +\n  scale_fill_gradient()"
  },
  {
    "objectID": "slides/color-scales.html#examples-2",
    "href": "slides/color-scales.html#examples-2",
    "title": "Color scales",
    "section": "Examples",
    "text": "Examples\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile(width = 0.95, height = 0.95) + \n  coord_fixed(expand = FALSE) +\n  theme_classic() +\n  scale_fill_viridis_c() # the _c stands for continuous"
  },
  {
    "objectID": "slides/color-scales.html#examples-3",
    "href": "slides/color-scales.html#examples-3",
    "title": "Color scales",
    "section": "Examples",
    "text": "Examples\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile(width = 0.95, height = 0.95) + \n  coord_fixed(expand = FALSE) +\n  theme_classic() +\n  scale_fill_viridis_c(option = \"B\", begin = 0.15)"
  },
  {
    "objectID": "slides/color-scales.html#examples-4",
    "href": "slides/color-scales.html#examples-4",
    "title": "Color scales",
    "section": "Examples",
    "text": "Examples\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile(width = 0.95, height = 0.95) + \n  coord_fixed(expand = FALSE) +\n  theme_classic() +\n  scale_fill_distiller(palette = \"YlGnBu\")"
  },
  {
    "objectID": "slides/color-scales.html#the-colorspace-package-creates-some-order",
    "href": "slides/color-scales.html#the-colorspace-package-creates-some-order",
    "title": "Color scales",
    "section": "The colorspace package creates some order",
    "text": "The colorspace package creates some order\nScale name: scale_&lt;aesthetic&gt;_&lt;datatype&gt;_&lt;colorscale&gt;()\n\n&lt;aesthetic&gt;: name of the aesthetic (fill, color, colour)\n\n\n&lt;datatype&gt;: type of variable plotted (discrete, continuous, binned)\n\n\n&lt;colorscale&gt;: type of the color scale (qualitative, sequential, diverging, divergingx)\n\n\n\n\n\n\n\n\n\n\n\nScale function\nAesthetic\nData type\nPalette type\n\n\n\n\nscale_color_discrete_qualitative()\ncolor\ndiscrete\nqualitative\n\n\nscale_fill_continuous_sequential()\nfill\ncontinuous\nsequential\n\n\nscale_colour_continous_divergingx()\ncolour\ncontinuous\ndiverging"
  },
  {
    "objectID": "slides/color-scales.html#examples-5",
    "href": "slides/color-scales.html#examples-5",
    "title": "Color scales",
    "section": "Examples",
    "text": "Examples\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile(width = 0.95, height = 0.95) + \n  coord_fixed(expand = FALSE) +\n  theme_classic() +\n  scale_fill_continuous_sequential(palette = \"YlGnBu\", rev = FALSE)"
  },
  {
    "objectID": "slides/color-scales.html#examples-6",
    "href": "slides/color-scales.html#examples-6",
    "title": "Color scales",
    "section": "Examples",
    "text": "Examples\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile(width = 0.95, height = 0.95) + \n  coord_fixed(expand = FALSE) +\n  theme_classic() +\n  scale_fill_continuous_sequential(palette = \"Viridis\", rev = FALSE)"
  },
  {
    "objectID": "slides/color-scales.html#examples-7",
    "href": "slides/color-scales.html#examples-7",
    "title": "Color scales",
    "section": "Examples",
    "text": "Examples\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile(width = 0.95, height = 0.95) + \n  coord_fixed(expand = FALSE) +\n  theme_classic() +\n  scale_fill_continuous_sequential(\n    palette = \"Inferno\", begin = 0.15, rev = FALSE\n  )"
  },
  {
    "objectID": "slides/color-scales.html#all-sequential-palettes",
    "href": "slides/color-scales.html#all-sequential-palettes",
    "title": "Color scales",
    "section": "",
    "text": "# all sequential palettes provided by the colorspace package\ncolorspace::hcl_palettes(type = \"sequential\", plot = TRUE)"
  },
  {
    "objectID": "slides/color-scales.html#all-diverging-palettes",
    "href": "slides/color-scales.html#all-diverging-palettes",
    "title": "Color scales",
    "section": "",
    "text": "# all diverging palettes provided by the colorspace package\ncolorspace::hcl_palettes(type = \"diverging\", plot = TRUE, n = 9)"
  },
  {
    "objectID": "slides/color-scales.html#all-divergingx-palettes",
    "href": "slides/color-scales.html#all-divergingx-palettes",
    "title": "Color scales",
    "section": "",
    "text": "# all divergingx palettes provided by the colorspace package\ncolorspace::divergingx_palettes(plot = TRUE, n = 9)"
  },
  {
    "objectID": "slides/color-scales.html#all-scale-functions-use-breaks-labels-etc.",
    "href": "slides/color-scales.html#all-scale-functions-use-breaks-labels-etc.",
    "title": "Color scales",
    "section": "All scale functions use breaks, labels, etc.",
    "text": "All scale functions use breaks, labels, etc.\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile(width = 0.95, height = 0.95) + \n  coord_fixed(expand = FALSE) +\n  theme_classic() +\n  scale_fill_viridis_c(\n    name = \"temperature\",\n    breaks = c(25, 50, 75, 100),\n    labels = c(\"25°F\", \"50°F\", \"75°F\", \"100°F\")\n  )"
  },
  {
    "objectID": "slides/color-scales.html#discrete-qualitative-scales-are-best-set-manually",
    "href": "slides/color-scales.html#discrete-qualitative-scales-are-best-set-manually",
    "title": "Color scales",
    "section": "Discrete, qualitative scales are best set manually",
    "text": "Discrete, qualitative scales are best set manually\n\nggplot(popgrowth, aes(x = pop2000, y = popgrowth, color = region)) +\n  geom_point() +\n  scale_x_log10()\n  # no color scale defined, default is scale_color_hue()"
  },
  {
    "objectID": "slides/color-scales.html#discrete-qualitative-scales-are-best-set-manually-1",
    "href": "slides/color-scales.html#discrete-qualitative-scales-are-best-set-manually-1",
    "title": "Color scales",
    "section": "Discrete, qualitative scales are best set manually",
    "text": "Discrete, qualitative scales are best set manually\n\nggplot(popgrowth, aes(x = pop2000, y = popgrowth, color = region)) +\n  geom_point() +\n  scale_x_log10() +\n  scale_color_hue()"
  },
  {
    "objectID": "slides/color-scales.html#discrete-qualitative-scales-are-best-set-manually-2",
    "href": "slides/color-scales.html#discrete-qualitative-scales-are-best-set-manually-2",
    "title": "Color scales",
    "section": "Discrete, qualitative scales are best set manually",
    "text": "Discrete, qualitative scales are best set manually\n\nlibrary(ggthemes)  # for scale_color_colorblind()\n\nggplot(popgrowth, aes(x = pop2000, y = popgrowth, color = region)) +\n  geom_point() +\n  scale_x_log10() +\n  scale_color_colorblind()  # uses Okabe-Ito colors"
  },
  {
    "objectID": "slides/color-scales.html#discrete-qualitative-scales-are-best-set-manually-3",
    "href": "slides/color-scales.html#discrete-qualitative-scales-are-best-set-manually-3",
    "title": "Color scales",
    "section": "Discrete, qualitative scales are best set manually",
    "text": "Discrete, qualitative scales are best set manually\n\nggplot(popgrowth, aes(x = pop2000, y = popgrowth, color = region)) +\n  geom_point() +\n  scale_x_log10() +\n  scale_color_manual(\n    values = c(West = \"#E69F00\", South = \"#56B4E9\",\n               Midwest = \"#009E73\", Northeast = \"#F0E442\")\n  )"
  },
  {
    "objectID": "slides/color-scales.html#okabe-ito-rgb-codes",
    "href": "slides/color-scales.html#okabe-ito-rgb-codes",
    "title": "Color scales",
    "section": "Okabe-Ito RGB codes",
    "text": "Okabe-Ito RGB codes\n\n\n\n\n\nName\nHex code   \nR, G, B (0-255)\n\n\n\n\norange\n#E69F00\n230, 159, 0\n\n\nsky blue\n#56B4E9\n86, 180, 233\n\n\nbluish green\n#009E73\n0, 158, 115\n\n\nyellow\n#F0E442\n240, 228, 66\n\n\nblue\n#0072B2\n0, 114, 178\n\n\nvermilion\n#D55E00\n213, 94, 0\n\n\nreddish purple\n#CC79A7\n204, 121, 167\n\n\nblack\n#000000\n0, 0, 0"
  },
  {
    "objectID": "slides/color-scales.html#further-reading",
    "href": "slides/color-scales.html#further-reading",
    "title": "Color scales",
    "section": "Further reading",
    "text": "Further reading\n\nFundamentals of Data Visualization: Chapter 4: Color scales\nFundamentals of Data Visualization: Figure 19.10: Okabe-Ito color palette\nggplot2 book: Colour scales and legends\nggplot2 reference documentation: Scales\ncolorspace package: HCL-Based Color Scales for ggplot2"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#most-data-visualizations-use-cartesian-coordinates",
    "href": "slides/coordinate-systems-axes.html#most-data-visualizations-use-cartesian-coordinates",
    "title": "Coordinate systems and axes",
    "section": "Most data visualizations use Cartesian coordinates",
    "text": "Most data visualizations use Cartesian coordinates"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#changing-units-does-not-change-the-plot",
    "href": "slides/coordinate-systems-axes.html#changing-units-does-not-change-the-plot",
    "title": "Coordinate systems and axes",
    "section": "Changing units does not change the plot",
    "text": "Changing units does not change the plot"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#if-scale-units-are-unrelated-aspect-ratio-is-arbitrary",
    "href": "slides/coordinate-systems-axes.html#if-scale-units-are-unrelated-aspect-ratio-is-arbitrary",
    "title": "Coordinate systems and axes",
    "section": "If scale units are unrelated, aspect ratio is arbitrary",
    "text": "If scale units are unrelated, aspect ratio is arbitrary"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#logarithmic-scales-log-scales",
    "href": "slides/coordinate-systems-axes.html#logarithmic-scales-log-scales",
    "title": "Coordinate systems and axes",
    "section": "Logarithmic scales (log scales)",
    "text": "Logarithmic scales (log scales)\n\nVisualize these five values: 1,   3.16,   10,   31.6,   100"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#example-population-number-of-texas-counties",
    "href": "slides/coordinate-systems-axes.html#example-population-number-of-texas-counties",
    "title": "Coordinate systems and axes",
    "section": "Example: Population number of Texas counties",
    "text": "Example: Population number of Texas counties\nA linear scale emphasizes large counties"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#example-population-number-of-texas-counties-1",
    "href": "slides/coordinate-systems-axes.html#example-population-number-of-texas-counties-1",
    "title": "Coordinate systems and axes",
    "section": "Example: Population number of Texas counties",
    "text": "Example: Population number of Texas counties\nA log scale shows symmetry around the median"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#nonlinear-coordinate-systems-polar-coordinates",
    "href": "slides/coordinate-systems-axes.html#nonlinear-coordinate-systems-polar-coordinates",
    "title": "Coordinate systems and axes",
    "section": "Nonlinear coordinate systems: Polar coordinates",
    "text": "Nonlinear coordinate systems: Polar coordinates"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#cartesian-vs-polar-example",
    "href": "slides/coordinate-systems-axes.html#cartesian-vs-polar-example",
    "title": "Coordinate systems and axes",
    "section": "Cartesian vs polar example",
    "text": "Cartesian vs polar example"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#getting-the-data",
    "href": "slides/coordinate-systems-axes.html#getting-the-data",
    "title": "Coordinate systems and axes",
    "section": "Getting the data",
    "text": "Getting the data\n\nThe boxoffice dataset:\n\n\n\nboxoffice &lt;- tibble(\n  rank = 1:5,\n  title = c(\"Star Wars\", \"Jumanji\", \"Pitch Perfect 3\", \"Greatest Showman\", \"Ferdinand\"),\n  amount = c(71.57, 36.17, 19.93, 8.81, 7.32) # million USD\n)\n\n\n\n\nThe tx_counties dataset:\n\n\n\ntx_counties &lt;- read_csv(\"https://wilkelab.org/SDS366/datasets/US_census.csv\") |&gt; \n  filter(state == \"Texas\") |&gt;\n  mutate(popratio = pop2010/median(pop2010)) |&gt;\n  arrange(desc(popratio)) |&gt;\n  mutate(index = 1:n())"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#getting-the-data-1",
    "href": "slides/coordinate-systems-axes.html#getting-the-data-1",
    "title": "Coordinate systems and axes",
    "section": "Getting the data",
    "text": "Getting the data\n\nThe temperatures and temps_wide datasets (long and wide format of the same data):\n\n\n\n# long format\ntemperatures &lt;- read_csv(\"https://wilkelab.org/SDS366/datasets/tempnormals.csv\") |&gt;\n  mutate(\n    location = factor(\n      location, levels = c(\"Death Valley\", \"Houston\", \"San Diego\", \"Chicago\")\n    )\n  ) |&gt;\n  select(location, station_id, day_of_year, month, temperature)\n\n# wide format\ntemps_wide &lt;- temperatures |&gt;\n  pivot_wider(\n    id_cols = c(\"month\", \"day_of_year\"),\n    names_from = \"location\", values_from = \"temperature\"\n  )"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#scale-functions-customize-the-x-and-y-axes",
    "href": "slides/coordinate-systems-axes.html#scale-functions-customize-the-x-and-y-axes",
    "title": "Coordinate systems and axes",
    "section": "Scale functions customize the x and y axes",
    "text": "Scale functions customize the x and y axes\nRecall the box-office example from a prior lecture:\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col()"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#scale-functions-customize-the-x-and-y-axes-1",
    "href": "slides/coordinate-systems-axes.html#scale-functions-customize-the-x-and-y-axes-1",
    "title": "Coordinate systems and axes",
    "section": "Scale functions customize the x and y axes",
    "text": "Scale functions customize the x and y axes\nAdd scale functions (no change in figure so far):\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  scale_x_continuous() +\n  scale_y_discrete()"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#scale-functions-customize-the-x-and-y-axes-2",
    "href": "slides/coordinate-systems-axes.html#scale-functions-customize-the-x-and-y-axes-2",
    "title": "Coordinate systems and axes",
    "section": "Scale functions customize the x and y axes",
    "text": "Scale functions customize the x and y axes\nThe parameter name sets the axis title:\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  scale_x_continuous(\n    name = \"weekend gross (million USD)\"\n  ) +\n  scale_y_discrete(\n    name = NULL  # no axis title\n  )\n\n\n\n\n\n\n\n\n\n\n\nNote: We could do the same with xlab() and ylab()"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#scale-functions-customize-the-x-and-y-axes-3",
    "href": "slides/coordinate-systems-axes.html#scale-functions-customize-the-x-and-y-axes-3",
    "title": "Coordinate systems and axes",
    "section": "Scale functions customize the x and y axes",
    "text": "Scale functions customize the x and y axes\nThe parameter limits sets the scale limits:\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  scale_x_continuous(\n    name = \"weekend gross (million USD)\",\n    limits = c(0, 80)\n  ) +\n  scale_y_discrete(\n    name = NULL\n  )\n\n\n\n\n\n\n\n\n\n\n\nNote: We could do the same with xlim() and ylim() but I advise against it, as these functions can have unexpected side-effects"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#scale-functions-customize-the-x-and-y-axes-4",
    "href": "slides/coordinate-systems-axes.html#scale-functions-customize-the-x-and-y-axes-4",
    "title": "Coordinate systems and axes",
    "section": "Scale functions customize the x and y axes",
    "text": "Scale functions customize the x and y axes\nThe parameter breaks sets the axis tick positions:\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  scale_x_continuous(\n    name = \"weekend gross (million USD)\",\n    limits = c(0, 80),\n    breaks = c(0, 25, 50, 75)\n  ) +\n  scale_y_discrete(\n    name = NULL\n  )"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#scale-functions-customize-the-x-and-y-axes-5",
    "href": "slides/coordinate-systems-axes.html#scale-functions-customize-the-x-and-y-axes-5",
    "title": "Coordinate systems and axes",
    "section": "Scale functions customize the x and y axes",
    "text": "Scale functions customize the x and y axes\nThe parameter labels sets the axis tick labels:\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  scale_x_continuous(\n    name = \"weekend gross (million USD)\",\n    limits = c(0, 80),\n    breaks = c(0, 25, 50, 75),\n    labels = c(\"0\", \"$25M\", \"$50M\", \"$75M\")\n  ) +\n  scale_y_discrete(\n    name = NULL\n  )"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#scale-functions-customize-the-x-and-y-axes-6",
    "href": "slides/coordinate-systems-axes.html#scale-functions-customize-the-x-and-y-axes-6",
    "title": "Coordinate systems and axes",
    "section": "Scale functions customize the x and y axes",
    "text": "Scale functions customize the x and y axes\nThe parameter expand sets the axis expansion:\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  scale_x_continuous(\n    name = \"weekend gross (million USD)\",\n    limits = c(0, 80),\n    breaks = c(0, 25, 50, 75),\n    labels = c(\"0\", \"$25M\", \"$50M\", \"$75M\"),\n    expand = expansion(mult = c(0, 0.06))\n  ) +\n  scale_y_discrete(\n    name = NULL\n  )"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#scale-functions-define-transformations",
    "href": "slides/coordinate-systems-axes.html#scale-functions-define-transformations",
    "title": "Coordinate systems and axes",
    "section": "Scale functions define transformations",
    "text": "Scale functions define transformations\n\n\nLinear y scale:\n\n\nggplot(tx_counties) +\n  aes(x = index, y = popratio) +\n  geom_point() +\n  scale_y_continuous() \n\n\n\n\n \n\n\n\n\n\n\nLog y scale:\n\n\nggplot(tx_counties) +\n  aes(x = index, y = popratio) +\n  geom_point() +\n  scale_y_log10()"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#parameters-work-the-same-for-all-scale-functions",
    "href": "slides/coordinate-systems-axes.html#parameters-work-the-same-for-all-scale-functions",
    "title": "Coordinate systems and axes",
    "section": "Parameters work the same for all scale functions",
    "text": "Parameters work the same for all scale functions\n\n\nLinear y scale:\n\n\nggplot(tx_counties) +\n  aes(x = index, y = popratio) +\n  geom_point() +\n  scale_y_continuous(\n    name = \"population number / median\",\n    breaks = c(0, 100, 200),\n    labels = c(\"0\", \"100\", \"200\")\n  )\n\n\n\n\n \n\n\n\n\n\n\nLog y scale:\n\n\nggplot(tx_counties) +\n  aes(x = index, y = popratio) +\n  geom_point() +\n  scale_y_log10(\n    name = \"population number / median\",\n    breaks = c(0.01, 1, 100),\n    labels = c(\"0.01\", \"1\", \"100\")\n  )"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#coords-define-the-coordinate-system",
    "href": "slides/coordinate-systems-axes.html#coords-define-the-coordinate-system",
    "title": "Coordinate systems and axes",
    "section": "Coords define the coordinate system",
    "text": "Coords define the coordinate system\n\n\nggplot(temperatures, aes(day_of_year, temperature, color = location)) +\n  geom_line() +\n  coord_cartesian()  # cartesian coords are the default"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#coords-define-the-coordinate-system-1",
    "href": "slides/coordinate-systems-axes.html#coords-define-the-coordinate-system-1",
    "title": "Coordinate systems and axes",
    "section": "Coords define the coordinate system",
    "text": "Coords define the coordinate system\n\n\nggplot(temperatures, aes(day_of_year, temperature, color = location)) +\n  geom_line() +\n  coord_polar()   # polar coords"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#coords-define-the-coordinate-system-2",
    "href": "slides/coordinate-systems-axes.html#coords-define-the-coordinate-system-2",
    "title": "Coordinate systems and axes",
    "section": "Coords define the coordinate system",
    "text": "Coords define the coordinate system\n\n\nggplot(temperatures, aes(day_of_year, temperature, color = location)) +\n  geom_line() +\n  coord_polar() +\n  scale_y_continuous(limits = c(0, 105))  # fix up temperature limits"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#use-coord_fixed-for-fixed-aspect-ratio",
    "href": "slides/coordinate-systems-axes.html#use-coord_fixed-for-fixed-aspect-ratio",
    "title": "Coordinate systems and axes",
    "section": "Use coord_fixed() for fixed aspect ratio",
    "text": "Use coord_fixed() for fixed aspect ratio\n\n\nggplot(temps_wide, aes(`San Diego`, Houston)) +\n  geom_path()\n\n\n\n\n \n\n\n\n\n\n\n(Bad, x and y axis show the same values scaled differently)"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#use-coord_fixed-for-fixed-aspect-ratio-1",
    "href": "slides/coordinate-systems-axes.html#use-coord_fixed-for-fixed-aspect-ratio-1",
    "title": "Coordinate systems and axes",
    "section": "Use coord_fixed() for fixed aspect ratio",
    "text": "Use coord_fixed() for fixed aspect ratio\n\n\nggplot(temps_wide, aes(`San Diego`, Houston)) +\n  geom_path() +\n  coord_fixed()\n\n\n\n\n \n\n\n\n\n\n\n(Better, x and y axis are now scaled the same)"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#use-coord_fixed-for-fixed-aspect-ratio-2",
    "href": "slides/coordinate-systems-axes.html#use-coord_fixed-for-fixed-aspect-ratio-2",
    "title": "Coordinate systems and axes",
    "section": "Use coord_fixed() for fixed aspect ratio",
    "text": "Use coord_fixed() for fixed aspect ratio\n\n\nggplot(temps_wide, aes(`San Diego`, Houston)) +\n  geom_path() +\n  coord_fixed() +\n  scale_x_continuous(breaks = c(50, 60, 70), limits = c(50, 75))\n\n\n\n\n \n\n\n\n\n\n\n(Even better, similar axis ticks along both axes)"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#further-reading",
    "href": "slides/coordinate-systems-axes.html#further-reading",
    "title": "Coordinate systems and axes",
    "section": "Further reading",
    "text": "Further reading\n\nFundamentals of Data Visualization: Chapter 3: Coordinate systems and axes\nggplot2 reference documentation: Scales\nggplot2 reference documentation: Coordinate systems\nggplot2 book: Position scales\nggplot2 book: Coordinate systems"
  },
  {
    "objectID": "slides/data-wrangling-2.html#elementary-data-manipulations",
    "href": "slides/data-wrangling-2.html#elementary-data-manipulations",
    "title": "Data wrangling 2",
    "section": "Elementary data manipulations",
    "text": "Elementary data manipulations\n\n\nPrevious class:\n\nPick rows: filter()\nPick columns: select()\nSort rows: arrange()\nCount things: count()\nMake new columns: mutate()\n\n\nThis class:\n\n\nAnalyze subsets:group_by() and summarize()\nReshape:pivot_wider(), pivot_longer()\nCombine datasets:left_join(), inner_join(), ..."
  },
  {
    "objectID": "slides/data-wrangling-2.html#analyze-subsets-group_by-and-summarize",
    "href": "slides/data-wrangling-2.html#analyze-subsets-group_by-and-summarize",
    "title": "Data wrangling 2",
    "section": "Analyze subsets: group_by() and summarize()",
    "text": "Analyze subsets: group_by() and summarize()"
  },
  {
    "objectID": "slides/data-wrangling-2.html#example-application-of-grouping-counting",
    "href": "slides/data-wrangling-2.html#example-application-of-grouping-counting",
    "title": "Data wrangling 2",
    "section": "Example application of grouping: Counting",
    "text": "Example application of grouping: Counting\nPreviously, we counted like so:\n\n\nlibrary(palmerpenguins) # loads the `penguins` dataset\n\npenguins |&gt;\n  count(species)\n\n# A tibble: 3 × 2\n  species       n\n  &lt;fct&gt;     &lt;int&gt;\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n\n\n\n\nNow let’s do it the hard way . . ."
  },
  {
    "objectID": "slides/data-wrangling-2.html#example-application-of-grouping-counting-1",
    "href": "slides/data-wrangling-2.html#example-application-of-grouping-counting-1",
    "title": "Data wrangling 2",
    "section": "Example application of grouping: Counting",
    "text": "Example application of grouping: Counting\nLet’s go back to the raw data:\n\n\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "slides/data-wrangling-2.html#example-application-of-grouping-counting-2",
    "href": "slides/data-wrangling-2.html#example-application-of-grouping-counting-2",
    "title": "Data wrangling 2",
    "section": "Example application of grouping: Counting",
    "text": "Example application of grouping: Counting\nLet’s group it:\n\n\npenguins |&gt;\n  group_by(species)\n\n# A tibble: 344 × 8\n# Groups:   species [3]\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "slides/data-wrangling-2.html#example-application-of-grouping-counting-3",
    "href": "slides/data-wrangling-2.html#example-application-of-grouping-counting-3",
    "title": "Data wrangling 2",
    "section": "Example application of grouping: Counting",
    "text": "Example application of grouping: Counting\nAnd summarize:\n\n\npenguins |&gt;\n  group_by(species) |&gt;\n  summarize(\n    n = n()  # n() returns the number of observations per group\n  )\n\n# A tibble: 3 × 2\n  species       n\n  &lt;fct&gt;     &lt;int&gt;\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124"
  },
  {
    "objectID": "slides/data-wrangling-2.html#example-application-of-grouping-counting-4",
    "href": "slides/data-wrangling-2.html#example-application-of-grouping-counting-4",
    "title": "Data wrangling 2",
    "section": "Example application of grouping: Counting",
    "text": "Example application of grouping: Counting\nNow let’s group by multiple variables:\n\n\npenguins |&gt;\n  group_by(species, island)\n\n# A tibble: 344 × 8\n# Groups:   species, island [5]\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "slides/data-wrangling-2.html#example-application-of-grouping-counting-5",
    "href": "slides/data-wrangling-2.html#example-application-of-grouping-counting-5",
    "title": "Data wrangling 2",
    "section": "Example application of grouping: Counting",
    "text": "Example application of grouping: Counting\nAnd summarize:\n\n\npenguins |&gt;\n  group_by(species, island) |&gt;\n  summarize(\n    n = n()  # n() returns the number of observations per group\n  )\n\n# A tibble: 5 × 3\n# Groups:   species [3]\n  species   island        n\n  &lt;fct&gt;     &lt;fct&gt;     &lt;int&gt;\n1 Adelie    Biscoe       44\n2 Adelie    Dream        56\n3 Adelie    Torgersen    52\n4 Chinstrap Dream        68\n5 Gentoo    Biscoe      124"
  },
  {
    "objectID": "slides/data-wrangling-2.html#example-application-of-grouping-counting-6",
    "href": "slides/data-wrangling-2.html#example-application-of-grouping-counting-6",
    "title": "Data wrangling 2",
    "section": "Example application of grouping: Counting",
    "text": "Example application of grouping: Counting\ncount(...) is a short-cut for:group_by(...) |&gt; summarize(n = n())\n\n\n\n#\npenguins |&gt;\n  count(species)\n\n# A tibble: 3 × 2\n  species       n\n  &lt;fct&gt;     &lt;int&gt;\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n\n\n\n\npenguins |&gt;\n  group_by(species) |&gt;\n  summarize(n = n())\n\n# A tibble: 3 × 2\n  species       n\n  &lt;fct&gt;     &lt;int&gt;\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n\n\n\n\nThe output is exactly the same"
  },
  {
    "objectID": "slides/data-wrangling-2.html#performing-multiple-summaries-at-once",
    "href": "slides/data-wrangling-2.html#performing-multiple-summaries-at-once",
    "title": "Data wrangling 2",
    "section": "Performing multiple summaries at once",
    "text": "Performing multiple summaries at once\n\n\npenguins |&gt;\n  group_by(species) |&gt;\n  summarize(\n    n = n(),                                      # number of penguins\n    mean_mass = mean(body_mass_g),                # mean body mass\n    max_flipper_length = max(flipper_length_mm),  # max flipper length\n    percent_female = sum(sex == \"female\")/n()     # percent of female penguins\n  )\n\n\n\n# A tibble: 3 × 5\n  species       n mean_mass max_flipper_length percent_female\n  &lt;fct&gt;     &lt;int&gt;     &lt;dbl&gt;              &lt;int&gt;          &lt;dbl&gt;\n1 Adelie      152       NA                  NA           NA  \n2 Chinstrap    68     3733.                212            0.5\n3 Gentoo      124       NA                  NA           NA  \n\n\n\n\nEach statement in summarize() creates one new column\n\n\nBut why all the NAs?"
  },
  {
    "objectID": "slides/data-wrangling-2.html#performing-multiple-summaries-at-once-1",
    "href": "slides/data-wrangling-2.html#performing-multiple-summaries-at-once-1",
    "title": "Data wrangling 2",
    "section": "Performing multiple summaries at once",
    "text": "Performing multiple summaries at once\n\n\npenguins |&gt;\n  group_by(species) |&gt;\n  summarize(\n    n = n(),\n    mean_mass = mean(body_mass_g, na.rm = TRUE),\n    max_flipper_length = max(flipper_length_mm, na.rm = TRUE),\n    percent_female = sum(sex == \"female\", na.rm = TRUE)/sum(!is.na(sex))\n  )\n\n# A tibble: 3 × 5\n  species       n mean_mass max_flipper_length percent_female\n  &lt;fct&gt;     &lt;int&gt;     &lt;dbl&gt;              &lt;int&gt;          &lt;dbl&gt;\n1 Adelie      152     3701.                210          0.5  \n2 Chinstrap    68     3733.                212          0.5  \n3 Gentoo      124     5076.                231          0.487\n\n\n\n\nWe typically need to tell R how exactly NAs should be handled"
  },
  {
    "objectID": "slides/data-wrangling-2.html#reshape-pivot_wider-and-pivot_longer",
    "href": "slides/data-wrangling-2.html#reshape-pivot_wider-and-pivot_longer",
    "title": "Data wrangling 2",
    "section": "Reshape: pivot_wider() and pivot_longer()",
    "text": "Reshape: pivot_wider() and pivot_longer()"
  },
  {
    "objectID": "slides/data-wrangling-2.html#reshaping-example-making-a-wide-summary-table",
    "href": "slides/data-wrangling-2.html#reshaping-example-making-a-wide-summary-table",
    "title": "Data wrangling 2",
    "section": "Reshaping example: Making a wide summary table",
    "text": "Reshaping example: Making a wide summary table\n\n\npenguins |&gt;\n  count(species, island)\n\n# A tibble: 5 × 3\n  species   island        n\n  &lt;fct&gt;     &lt;fct&gt;     &lt;int&gt;\n1 Adelie    Biscoe       44\n2 Adelie    Dream        56\n3 Adelie    Torgersen    52\n4 Chinstrap Dream        68\n5 Gentoo    Biscoe      124"
  },
  {
    "objectID": "slides/data-wrangling-2.html#reshaping-example-making-a-wide-summary-table-1",
    "href": "slides/data-wrangling-2.html#reshaping-example-making-a-wide-summary-table-1",
    "title": "Data wrangling 2",
    "section": "Reshaping example: Making a wide summary table",
    "text": "Reshaping example: Making a wide summary table\n\n\npenguins |&gt;\n  count(species, island) |&gt;\n  pivot_wider(names_from = \"island\", values_from = \"n\")\n\n# A tibble: 3 × 4\n  species   Biscoe Dream Torgersen\n  &lt;fct&gt;      &lt;int&gt; &lt;int&gt;     &lt;int&gt;\n1 Adelie        44    56        52\n2 Chinstrap     NA    68        NA\n3 Gentoo       124    NA        NA\n\n\n\n\nThe NAs indicate cases that don’t exist"
  },
  {
    "objectID": "slides/data-wrangling-2.html#and-going-back-to-long-format",
    "href": "slides/data-wrangling-2.html#and-going-back-to-long-format",
    "title": "Data wrangling 2",
    "section": "And going back to long format",
    "text": "And going back to long format\n\n\npenguins_wide &lt;- penguins |&gt;\n  count(species, island) |&gt;\n  pivot_wider(names_from = \"island\", values_from = \"n\")\n\npenguins_wide |&gt; \n  pivot_longer(cols = -species, names_to = \"island\", values_to = \"n\")\n\n# A tibble: 9 × 3\n  species   island        n\n  &lt;fct&gt;     &lt;chr&gt;     &lt;int&gt;\n1 Adelie    Biscoe       44\n2 Adelie    Dream        56\n3 Adelie    Torgersen    52\n4 Chinstrap Biscoe       NA\n5 Chinstrap Dream        68\n6 Chinstrap Torgersen    NA\n7 Gentoo    Biscoe      124\n8 Gentoo    Dream        NA\n9 Gentoo    Torgersen    NA"
  },
  {
    "objectID": "slides/data-wrangling-2.html#and-going-back-to-long-format-1",
    "href": "slides/data-wrangling-2.html#and-going-back-to-long-format-1",
    "title": "Data wrangling 2",
    "section": "And going back to long format",
    "text": "And going back to long format\nColumn specifications work just like in select():\n\n\n# specify columns by subtraction\npenguins_wide |&gt; \n  pivot_longer(cols = -species, names_to = \"island\", values_to = \"n\")\n\n# A tibble: 9 × 3\n  species   island        n\n  &lt;fct&gt;     &lt;chr&gt;     &lt;int&gt;\n1 Adelie    Biscoe       44\n2 Adelie    Dream        56\n3 Adelie    Torgersen    52\n4 Chinstrap Biscoe       NA\n5 Chinstrap Dream        68\n6 Chinstrap Torgersen    NA\n7 Gentoo    Biscoe      124\n8 Gentoo    Dream        NA\n9 Gentoo    Torgersen    NA"
  },
  {
    "objectID": "slides/data-wrangling-2.html#and-going-back-to-long-format-2",
    "href": "slides/data-wrangling-2.html#and-going-back-to-long-format-2",
    "title": "Data wrangling 2",
    "section": "And going back to long format",
    "text": "And going back to long format\nColumn specifications work just like in select():\n\n\n# specify columns by explicit listing\npenguins_wide |&gt; \n  pivot_longer(cols = c(Biscoe, Dream, Torgersen), names_to = \"island\", values_to = \"n\")\n\n# A tibble: 9 × 3\n  species   island        n\n  &lt;fct&gt;     &lt;chr&gt;     &lt;int&gt;\n1 Adelie    Biscoe       44\n2 Adelie    Dream        56\n3 Adelie    Torgersen    52\n4 Chinstrap Biscoe       NA\n5 Chinstrap Dream        68\n6 Chinstrap Torgersen    NA\n7 Gentoo    Biscoe      124\n8 Gentoo    Dream        NA\n9 Gentoo    Torgersen    NA"
  },
  {
    "objectID": "slides/data-wrangling-2.html#and-going-back-to-long-format-3",
    "href": "slides/data-wrangling-2.html#and-going-back-to-long-format-3",
    "title": "Data wrangling 2",
    "section": "And going back to long format",
    "text": "And going back to long format\nColumn specifications work just like in select():\n\n\n# specify columns by range\npenguins_wide |&gt; \n  pivot_longer(cols = Biscoe:Torgersen, names_to = \"island\", values_to = \"n\")\n\n# A tibble: 9 × 3\n  species   island        n\n  &lt;fct&gt;     &lt;chr&gt;     &lt;int&gt;\n1 Adelie    Biscoe       44\n2 Adelie    Dream        56\n3 Adelie    Torgersen    52\n4 Chinstrap Biscoe       NA\n5 Chinstrap Dream        68\n6 Chinstrap Torgersen    NA\n7 Gentoo    Biscoe      124\n8 Gentoo    Dream        NA\n9 Gentoo    Torgersen    NA"
  },
  {
    "objectID": "slides/data-wrangling-2.html#we-use-joins-to-add-columns-from-one-table-into-another",
    "href": "slides/data-wrangling-2.html#we-use-joins-to-add-columns-from-one-table-into-another",
    "title": "Data wrangling 2",
    "section": "We use joins to add columns from one table into another",
    "text": "We use joins to add columns from one table into another"
  },
  {
    "objectID": "slides/data-wrangling-2.html#example-band-members-and-their-instruments",
    "href": "slides/data-wrangling-2.html#example-band-members-and-their-instruments",
    "title": "Data wrangling 2",
    "section": "Example: band members and their instruments",
    "text": "Example: band members and their instruments\n\n\n\n# some members of famous bands\nband_members\n\n# A tibble: 3 × 2\n  name  band   \n  &lt;chr&gt; &lt;chr&gt;  \n1 Mick  Stones \n2 John  Beatles\n3 Paul  Beatles\n\n\n\n\n# instruments played\nband_instruments\n\n# A tibble: 3 × 2\n  name  plays \n  &lt;chr&gt; &lt;chr&gt; \n1 John  guitar\n2 Paul  bass  \n3 Keith guitar\n\n\n\n\n\n\n# add right table to left\nleft_join(band_members, band_instruments)\n\n# A tibble: 3 × 3\n  name  band    plays \n  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n1 Mick  Stones  &lt;NA&gt;  \n2 John  Beatles guitar\n3 Paul  Beatles bass"
  },
  {
    "objectID": "slides/data-wrangling-2.html#example-band-members-and-their-instruments-1",
    "href": "slides/data-wrangling-2.html#example-band-members-and-their-instruments-1",
    "title": "Data wrangling 2",
    "section": "Example: band members and their instruments",
    "text": "Example: band members and their instruments\n\n\n\n# some members of famous bands\nband_members\n\n# A tibble: 3 × 2\n  name  band   \n  &lt;chr&gt; &lt;chr&gt;  \n1 Mick  Stones \n2 John  Beatles\n3 Paul  Beatles\n\n\n\n\n# instruments played\nband_instruments\n\n# A tibble: 3 × 2\n  name  plays \n  &lt;chr&gt; &lt;chr&gt; \n1 John  guitar\n2 Paul  bass  \n3 Keith guitar\n\n\n\n\n\n\n# add left table to right\nright_join(band_members, band_instruments)\n\n# A tibble: 3 × 3\n  name  band    plays \n  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n1 John  Beatles guitar\n2 Paul  Beatles bass  \n3 Keith &lt;NA&gt;    guitar"
  },
  {
    "objectID": "slides/data-wrangling-2.html#example-band-members-and-their-instruments-2",
    "href": "slides/data-wrangling-2.html#example-band-members-and-their-instruments-2",
    "title": "Data wrangling 2",
    "section": "Example: band members and their instruments",
    "text": "Example: band members and their instruments\n\n\n\n# some members of famous bands\nband_members\n\n# A tibble: 3 × 2\n  name  band   \n  &lt;chr&gt; &lt;chr&gt;  \n1 Mick  Stones \n2 John  Beatles\n3 Paul  Beatles\n\n\n\n\n# instruments played\nband_instruments\n\n# A tibble: 3 × 2\n  name  plays \n  &lt;chr&gt; &lt;chr&gt; \n1 John  guitar\n2 Paul  bass  \n3 Keith guitar\n\n\n\n\n\n\n# keep intersection only\ninner_join(band_members, band_instruments)\n\n# A tibble: 2 × 3\n  name  band    plays \n  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n1 John  Beatles guitar\n2 Paul  Beatles bass"
  },
  {
    "objectID": "slides/data-wrangling-2.html#example-band-members-and-their-instruments-3",
    "href": "slides/data-wrangling-2.html#example-band-members-and-their-instruments-3",
    "title": "Data wrangling 2",
    "section": "Example: band members and their instruments",
    "text": "Example: band members and their instruments\n\n\n\n# some members of famous bands\nband_members\n\n# A tibble: 3 × 2\n  name  band   \n  &lt;chr&gt; &lt;chr&gt;  \n1 Mick  Stones \n2 John  Beatles\n3 Paul  Beatles\n\n\n\n\n# instruments played\nband_instruments\n\n# A tibble: 3 × 2\n  name  plays \n  &lt;chr&gt; &lt;chr&gt; \n1 John  guitar\n2 Paul  bass  \n3 Keith guitar\n\n\n\n\n\n\n# merge all cases\nfull_join(band_members, band_instruments)\n\n# A tibble: 4 × 3\n  name  band    plays \n  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n1 Mick  Stones  &lt;NA&gt;  \n2 John  Beatles guitar\n3 Paul  Beatles bass  \n4 Keith &lt;NA&gt;    guitar"
  },
  {
    "objectID": "slides/data-wrangling-2.html#the-different-joins-at-a-glance",
    "href": "slides/data-wrangling-2.html#the-different-joins-at-a-glance",
    "title": "Data wrangling 2",
    "section": "The different joins at a glance",
    "text": "The different joins at a glance"
  },
  {
    "objectID": "slides/data-wrangling-2.html#the-different-joins-at-a-glance-1",
    "href": "slides/data-wrangling-2.html#the-different-joins-at-a-glance-1",
    "title": "Data wrangling 2",
    "section": "The different joins at a glance",
    "text": "The different joins at a glance\n\n\n\n\nTip: In case of doubt, use left_join()\n\nIn my experience, left_join() is the right choice 70–80% of the time"
  },
  {
    "objectID": "slides/data-wrangling-2.html#further-reading",
    "href": "slides/data-wrangling-2.html#further-reading",
    "title": "Data wrangling 2",
    "section": "Further reading",
    "text": "Further reading\n\nR for Data Science: Chapter 5.6: Grouped summaries with summarise()\nR for Data Science: Chapter 12.3: Pivoting\nR for Data Science: Chapter 13: Relational data\ndplyr documentation: Grouped data\ntidyr documentation: Pivoting\ndplyr documentation: Mutating joins"
  },
  {
    "objectID": "slides/introduction.html#why-data-visualization",
    "href": "slides/introduction.html#why-data-visualization",
    "title": "Introduction",
    "section": "Why Data Visualization?",
    "text": "Why Data Visualization?"
  },
  {
    "objectID": "slides/introduction.html#why-data-visualization-1",
    "href": "slides/introduction.html#why-data-visualization-1",
    "title": "Introduction",
    "section": "Why Data Visualization?",
    "text": "Why Data Visualization?"
  },
  {
    "objectID": "slides/introduction.html#why-r",
    "href": "slides/introduction.html#why-r",
    "title": "Introduction",
    "section": "Why R?",
    "text": "Why R?"
  },
  {
    "objectID": "slides/introduction.html#why-me",
    "href": "slides/introduction.html#why-me",
    "title": "Introduction",
    "section": "Why me?",
    "text": "Why me?\n\n\n\nhttps://clauswilke.com/dataviz"
  },
  {
    "objectID": "slides/introduction.html#why-me-1",
    "href": "slides/introduction.html#why-me-1",
    "title": "Introduction",
    "section": "Why me?",
    "text": "Why me?"
  },
  {
    "objectID": "slides/introduction.html#we-will-use-quarto-for-all-assignments",
    "href": "slides/introduction.html#we-will-use-quarto-for-all-assignments",
    "title": "Introduction",
    "section": "We will use Quarto for all assignments",
    "text": "We will use Quarto for all assignments\n\n\n\n\nhttps://quarto.org/"
  },
  {
    "objectID": "slides/introduction.html#edupod-login-httpsedupod.cns.utexas.edu",
    "href": "slides/introduction.html#edupod-login-httpsedupod.cns.utexas.edu",
    "title": "Introduction",
    "section": "Edupod login: https://edupod.cns.utexas.edu",
    "text": "Edupod login: https://edupod.cns.utexas.edu"
  },
  {
    "objectID": "slides/introduction.html#edupod-login-httpsedupod.cns.utexas.edu-1",
    "href": "slides/introduction.html#edupod-login-httpsedupod.cns.utexas.edu-1",
    "title": "Introduction",
    "section": "Edupod login: https://edupod.cns.utexas.edu",
    "text": "Edupod login: https://edupod.cns.utexas.edu"
  },
  {
    "objectID": "slides/introduction.html#edupod-login-httpsedupod.cns.utexas.edu-2",
    "href": "slides/introduction.html#edupod-login-httpsedupod.cns.utexas.edu-2",
    "title": "Introduction",
    "section": "Edupod login: https://edupod.cns.utexas.edu",
    "text": "Edupod login: https://edupod.cns.utexas.edu"
  },
  {
    "objectID": "slides/introduction.html#working-with-quarto-documents",
    "href": "slides/introduction.html#working-with-quarto-documents",
    "title": "Introduction",
    "section": "Working with Quarto documents",
    "text": "Working with Quarto documents"
  },
  {
    "objectID": "slides/introduction.html#working-with-quarto-documents-1",
    "href": "slides/introduction.html#working-with-quarto-documents-1",
    "title": "Introduction",
    "section": "Working with Quarto documents",
    "text": "Working with Quarto documents"
  },
  {
    "objectID": "slides/introduction.html#working-with-quarto-documents-2",
    "href": "slides/introduction.html#working-with-quarto-documents-2",
    "title": "Introduction",
    "section": "Working with Quarto documents",
    "text": "Working with Quarto documents"
  },
  {
    "objectID": "slides/introduction.html#working-with-quarto-documents-3",
    "href": "slides/introduction.html#working-with-quarto-documents-3",
    "title": "Introduction",
    "section": "Working with Quarto documents",
    "text": "Working with Quarto documents"
  },
  {
    "objectID": "slides/introduction.html#working-with-quarto-documents-4",
    "href": "slides/introduction.html#working-with-quarto-documents-4",
    "title": "Introduction",
    "section": "Working with Quarto documents",
    "text": "Working with Quarto documents"
  },
  {
    "objectID": "slides/introduction.html#use-export-to-download-pdfs",
    "href": "slides/introduction.html#use-export-to-download-pdfs",
    "title": "Introduction",
    "section": "Use “Export” to download PDFs",
    "text": "Use “Export” to download PDFs"
  },
  {
    "objectID": "slides/introduction.html#the-source-for-the-class-website-is-on-github",
    "href": "slides/introduction.html#the-source-for-the-class-website-is-on-github",
    "title": "Introduction",
    "section": "The source for the class website is on GitHub",
    "text": "The source for the class website is on GitHub"
  },
  {
    "objectID": "slides/introduction.html#the-source-for-the-class-website-is-on-github-1",
    "href": "slides/introduction.html#the-source-for-the-class-website-is-on-github-1",
    "title": "Introduction",
    "section": "The source for the class website is on GitHub",
    "text": "The source for the class website is on GitHub"
  },
  {
    "objectID": "slides/introduction.html#the-source-for-the-class-website-is-on-github-2",
    "href": "slides/introduction.html#the-source-for-the-class-website-is-on-github-2",
    "title": "Introduction",
    "section": "The source for the class website is on GitHub",
    "text": "The source for the class website is on GitHub\n\n\n\n\nhttps://github.com/wilkelab/SDS366"
  },
  {
    "objectID": "slides/introduction.html#press-e-to-save-slides-as-pdf",
    "href": "slides/introduction.html#press-e-to-save-slides-as-pdf",
    "title": "Introduction",
    "section": "Press ‘e’ to save slides as PDF",
    "text": "Press ‘e’ to save slides as PDF\n\n\n\n(Works best on Chrome)"
  },
  {
    "objectID": "slides/introduction.html#further-reading",
    "href": "slides/introduction.html#further-reading",
    "title": "Introduction",
    "section": "Further reading",
    "text": "Further reading\n\nFundamentals of Data Visualization: Read the book online\nQuarto docs: Comprehensive guide"
  },
  {
    "objectID": "slides/visualizing-amounts.html#many-datasets-contain-simple-amounts",
    "href": "slides/visualizing-amounts.html#many-datasets-contain-simple-amounts",
    "title": "Visualizing amounts",
    "section": "Many datasets contain simple amounts",
    "text": "Many datasets contain simple amounts\n\n\nExample: Highest grossing movies Dec. 2017\n\n\n\n\n\nrank\ntitle\namount\n\n\n\n\n1\nStar Wars\n71.57\n\n\n2\nJumanji\n36.17\n\n\n3\nPitch Perfect 3\n19.93\n\n\n4\nGreatest Showman\n8.81\n\n\n5\nFerdinand\n7.32\n\n\n\n\n\n\n\n\nData source: Box Office Mojo"
  },
  {
    "objectID": "slides/visualizing-amounts.html#we-can-visualize-amounts-with-bar-plots",
    "href": "slides/visualizing-amounts.html#we-can-visualize-amounts-with-bar-plots",
    "title": "Visualizing amounts",
    "section": "We can visualize amounts with bar plots",
    "text": "We can visualize amounts with bar plots"
  },
  {
    "objectID": "slides/visualizing-amounts.html#bars-can-also-run-horizontally",
    "href": "slides/visualizing-amounts.html#bars-can-also-run-horizontally",
    "title": "Visualizing amounts",
    "section": "Bars can also run horizontally",
    "text": "Bars can also run horizontally"
  },
  {
    "objectID": "slides/visualizing-amounts.html#avoid-rotated-axis-labels",
    "href": "slides/visualizing-amounts.html#avoid-rotated-axis-labels",
    "title": "Visualizing amounts",
    "section": "Avoid rotated axis labels",
    "text": "Avoid rotated axis labels"
  },
  {
    "objectID": "slides/visualizing-amounts.html#avoid-rotated-axis-labels-1",
    "href": "slides/visualizing-amounts.html#avoid-rotated-axis-labels-1",
    "title": "Visualizing amounts",
    "section": "Avoid rotated axis labels",
    "text": "Avoid rotated axis labels"
  },
  {
    "objectID": "slides/visualizing-amounts.html#pay-attention-to-the-order-of-the-bars",
    "href": "slides/visualizing-amounts.html#pay-attention-to-the-order-of-the-bars",
    "title": "Visualizing amounts",
    "section": "Pay attention to the order of the bars",
    "text": "Pay attention to the order of the bars"
  },
  {
    "objectID": "slides/visualizing-amounts.html#pay-attention-to-the-order-of-the-bars-1",
    "href": "slides/visualizing-amounts.html#pay-attention-to-the-order-of-the-bars-1",
    "title": "Visualizing amounts",
    "section": "Pay attention to the order of the bars",
    "text": "Pay attention to the order of the bars"
  },
  {
    "objectID": "slides/visualizing-amounts.html#we-can-use-dots-instead-of-bars",
    "href": "slides/visualizing-amounts.html#we-can-use-dots-instead-of-bars",
    "title": "Visualizing amounts",
    "section": "We can use dots instead of bars",
    "text": "We can use dots instead of bars"
  },
  {
    "objectID": "slides/visualizing-amounts.html#dots-are-preferable-if-we-want-to-truncate-the-axes",
    "href": "slides/visualizing-amounts.html#dots-are-preferable-if-we-want-to-truncate-the-axes",
    "title": "Visualizing amounts",
    "section": "Dots are preferable if we want to truncate the axes",
    "text": "Dots are preferable if we want to truncate the axes"
  },
  {
    "objectID": "slides/visualizing-amounts.html#dots-are-preferable-if-we-want-to-truncate-the-axes-1",
    "href": "slides/visualizing-amounts.html#dots-are-preferable-if-we-want-to-truncate-the-axes-1",
    "title": "Visualizing amounts",
    "section": "Dots are preferable if we want to truncate the axes",
    "text": "Dots are preferable if we want to truncate the axes\n\n\n\n\n\n \n\n\n\n\n\nBar lengths donot accurately represent thedata values"
  },
  {
    "objectID": "slides/visualizing-amounts.html#dots-are-preferable-if-we-want-to-truncate-the-axes-2",
    "href": "slides/visualizing-amounts.html#dots-are-preferable-if-we-want-to-truncate-the-axes-2",
    "title": "Visualizing amounts",
    "section": "Dots are preferable if we want to truncate the axes",
    "text": "Dots are preferable if we want to truncate the axes\n\n\n\n\n\n \n\n\n\n\n\nKey featuresof the dataare obscured"
  },
  {
    "objectID": "slides/visualizing-amounts.html#dots-are-preferable-if-we-want-to-truncate-the-axes-3",
    "href": "slides/visualizing-amounts.html#dots-are-preferable-if-we-want-to-truncate-the-axes-3",
    "title": "Visualizing amounts",
    "section": "Dots are preferable if we want to truncate the axes",
    "text": "Dots are preferable if we want to truncate the axes"
  },
  {
    "objectID": "slides/visualizing-amounts.html#we-use-grouped-bars-for-higher-dimensional-datasets",
    "href": "slides/visualizing-amounts.html#we-use-grouped-bars-for-higher-dimensional-datasets",
    "title": "Visualizing amounts",
    "section": "We use grouped bars for higher-dimensional datasets",
    "text": "We use grouped bars for higher-dimensional datasets\n\n\n\n\n\n\n \n\n\n\n\n\nData source: United States Census Bureau, 2016"
  },
  {
    "objectID": "slides/visualizing-amounts.html#we-are-free-to-choose-by-which-variable-to-group",
    "href": "slides/visualizing-amounts.html#we-are-free-to-choose-by-which-variable-to-group",
    "title": "Visualizing amounts",
    "section": "We are free to choose by which variable to group",
    "text": "We are free to choose by which variable to group\n\n\n\n\n\n\n \n\n\n\n\n\nData source: United States Census Bureau, 2016"
  },
  {
    "objectID": "slides/visualizing-amounts.html#we-can-also-use-multiple-plot-panels-facets",
    "href": "slides/visualizing-amounts.html#we-can-also-use-multiple-plot-panels-facets",
    "title": "Visualizing amounts",
    "section": "We can also use multiple plot panels (facets)",
    "text": "We can also use multiple plot panels (facets)\n\n\n\n\n\n \n\n\n\n\n\nData source: United States Census Bureau, 2016"
  },
  {
    "objectID": "slides/visualizing-amounts.html#dataset-highest-grossing-movies-dec.-2017",
    "href": "slides/visualizing-amounts.html#dataset-highest-grossing-movies-dec.-2017",
    "title": "Visualizing amounts",
    "section": "Dataset: Highest grossing movies Dec. 2017",
    "text": "Dataset: Highest grossing movies Dec. 2017\n\n# Data from Box Office Mojo for Dec. 22-24, 2017. \nboxoffice &lt;- tibble(\n  rank = 1:5,\n  title = c(\n    \"Star Wars\", \"Jumanji\", \"Pitch Perfect 3\",\n    \"Greatest Showman\", \"Ferdinand\"\n  ),\n  amount = c(71.57, 36.17, 19.93, 8.81, 7.32) # million USD\n)\n\nboxoffice\n\n# A tibble: 5 × 3\n   rank title            amount\n  &lt;int&gt; &lt;chr&gt;             &lt;dbl&gt;\n1     1 Star Wars         71.6 \n2     2 Jumanji           36.2 \n3     3 Pitch Perfect 3   19.9 \n4     4 Greatest Showman   8.81\n5     5 Ferdinand          7.32"
  },
  {
    "objectID": "slides/visualizing-amounts.html#visualize-as-a-bar-plot",
    "href": "slides/visualizing-amounts.html#visualize-as-a-bar-plot",
    "title": "Visualizing amounts",
    "section": "Visualize as a bar plot",
    "text": "Visualize as a bar plot\n\nggplot(boxoffice, aes(title, amount)) +\n  geom_col()  # \"col\" stands for column"
  },
  {
    "objectID": "slides/visualizing-amounts.html#order-by-data-value",
    "href": "slides/visualizing-amounts.html#order-by-data-value",
    "title": "Visualizing amounts",
    "section": "Order by data value",
    "text": "Order by data value\n\nggplot(boxoffice, aes(fct_reorder(title, amount), amount)) +\n  geom_col()  # \"col\" stands for column"
  },
  {
    "objectID": "slides/visualizing-amounts.html#order-by-data-value-descending",
    "href": "slides/visualizing-amounts.html#order-by-data-value-descending",
    "title": "Visualizing amounts",
    "section": "Order by data value, descending",
    "text": "Order by data value, descending\n\nggplot(boxoffice, aes(fct_reorder(title, -amount), amount)) +\n  geom_col() + \n  xlab(NULL) # remove x axis label"
  },
  {
    "objectID": "slides/visualizing-amounts.html#flip-x-and-y-set-custom-x-axis-label",
    "href": "slides/visualizing-amounts.html#flip-x-and-y-set-custom-x-axis-label",
    "title": "Visualizing amounts",
    "section": "Flip x and y, set custom x axis label",
    "text": "Flip x and y, set custom x axis label\n\nggplot(boxoffice, aes(amount, fct_reorder(title, amount))) +\n  geom_col() +\n  xlab(\"amount (in million USD)\") +\n  ylab(NULL)"
  },
  {
    "objectID": "slides/visualizing-amounts.html#example-visualize-number-of-penguins-per-species",
    "href": "slides/visualizing-amounts.html#example-visualize-number-of-penguins-per-species",
    "title": "Visualizing amounts",
    "section": "Example: Visualize number of penguins per species",
    "text": "Example: Visualize number of penguins per species\n\n\nlibrary(palmerpenguins)\n\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "slides/visualizing-amounts.html#use-geom_bar-to-count-before-plotting",
    "href": "slides/visualizing-amounts.html#use-geom_bar-to-count-before-plotting",
    "title": "Visualizing amounts",
    "section": "Use geom_bar() to count before plotting",
    "text": "Use geom_bar() to count before plotting\n\nggplot(penguins, aes(y = species)) + # no x aesthetic needed\n  geom_bar()"
  },
  {
    "objectID": "slides/visualizing-amounts.html#getting-the-bars-into-the-right-order",
    "href": "slides/visualizing-amounts.html#getting-the-bars-into-the-right-order",
    "title": "Visualizing amounts",
    "section": "Getting the bars into the right order",
    "text": "Getting the bars into the right order\n\nOption 1: Manually, using fct_relevel()\n\nggplot(penguins) +\n  aes(y = fct_relevel(species, \"Chinstrap\", \"Gentoo\", \"Adelie\")) +\n  geom_bar() +\n  ylab(NULL)"
  },
  {
    "objectID": "slides/visualizing-amounts.html#getting-the-bars-into-the-right-order-1",
    "href": "slides/visualizing-amounts.html#getting-the-bars-into-the-right-order-1",
    "title": "Visualizing amounts",
    "section": "Getting the bars into the right order",
    "text": "Getting the bars into the right order\nOption 2: Using fct_rev() and fct_infreq() from the forcats package\n\nggplot(penguins) +\n  aes(y = fct_rev(fct_infreq(species))) +\n  geom_bar() +\n  ylab(NULL)"
  },
  {
    "objectID": "slides/visualizing-amounts.html#display-counts-by-species-and-sex",
    "href": "slides/visualizing-amounts.html#display-counts-by-species-and-sex",
    "title": "Visualizing amounts",
    "section": "Display counts by species and sex",
    "text": "Display counts by species and sex\n\nggplot(penguins, aes(sex, fill = species)) +\n  geom_bar()"
  },
  {
    "objectID": "slides/visualizing-amounts.html#remove-missing-values-nas",
    "href": "slides/visualizing-amounts.html#remove-missing-values-nas",
    "title": "Visualizing amounts",
    "section": "Remove missing values (NAs)",
    "text": "Remove missing values (NAs)\n\n# remove all rows with any missing values\npenguins2 &lt;- na.omit(penguins)\n\nggplot(penguins2, aes(sex, fill = species)) +\n  geom_bar()"
  },
  {
    "objectID": "slides/visualizing-amounts.html#positions-define-how-subgroups-are-shown",
    "href": "slides/visualizing-amounts.html#positions-define-how-subgroups-are-shown",
    "title": "Visualizing amounts",
    "section": "Positions define how subgroups are shown",
    "text": "Positions define how subgroups are shown\nposition = \"dodge\": Place bars for subgroups side-by-side\n\n\nggplot(penguins2, aes(sex, fill = species)) +\n  geom_bar(position = \"dodge\")"
  },
  {
    "objectID": "slides/visualizing-amounts.html#positions-define-how-subgroups-are-shown-1",
    "href": "slides/visualizing-amounts.html#positions-define-how-subgroups-are-shown-1",
    "title": "Visualizing amounts",
    "section": "Positions define how subgroups are shown",
    "text": "Positions define how subgroups are shown\nposition = \"stack\": Place bars for subgroups on top of each other\n\n\nggplot(penguins2, aes(sex, fill = species)) +\n  geom_bar(position = \"stack\")"
  },
  {
    "objectID": "slides/visualizing-amounts.html#positions-define-how-subgroups-are-shown-2",
    "href": "slides/visualizing-amounts.html#positions-define-how-subgroups-are-shown-2",
    "title": "Visualizing amounts",
    "section": "Positions define how subgroups are shown",
    "text": "Positions define how subgroups are shown\nposition = \"fill\": Like \"stack\", but scale to 100%\n\n\nggplot(penguins2, aes(sex, fill = species)) +\n  geom_bar(position = \"fill\")"
  },
  {
    "objectID": "slides/visualizing-amounts.html#further-reading",
    "href": "slides/visualizing-amounts.html#further-reading",
    "title": "Visualizing amounts",
    "section": "Further reading",
    "text": "Further reading\n\nFundamentals of Data Visualization: Chapter 6: Visualizing amounts\nData Visualization—A Practical Introduction: Chapter 4.4: Geoms can transform data\nggplot2 reference documentation: geom_bar(), geom_col()\nggplot2 reference documentation: position_stack(), position_fill()"
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#reminder-density-estimates-visualize-distributions",
    "href": "slides/visualizing-distributions-2.html#reminder-density-estimates-visualize-distributions",
    "title": "Visualizing distributions 2",
    "section": "Reminder: Density estimates visualize distributions",
    "text": "Reminder: Density estimates visualize distributions\n\n\nMean temperatures in Lincoln, NE, in January 2016:\n\n\n\n\n\ndate\nmean temp\n\n\n\n\n2016-01-01\n24\n\n\n2016-01-02\n23\n\n\n2016-01-03\n23\n\n\n2016-01-04\n17\n\n\n2016-01-05\n29\n\n\n2016-01-06\n33\n\n\n2016-01-07\n30\n\n\n2016-01-08\n25\n\n\n2016-01-09\n9\n\n\n2016-01-10\n11\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\nHow can we compare distributions across months?"
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#a-bad-idea-many-overlapping-density-plots",
    "href": "slides/visualizing-distributions-2.html#a-bad-idea-many-overlapping-density-plots",
    "title": "Visualizing distributions 2",
    "section": "A bad idea: Many overlapping density plots",
    "text": "A bad idea: Many overlapping density plots"
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#another-bad-idea-stacked-density-plots",
    "href": "slides/visualizing-distributions-2.html#another-bad-idea-stacked-density-plots",
    "title": "Visualizing distributions 2",
    "section": "Another bad idea: Stacked density plots",
    "text": "Another bad idea: Stacked density plots"
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#somewhat-better-small-multiples",
    "href": "slides/visualizing-distributions-2.html#somewhat-better-small-multiples",
    "title": "Visualizing distributions 2",
    "section": "Somewhat better: Small multiples",
    "text": "Somewhat better: Small multiples"
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#instead-show-values-along-y-conditions-along-x",
    "href": "slides/visualizing-distributions-2.html#instead-show-values-along-y-conditions-along-x",
    "title": "Visualizing distributions 2",
    "section": "Instead: Show values along y, conditions along x",
    "text": "Instead: Show values along y, conditions along x\n\n\n\n\n\n \n\n\n\n\n\nA boxplot is a crude way of visualizing a distribution."
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#how-to-read-a-boxplot",
    "href": "slides/visualizing-distributions-2.html#how-to-read-a-boxplot",
    "title": "Visualizing distributions 2",
    "section": "How to read a boxplot",
    "text": "How to read a boxplot"
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#if-you-like-density-plots-consider-violins",
    "href": "slides/visualizing-distributions-2.html#if-you-like-density-plots-consider-violins",
    "title": "Visualizing distributions 2",
    "section": "If you like density plots, consider violins",
    "text": "If you like density plots, consider violins\n\n\n\n\n\n \n\n\n\n\n\nA violin plot is a density plot rotated 90 degrees and then mirrored."
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#how-to-read-a-violin-plot",
    "href": "slides/visualizing-distributions-2.html#how-to-read-a-violin-plot",
    "title": "Visualizing distributions 2",
    "section": "How to read a violin plot",
    "text": "How to read a violin plot"
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#for-small-datasets-you-can-also-use-a-strip-chart",
    "href": "slides/visualizing-distributions-2.html#for-small-datasets-you-can-also-use-a-strip-chart",
    "title": "Visualizing distributions 2",
    "section": "For small datasets, you can also use a strip chart",
    "text": "For small datasets, you can also use a strip chart\nAdvantage: Can see raw data points instead of abstract representation.\n\n\n\n\n\n\n \n\n\n\n\n\n\nHorizontal jittering may be necessary to avoid overlapping points."
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#for-small-datasets-you-can-also-use-a-strip-chart-1",
    "href": "slides/visualizing-distributions-2.html#for-small-datasets-you-can-also-use-a-strip-chart-1",
    "title": "Visualizing distributions 2",
    "section": "For small datasets, you can also use a strip chart",
    "text": "For small datasets, you can also use a strip chart\nAdvantage: Can see raw data points instead of abstract representation.\n\n\n\n\n\n \n\n\n\n\n\nHorizontal jittering may be necessary to avoid overlapping points."
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#for-small-datasets-you-can-also-use-a-strip-chart-2",
    "href": "slides/visualizing-distributions-2.html#for-small-datasets-you-can-also-use-a-strip-chart-2",
    "title": "Visualizing distributions 2",
    "section": "For small datasets, you can also use a strip chart",
    "text": "For small datasets, you can also use a strip chart\nAdvantage: Can see raw data points instead of abstract representation.\n\n\n\n\n\n \n\n\n\n\n\nHorizontal jittering may be necessary to avoid overlapping points."
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#we-can-also-jitter-points-into-violins",
    "href": "slides/visualizing-distributions-2.html#we-can-also-jitter-points-into-violins",
    "title": "Visualizing distributions 2",
    "section": "We can also jitter points into violins",
    "text": "We can also jitter points into violins\n\n\n\n\n\n \n\n\n\n\n\nSuch plots are called sina plots, to honor Sina Hadi Sohi."
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#but-maybe-theres-hope-for-overlapping-density-plots",
    "href": "slides/visualizing-distributions-2.html#but-maybe-theres-hope-for-overlapping-density-plots",
    "title": "Visualizing distributions 2",
    "section": "But maybe there’s hope for overlapping density plots?",
    "text": "But maybe there’s hope for overlapping density plots?\n\n\n\n\n\n \n\n\n\n\n\nHow about we stagger the densities vertically?"
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#vertically-staggered-density-plots-are-called-ridgelines",
    "href": "slides/visualizing-distributions-2.html#vertically-staggered-density-plots-are-called-ridgelines",
    "title": "Visualizing distributions 2",
    "section": "Vertically staggered density plots are called ridgelines",
    "text": "Vertically staggered density plots are called ridgelines\n\n\n\n\n\n \n\n\n\n\n\nNotice the single fill color. More colors would be distracting."
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#getting-the-data",
    "href": "slides/visualizing-distributions-2.html#getting-the-data",
    "title": "Visualizing distributions 2",
    "section": "Getting the data",
    "text": "Getting the data\n\nAll examples will use the lincoln_temps dataset:\n\nlincoln_temps &lt;- readRDS(url(\"https://wilkelab.org/SDS366/datasets/lincoln_temps.rds\"))\n\nlincoln_temps\n\n# A tibble: 366 × 4\n   date       month month_long mean_temp\n   &lt;date&gt;     &lt;fct&gt; &lt;fct&gt;          &lt;int&gt;\n 1 2016-01-01 Jan   January           24\n 2 2016-01-02 Jan   January           23\n 3 2016-01-03 Jan   January           23\n 4 2016-01-04 Jan   January           17\n 5 2016-01-05 Jan   January           29\n 6 2016-01-06 Jan   January           33\n 7 2016-01-07 Jan   January           30\n 8 2016-01-08 Jan   January           25\n 9 2016-01-09 Jan   January            9\n10 2016-01-10 Jan   January           11\n# ℹ 356 more rows"
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#making-boxplots-violins-etc.-in-ggplot2-1",
    "href": "slides/visualizing-distributions-2.html#making-boxplots-violins-etc.-in-ggplot2-1",
    "title": "Visualizing distributions 2",
    "section": "Making boxplots, violins, etc. in ggplot2",
    "text": "Making boxplots, violins, etc. in ggplot2\n\n\n\n\n\n\n\n\n\nPlot type\nGeom\nNotes\n\n\n\n\nboxplot\ngeom_boxplot()\n\n\n\nviolin plot\ngeom_violin()\n\n\n\nstrip chart\ngeom_point()\nJittering requires position_jitter()\n\n\nsina plot\ngeom_sina()\nFrom package ggforce\n\n\nridgeline\ngeom_density_ridges()\nFrom package ggridges"
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#examples-boxplot",
    "href": "slides/visualizing-distributions-2.html#examples-boxplot",
    "title": "Visualizing distributions 2",
    "section": "Examples: Boxplot",
    "text": "Examples: Boxplot\n\n\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_boxplot(fill = \"skyblue\")"
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#examples-violins",
    "href": "slides/visualizing-distributions-2.html#examples-violins",
    "title": "Visualizing distributions 2",
    "section": "Examples: Violins",
    "text": "Examples: Violins\n\n\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_violin(fill = \"skyblue\")"
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#examples-strip-chart-no-jitter",
    "href": "slides/visualizing-distributions-2.html#examples-strip-chart-no-jitter",
    "title": "Visualizing distributions 2",
    "section": "Examples: Strip chart (no jitter)",
    "text": "Examples: Strip chart (no jitter)\n\n\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_point(size = 0.75)  # reduce point size to minimize overplotting"
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#examples-strip-chart-w-jitter",
    "href": "slides/visualizing-distributions-2.html#examples-strip-chart-w-jitter",
    "title": "Visualizing distributions 2",
    "section": "Examples: Strip chart (w/ jitter)",
    "text": "Examples: Strip chart (w/ jitter)\n\n\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_point(size = 0.75,  # reduce point size to minimize overplotting \n    position = position_jitter(\n      width = 0.15,  # amount of jitter in horizontal direction\n      height = 0     # amount of jitter in vertical direction (0 = none)\n    )\n  )"
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#examples-sina-plot",
    "href": "slides/visualizing-distributions-2.html#examples-sina-plot",
    "title": "Visualizing distributions 2",
    "section": "Examples: Sina plot",
    "text": "Examples: Sina plot\n\n\nlibrary(ggforce) # for geom_sina()\n\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_violin(fill = \"skyblue\", color = NA) + # violins in background\n  geom_sina(size = 0.75) # sina jittered points in foreground"
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#examples-ridgeline-plot",
    "href": "slides/visualizing-distributions-2.html#examples-ridgeline-plot",
    "title": "Visualizing distributions 2",
    "section": "Examples: Ridgeline plot",
    "text": "Examples: Ridgeline plot\n\n\nlibrary(ggridges) # for geom_density_ridges\n\nggplot(lincoln_temps, aes(x = mean_temp, y = month_long)) +\n  geom_density_ridges()"
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#further-reading",
    "href": "slides/visualizing-distributions-2.html#further-reading",
    "title": "Visualizing distributions 2",
    "section": "Further reading",
    "text": "Further reading\n\nFundamentals of Data Visualization: Chapter 7: Visualizing many distributions at once\nggplot2 reference documentation: geom_boxplot(), geom_violin(), position_jitter()\nggforce reference documentation: geom_sina()\nggridges reference documentation: geom_density_ridges()"
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "Title: SDS 366 Data Visualization in R Semester: Spring 2025 Unique: 57785, TTH 5:00pm to 6:30pm, FAC 21\nInstructor: Claus O. Wilke Email: wilke@austin.utexas.edu Office Hours: Mon. 9am–10am (open Zoom), Thurs. 10am–11am (open Zoom), or by appointment\nTeaching Assistant: Aaron Feller Email: aaron.feller@utexas.edu Office Hours: Wed. 2:30pm–3:30pm (open Zoom), Thurs. 3pm–4pm (open Zoom), or by appointment"
  },
  {
    "objectID": "syllabus.html#course-title-and-instructor",
    "href": "syllabus.html#course-title-and-instructor",
    "title": "Syllabus",
    "section": "",
    "text": "Title: SDS 366 Data Visualization in R Semester: Spring 2025 Unique: 57785, TTH 5:00pm to 6:30pm, FAC 21\nInstructor: Claus O. Wilke Email: wilke@austin.utexas.edu Office Hours: Mon. 9am–10am (open Zoom), Thurs. 10am–11am (open Zoom), or by appointment\nTeaching Assistant: Aaron Feller Email: aaron.feller@utexas.edu Office Hours: Wed. 2:30pm–3:30pm (open Zoom), Thurs. 3pm–4pm (open Zoom), or by appointment"
  },
  {
    "objectID": "syllabus.html#purpose-and-contents-of-the-class",
    "href": "syllabus.html#purpose-and-contents-of-the-class",
    "title": "Syllabus",
    "section": "Purpose and contents of the class",
    "text": "Purpose and contents of the class\nIn this class, students will learn how to visualize data sets and how to reason about and communicate with data visualizations. A substantial component of this class will be dedicated to learning how to program in R. In addition, students will learn how to compile analyses and visualizations into reports, how to make the reports reproducible, and how to post reports on a website or blog."
  },
  {
    "objectID": "syllabus.html#prerequisites",
    "href": "syllabus.html#prerequisites",
    "title": "Syllabus",
    "section": "Prerequisites",
    "text": "Prerequisites\nThe class requires no prior knowledge of programming. However, students are expected to have successfully completed an introductory statistics class taught with R, such as SDS 320E, and they are expected to have some basic familiarity with the statistical language R."
  },
  {
    "objectID": "syllabus.html#textbook",
    "href": "syllabus.html#textbook",
    "title": "Syllabus",
    "section": "Textbook",
    "text": "Textbook\nThis class draws heavily from materials presented in the following book:\n\nClaus O. Wilke. Fundamentals of Data Visualization. O’Reilly Media, 2019.\n\nAdditionally, we will also make use of the following books:\n\nHadley Wickham, Danielle Navarro, and Thomas Lin Pedersen. ggplot2: Elegant Graphics for Data Analysis, 3rd ed. Springer, to appear.\nKieran Healy. Data Visualization: A Practical Introduction. Princeton University Press, 2018.\n\nAll these books are freely available online and you do not need to purchase a physical copy of either book to succeed in this class."
  },
  {
    "objectID": "syllabus.html#topics-covered",
    "href": "syllabus.html#topics-covered",
    "title": "Syllabus",
    "section": "Topics covered",
    "text": "Topics covered\n\n\n\n\n\n\n\n\nClass\nTopic\nCoding concepts covered\n\n\n\n\n1.\nIntroduction, reproducible workflows\nRStudio setup online, Quarto\n\n\n2.\nAesthetic mappings\nggplot2 quickstart\n\n\n3.\nVisualizing amounts, telling a story\ngeom_col(), geom_point(), position adjustments\n\n\n4.\nCoordinate systems and axes\ncoords and position scales\n\n\n5.\nVisualizing distributions 1\nstats, geom_density(), geom_histogram()\n\n\n6.\nVisualizing distributions 2\nviolin plots, sina plots, ridgeline plots\n\n\n7.\nColor scales\ncolor and fill scales\n\n\n8.\nColor spaces, color vision deficiency\ncolorspace package\n\n\n9.\nData wrangling\nmutate(), filter(), arrange() summarize(), join(), pivot_longer()\n\n\n10.\nVisualizing proportions\nbar charts, pie charts\n\n\n11.\nGetting to know your data\nhandling missing data, is.na(), case_when()\n\n\n12.\nGetting things into the right order\nfct_reorder(), fct_lump()\n\n\n13.\nFigure design\nggplot themes\n\n\n14.\nCompound figures\npatchwork package\n\n\n15.\nVisualizing trends\ngeom_smooth()\n\n\n16.\nFunctions and functional programming\nmap(), nest(), purrr package\n\n\n17.\nWorking with models\nlm, cor.test, broom package\n\n\n18.\nVisualizing uncertainty\nfrequency framing, error bars, ggdist package\n\n\n19.\nDimension reduction 1\nPCA\n\n\n20.\nDimension reduction 2\nkernel PCA, t-SNE, UMAP\n\n\n21.\nClustering 1\nk-means clustering\n\n\n22.\nClustering 2\nhierarchical clustering\n\n\n23.\nVisualizing geospatial data\ngeom_sf(), coord_sf()\n\n\n24.\nRedundant coding, text annotations\nggrepel package\n\n\n25.\nOver-plotting\njittering, 2d histograms, contour plots\n\n\n26.\nInteractive plots\nggiraph package\n\n\n27.\nWeb technologies and web design\nCSS\n\n\n28.\nInteractive plots\ngganimate package"
  },
  {
    "objectID": "syllabus.html#computing-requirements",
    "href": "syllabus.html#computing-requirements",
    "title": "Syllabus",
    "section": "Computing requirements",
    "text": "Computing requirements\nProgramming needs to be learned by doing, and a significant portion of the in-class time will be dedicated to working through simple problems. All programming exercises will be available through a web-based system, so the only system requirement for student computers is a modern web browser."
  },
  {
    "objectID": "syllabus.html#course-site",
    "href": "syllabus.html#course-site",
    "title": "Syllabus",
    "section": "Course site",
    "text": "Course site\nAll materials and assignments will be posted on the course webpage at: https://wilkelab.org/SDS366\nAssignment deadlines are shown on the schedule.\nAssignments will be submitted and grades will be posted on Canvas.\nParticipation via presence in class and in online discussions will also be tracked on Canvas.\nR compute sessions are available at: https://edupod.cns.utexas.edu\nNote that edupods will be unavailable due to maintenance approximately two hours per month, usually on a Thursday afternoon between 4pm and 6pm. Specific maintenance times are published in advance on the RCTF wiki."
  },
  {
    "objectID": "syllabus.html#assignments-and-grading",
    "href": "syllabus.html#assignments-and-grading",
    "title": "Syllabus",
    "section": "Assignments and grading",
    "text": "Assignments and grading\nThe graded components of this class will be homeworks, projects, peer-grading, and participation. Each week either a homework, a project, or a peer-grading is due. Homeworks will be relatively short visualization problems to be solved by the student, usually involving some small amount of programming to achieve a specified goal. They are graded by the TA. Projects are larger and more involved data analysis problems that involve both programming and writing. They are peer-graded by the students. Students will have at least one week to complete each homework and two weeks to complete each project. The submission deadlines for homeworks and projects will be Thursdays at 11pm.\nThere will be seven homeworks and three projects. Both homeworks and projects need to be submitted electronically on Canvas. Homeworks are worth 20 points and projects are worth 100 points. The lowest-scoring homework will be dropped, so that a maximum of 120 points can be obtained from the homeworks.\nProjects are peer-graded, which involves evaluating three projects by other students according to a detailed grading rubric that will be provided. The final grade for each project is the mean of the peer-graded projects, subject to oversight and potential grade correction (up or down, as warranted) by the TA. The peer-grading itself will also be graded by the TA. Experience has shown that peer-grading is often the most instructive component of this class, so don’t take this lightly.\nParticipation is assessed in two ways. First, students will receive 2 points for every lecture they attend. This is tracked via simple quizzes on Canvas. Second, each week students can receive up to 4 points for making substantive contributions to the Canvas online discussion (2 points per contribution). Total participation points are capped at 52 (13 weeks of class times 4 points), so students can compensate for lack of in-person attendance by participating in discussions and vice versa. You do not have to get full points in both in-person attendance and online discussions. No participation is assessed in the first week of class.\n\n\n\nAssignment type\nNumber\nPoints per assignment\nTotal points\n\n\n\n\nHomework\n6 (+1)\n20\n120\n\n\nProject\n3\n100\n300\n\n\nPeer grading\n3\n16\n48\n\n\nParticipation\n26 (+26)\n2\n52\n\n\n\nThus, in summary, each project (+ peer grading) contributes 22% to the final grade, the totality of all homeworks contributes another 23% to the final grade, and participation contributes 10%. There are no traditional exams in this class and there is no final.\nThe class will use +/- grading, and the exact grade boundaries will be determined at the end of the semester. However, the following minimum grades will be guaranteed:\n\n\n\nPoints achieved\nMinimum guaranteed grade\n\n\n\n\n468 (90%)\nA-\n\n\n416 (80%)\nB-\n\n\n364 (70%)\nC-\n\n\n260 (50%)\nD-"
  },
  {
    "objectID": "syllabus.html#late-assignment-policy",
    "href": "syllabus.html#late-assignment-policy",
    "title": "Syllabus",
    "section": "Late assignment policy",
    "text": "Late assignment policy\nHomeworks that are submitted past the posted deadline will not be graded and will receive 0 points.\nProject submissions will have a 1-day grace period. Projects submitted during the grace period will have 25 points deducted from the obtained grade. After the grace period, students who have not submitted their project will receive 0 points.\nPeer grades need to be submitted by the posted deadline. Late submissions will result in 0 points for the peer-grading effort.\nIn case of illness or other unforeseen circumstances out of your control, please reach out to Claus Wilke as soon as possible. We will consider your request on a case-by-case basis. If you need a deadline extension for valid reasons, please reach out before the official submission deadline and state how much of an extension you would need. Whether deadline extensions are possible depends on the severity of your situation as well as whether the solutions to the assignment have already been published."
  },
  {
    "objectID": "syllabus.html#office-hours",
    "href": "syllabus.html#office-hours",
    "title": "Syllabus",
    "section": "Office hours",
    "text": "Office hours\nBoth the graduate TA and myself will be available at posted times or by appointment. Office hours will be over Zoom. The most effective way to request an appointment for office hours outside of posted times is to suggest several times that work for you. I would suggest to write an email such as the following:\nDear Dr. Wilke,\n\nI would like to request a meeting with you outside of \nregular office hours this week. I am available Thurs.\nbetween 1pm and 2:30pm or Fri. before 11am or after 4pm.\n\nThanks a lot,\n  John Doe\nNote that we will not usually make appointments before 9am or after 5pm."
  },
  {
    "objectID": "syllabus.html#email-policy",
    "href": "syllabus.html#email-policy",
    "title": "Syllabus",
    "section": "Email policy",
    "text": "Email policy\nWhen emailing about this course, please put “SDS366” into the subject line. Emails to the instructor or TA should be restricted to organizational issues, such as requests for appointments, questions about course organization, etc. For all other issues, post in the discussions on Canvas, ask a question during open Zoom, or make an appointment for a one-on-one session.\nSpecifically, we will not discuss technical issues related to assignments over email. Technical issues are questions concerning how to approach a particular problem, whether a particular solution is correct, or how to use the statistical software R. These questions should be posted on the Discussion forums on Canvas. Also, we will not discuss grading-related matters over email. If you have a concern about grading, schedule a one-on-one Zoom meeting."
  },
  {
    "objectID": "syllabus.html#special-accommodations",
    "href": "syllabus.html#special-accommodations",
    "title": "Syllabus",
    "section": "Special accommodations",
    "text": "Special accommodations\nStudents with disabilities. If you are a student with a disability, or think you may have a disability, and need accommodations please contact Disability and Access (D&A). You may refer to D&A’s website for contact and more information: https://disability.utexas.edu/. If you are already registered with D&A, please deliver your Accommodation Letter to me as early as possible in the semester so we can discuss your approved accommodations.\nReligious holy days. Students who must miss a class or an assignment to observe a religious holy day will be given an opportunity to complete the missed work within a reasonable time after the absence. According to UT Austin policy, such students must notify me of the pending absence at least fourteen days prior to the date of observance of a religious holy day."
  },
  {
    "objectID": "syllabus.html#academic-dishonesty",
    "href": "syllabus.html#academic-dishonesty",
    "title": "Syllabus",
    "section": "Academic dishonesty",
    "text": "Academic dishonesty\nThis course is built upon the idea that student interaction is important and a powerful way to learn. We encourage you to communicate with other students, in particular through the discussion forums on Canvas. However, there are times when you need to demonstrate your own ability to work and solve problems. In particular, your homeworks and projects are independent work, unless explicitly stated otherwise. You are allowed to confer with fellow students about general approaches to solve the problems in the assignments, but you have to do the assignments on your own and describe your work in your own words. Students who violate these expectations can expect to receive a failing grade on the assignment and will be reported to Student Judicial Services. These types of violations are reported to professional schools, should you ever decide to apply one day. Don’t do it—it’s not worth the consequences."
  },
  {
    "objectID": "syllabus.html#use-of-generative-ai-tools",
    "href": "syllabus.html#use-of-generative-ai-tools",
    "title": "Syllabus",
    "section": "Use of generative AI tools",
    "text": "Use of generative AI tools\nGenerative AI tools such as ChatGPT or Copilot are becoming increasingly popular and widely used. In this class, you are allowed to use such tools as an aid for completing your assignments. However, you are ultimately responsible for the work you deliver. If the Generative AI makes mistakes, such as using R packages that are not permitted, violating design principles that have been discussed in class, or generally producing sub-standard assignments, that is on you. Your assignments will be graded accordingly.\nWe would also like to offer some words of caution. Given the depth and specific attention that this course places on effective visualization, current AI tools will frequently produce bad results that are not up to the standards expected in this class. In addition, the code produced will often not follow the approaches shown in slides or worksheets and will be difficult for your peers to grade. These deficits will become apparent especially as we transition into more complex assignments and projects.\nMore generally, you will only get out of this class as much as you invest into it, and overly relying on AI tools will prevent you from building skills needed later in the class and will cause you to struggle as the complexity and depth of the course content increases."
  },
  {
    "objectID": "syllabus.html#sharing-of-course-materials-is-prohibited",
    "href": "syllabus.html#sharing-of-course-materials-is-prohibited",
    "title": "Syllabus",
    "section": "Sharing of course materials is prohibited",
    "text": "Sharing of course materials is prohibited\nAny materials in this class that are not posted publicly may not be shared online or with anyone outside of the class unless you have my explicit, written permission. This includes but is not limited to lecture hand-outs, videos, assessments (quizzes, exams, papers, projects, homework assignments), in-class materials, review sheets, and additional problem sets. Unauthorized sharing of materials promotes cheating. It is a violation of the University’s Student Honor Code and an act of academic dishonesty. We are well aware of the sites used for sharing materials, and any materials found online that are associated with you, or any suspected unauthorized sharing of materials, will be reported to Student Conduct and Academic Integrity in the Office of the Dean of Students. These reports can result in sanctions, including failure in the course.\nAny materials posted on the public class website (https://wilkelab.org/SDS366/) are considered public and can be shared under the Creative Commons Attribution CC BY 4.0 license."
  },
  {
    "objectID": "syllabus.html#class-recordings",
    "href": "syllabus.html#class-recordings",
    "title": "Syllabus",
    "section": "Class recordings",
    "text": "Class recordings\nIn case any class recordings are provided they are reserved only for students in this class for educational purposes and are protected under FERPA. The recordings should not be shared outside the class in any form. Violation of this restriction by a student could lead to Student Misconduct proceedings."
  },
  {
    "objectID": "worksheets/color-scales.html",
    "href": "worksheets/color-scales.html",
    "title": "Color scales",
    "section": "",
    "text": "In this worksheet, we will discuss how to change and customize color scales.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with the dataset temperatures that we have used in previous worksheets. This dataset contains the average temperature for each day of the year for four different locations.\n\n\n\n\n\n\n\n\nWe will also be working with an aggregated version of this dataset called temps_months, which contains the mean temperature for each month for the same locations."
  },
  {
    "objectID": "worksheets/color-scales.html#introduction",
    "href": "worksheets/color-scales.html#introduction",
    "title": "Color scales",
    "section": "",
    "text": "In this worksheet, we will discuss how to change and customize color scales.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with the dataset temperatures that we have used in previous worksheets. This dataset contains the average temperature for each day of the year for four different locations.\n\n\n\n\n\n\n\n\nWe will also be working with an aggregated version of this dataset called temps_months, which contains the mean temperature for each month for the same locations."
  },
  {
    "objectID": "worksheets/color-scales.html#built-in-ggplot2-color-scales",
    "href": "worksheets/color-scales.html#built-in-ggplot2-color-scales",
    "title": "Color scales",
    "section": "Built in ggplot2 color scales",
    "text": "Built in ggplot2 color scales\nWe will start with built-in ggplot2 color scales, which require no additional packages. The scale functions are always named scale_color_*() or scale_fill_*(), depending on whether they apply to the color or fill aesthetic. The * indicates some other words specifying the type of the scale, for example scale_color_brewer() or scale_color_distiller() for discrete or continuous scales from the ColorBrewer project, respectively. You can find all available built-in scales here.\nNow consider the following plot:\n\n\n\n\n\n\n\n\nIf you wanted to change the color scale to one from the ColorBrewer project, which scale function would you have to add? Think about this and then try it out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile() + \n  coord_fixed(expand = FALSE) +\n  scale_fill_distiller()\n\n\n\n\nMost color scale functions have additional customizations. How to use them depends on the specific scale function. For the ColorBrewer scales you can set direction = 1 or direction = -1 to set the direction of the scale (light to dark or dark to light). You can also set the palette via a numeric argument, e.g. palette = 1, palette = 2, palette = 3 etc.\nTry this out by setting the direction of the scale from light to dark and using palette #4.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile() + \n  coord_fixed(expand = FALSE) +\n  scale_fill_distiller(direction = ___, palette = ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile() + \n  coord_fixed(expand = FALSE) +\n  scale_fill_distiller(direction = 1, palette = 4)\n\n\n\n\nA popular set of scales are the viridis scales, which are provided by scale_*_viridis_c() for continuous data and scale_*_viridis_d() for discrete data. Change the above plot to use a viridis scale.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile() + \n  coord_fixed(expand = FALSE) +\n  scale_fill_viridis_c()\n\n\n\n\nThe viridis scales can be customized with direction (as before), option (which can be \"A\", \"B\", \"C\", \"D\", or \"E\"), and begin and end which are numerical values between 0 and 1 indicating where in the color scale the data should begin or end. For example, begin = 0.2 means that the lowest data value is mapped to the 20th percentile in the scale.\nTry different choices for option, begin, and end to see how they change the plot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile() + \n  coord_fixed(expand = FALSE) +\n  scale_fill_viridis_c(option = \"B\", begin = 0.15)"
  },
  {
    "objectID": "worksheets/color-scales.html#customizing-scale-title-and-labels",
    "href": "worksheets/color-scales.html#customizing-scale-title-and-labels",
    "title": "Color scales",
    "section": "Customizing scale title and labels",
    "text": "Customizing scale title and labels\nIn a previous worksheet, we used arguments such as name, breaks, labels, and limits to customize the axis. For color scales, instead of an axis we have a legend, and we can use the same arguments inside the scale function to customize how the legend looks.\nTry this out. Set the scale limits from 10 to 110 and set the name of the scale and the breaks as you wish.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile() + \n  coord_fixed(expand = FALSE) +\n  scale_fill_viridis_c(\n    name = ___,\n    breaks = ___,\n    limits = ___\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile() + \n  coord_fixed(expand = FALSE) +\n  scale_fill_viridis_c(\n    name = \"temperature (F)\",\n    breaks = c(25, 50, 75, 100),\n    limits = c(10, 110)\n  )\n\n\n\n\nNote: Color scales ignore the expand argument, so you cannot use it to expand the scale beyond the data values as you can for position scales."
  },
  {
    "objectID": "worksheets/color-scales.html#binned-scales",
    "href": "worksheets/color-scales.html#binned-scales",
    "title": "Color scales",
    "section": "Binned scales",
    "text": "Binned scales\nResearch into human perception has shown that continuous coloring can be difficult to interpret. Therefore, it is often preferable to use a small number of discrete colors to indicate ranges of data values. You can do this in ggplot with binned scales. For example, scale_fill_viridis_b() provides a binned version of the viridis scale. Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile() + \n  coord_fixed(expand = FALSE) +\n  ___\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile() + \n  coord_fixed(expand = FALSE) +\n  scale_fill_viridis_b()\n\n\n\n\nYou can provide bin breaks directly with the breaks argument. Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile() + \n  coord_fixed(expand = FALSE) +\n  scale_fill_viridis_b(\n    breaks = ___\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile() + \n  coord_fixed(expand = FALSE) +\n  scale_fill_viridis_b(\n    breaks = c(40, 60, 80, 100)\n  )"
  },
  {
    "objectID": "worksheets/color-scales.html#scales-from-the-colorspace-package",
    "href": "worksheets/color-scales.html#scales-from-the-colorspace-package",
    "title": "Color scales",
    "section": "Scales from the colorspace package",
    "text": "Scales from the colorspace package\nThe color scales provided by the colorspace package follow a simple naming scheme of the form scale_&lt;aesthetic&gt;_&lt;datatype&gt;_&lt;colorscale&gt;(), where &lt;aesthetic&gt; is the name of the aesthetic (fill, color, colour), &lt;datatype&gt; indicates the type of variable plotted (discrete, continuous, binned), and colorscale stands for the type of the color scale (qualitative, sequential, diverging, divergingx).\nFor the mean temperature plot we have been using throughout this worksheet, which color scale(s) from the colorspace package is/are appropriate? Think about this and then try it out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nTwo alternative options are appropriate. Can you think of both?\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n# Option 1: Continuous scale\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile() + \n  coord_fixed(expand = FALSE) +\n  scale_fill_continuous_sequential()\n\n# Option 2: Binned scale\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile() + \n  coord_fixed(expand = FALSE) +\n  scale_fill_binned_sequential()\n\n\n\n\nYou can customize the colorspace scales with the palette argument, which takes the name of a palette (e.g., \"Inferno\", \"BluYl\", \"Lajolla\"). Try this out. Also try reversing the scale direction with rev = TRUE or rev = FALSE. (The colorspace scales use rev instead of direction.) You can find the names of all supported scales here (consider specifically single-hue and multi-hue sequential palettes).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile() + \n  coord_fixed(expand = FALSE) +\n  scale_fill_continuous_sequential(\n    palette = ___\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile() + \n  coord_fixed(expand = FALSE) +\n  scale_fill_continuous_sequential(\n    palette = \"Lajolla\"\n  )\n\n\n\n\nYou can also use begin and end just like in the viridis scales."
  },
  {
    "objectID": "worksheets/color-scales.html#manual-scales",
    "href": "worksheets/color-scales.html#manual-scales",
    "title": "Color scales",
    "section": "Manual scales",
    "text": "Manual scales\nFor discrete data with a small number of categories, it’s usually best to set colors manually. This can be done with the scale functions scale_*_manual(). These functions take an argument values that specifies the color values to use.\nTo see how this works, let’s go back to this plot of temperatures over time for four locations:\n\n\n\n\n\n\n\n\nLet’s use the following four colors: \"gold2\", \"firebrick\", \"blue3\", \"springgreen4\". We can visualize this palette using the function swatchplot() from the colorspace package.\n\n\n\n\n\n\n\n\nNow apply this color palette to the temperatures plot, by using the manual color scale.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temperatures, aes(day_of_year, temperature, color = location)) +\n  geom_line(linewidth = 1) +\n  scale_color_manual(\n    values = ___\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temperatures, aes(day_of_year, temperature, color = location)) +\n  geom_line(linewidth = 1) +\n  scale_color_manual(\n    values = c(\"gold2\", \"firebrick\", \"blue3\", \"springgreen4\")\n  )\n\n\n\n\nOne problem with this approach is that we can’t easily control which data value gets assigned to which color. What if we wanted San Diego to be shown in green and Chicago in blue? The simplest way to resolve this issue is to use a named vector. A named vector in R is a vector where each value has a name. Named vectors are created by writing c(name1 = value1, name2 = value2, ...). See the following example.\n\n\n\n\n\n\n\n\nThe names in the second example are A, B, and C. Notice that the names are not in quotes. However, if you need a name containing a space (such as Death Valley), you need to enclose the name in backticks. Thus, our named vector of colors could be written like so:\n\n\n\n\n\n\n\n\nNow try to use this color vector in the figure showing temperatures over time.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\ncolorvector &lt;- c(___)\n\nggplot(temperatures, aes(day_of_year, temperature, color = location)) +\n  geom_line(linewidth = 1) +\n  scale_color_manual(\n    values = ___\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\ncolorvector &lt;- c(\n  `Death Valley` = \"gold2\",\n  Houston = \"firebrick\",\n  Chicago = \"blue3\",\n  `San Diego` = \"springgreen4\"\n)\n\nggplot(temperatures, aes(day_of_year, temperature, color = location)) +\n  geom_line(linewidth = 1) +\n  scale_color_manual(\n    values = colorvector\n  )\n\n\n\n\nTry some other colors also. For example, you could use the Okabe-Ito colors:\n\n\n\n\n\n\n\n\nAlternatively, you can find a list of all named colors here. You can also run the command colors() in your R console to get a list of all available color names.\nHint: It’s a good idea to never use the colors \"red\", \"green\", \"blue\", \"cyan\", \"magenta\", \"yellow\". They are extreme points in the RGB color space and tend to look unnatural and cheap. Try this by making a swatch plot of these colors, and compare for example to the color scale containing the colors \"firebrick\", \"springgreen4\", \"blue3\", \"turquoise3\", \"darkorchid2\", \"gold2\". Do you see the difference?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\ncolorspace::swatchplot(c(\"red\", \"green\", \"blue\", \"cyan\", \"magenta\", \"yellow\"))\ncolorspace::swatchplot(c(\"firebrick\", \"springgreen4\", \"blue3\", \"turquoise3\", \"darkorchid2\", \"gold2\"))"
  },
  {
    "objectID": "worksheets/compound-figures.html",
    "href": "worksheets/compound-figures.html",
    "title": "Compound figures",
    "section": "",
    "text": "In this worksheet, we will discuss how to combine several ggplot2 plots into one compound figure.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nWe will be working with the R builtin dataset mtcars, which contains fuel consumption and 10 aspects of automobile design and performance for 32 automobiles (1973–74 models)."
  },
  {
    "objectID": "worksheets/compound-figures.html#introduction",
    "href": "worksheets/compound-figures.html#introduction",
    "title": "Compound figures",
    "section": "",
    "text": "In this worksheet, we will discuss how to combine several ggplot2 plots into one compound figure.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nWe will be working with the R builtin dataset mtcars, which contains fuel consumption and 10 aspects of automobile design and performance for 32 automobiles (1973–74 models)."
  },
  {
    "objectID": "worksheets/compound-figures.html#combining-plots",
    "href": "worksheets/compound-figures.html#combining-plots",
    "title": "Compound figures",
    "section": "Combining plots",
    "text": "Combining plots\nFirst we set up four different plots that we will subsequently combine. The plots are stored in variables p1, p2, p3, p4.\n\n\n\n\n\n\n\n\nTo show plots side-by-side, the patchwork package provides the operator |, as in p1 | p2. Try this by making a compound plot of plots p1, p2, p3 side-by-side.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\np1 | p2 | p3\n\n\n\n\nTo show plots on top of one-another, we use the operator /, as in p1 / p2. Try this by making a compound plot of plots p1, p2, p3 on top of each other.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\np1 / p2 / p3\n\n\n\n\nWe can also use parentheses to group plots with respect to the operators | and /. For example, we can place several plots side-by-side and then place this entire row of plots on top of another plot. Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\n(___) / p4\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n(p1 | p2 | p3 ) / p4"
  },
  {
    "objectID": "worksheets/compound-figures.html#plot-annotations",
    "href": "worksheets/compound-figures.html#plot-annotations",
    "title": "Compound figures",
    "section": "Plot annotations",
    "text": "Plot annotations\nThe patchwork package provides a powerful annotation system via the plot_annotation() function that can be added to a plot assembly. For example, we can add plot tags (the labels in the upper left corner identifying the plots) via the plot annotation tag_levels. You can set tag_levels = \"A\" to generate tags A, B, C, etc. Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\n(p1 | p2 | p3 ) / p4 +\n  plot_annotation(\n    ___\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n(p1 | p2 | p3 ) / p4 +\n  plot_annotation(\n    tag_levels = \"A\"\n  )\n\n\n\n\nTry also tag levels such as \"a\", \"i\", or \"1\".\nYou can also add elements such as titles, subtitles, and captions, by setting the title, subtitle, or caption argument in plot_annotation(). Try this out by adding an overall title to the figure from the previous exercise.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\n(p1 | p2 | p3 ) / p4 +\n  plot_annotation(\n    tag_levels = \"A\",\n    ___\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n(p1 | p2 | p3 ) / p4 +\n  plot_annotation(\n    tag_levels = \"A\",\n    title = \"Various observations about old cars\"\n  )\n\n\n\n\nAlso set a subtitle and a caption.\nFinally, you can change the theme of all plots in the plot assembly via the & operator, as in (p1 | p2) & theme_bw(). Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n(p1 | p2) & theme_bw()\n\n\n\n\nWhat happens if you write this expression without parentheses? Do you understand why?"
  },
  {
    "objectID": "worksheets/data-wrangling-1.html",
    "href": "worksheets/data-wrangling-1.html",
    "title": "Data wrangling 1",
    "section": "",
    "text": "In this worksheet, we will discuss how to perform basic data manipulations, such as filtering data rows that meet certain conditions, choosing data columns, and arranging data in ascending or descending order.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data. We will be working with data on individual penguins in Antarctica.\npenguins"
  },
  {
    "objectID": "worksheets/data-wrangling-1.html#introduction",
    "href": "worksheets/data-wrangling-1.html#introduction",
    "title": "Data wrangling 1",
    "section": "",
    "text": "In this worksheet, we will discuss how to perform basic data manipulations, such as filtering data rows that meet certain conditions, choosing data columns, and arranging data in ascending or descending order.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data. We will be working with data on individual penguins in Antarctica.\npenguins"
  },
  {
    "objectID": "worksheets/data-wrangling-1.html#the-pipe-symbol-read-and-then",
    "href": "worksheets/data-wrangling-1.html#the-pipe-symbol-read-and-then",
    "title": "Data wrangling 1",
    "section": "The pipe (symbol |>, read “and then”)",
    "text": "The pipe (symbol |&gt;, read “and then”)\nWhen writing complex data analysis pipelines, we frequently use the pipe operator |&gt; to move data from one analysis step to the next. The pipe is pronounced “and then”, and it takes the data on its left and uses it as the first argument for the function on its right.\nFor example, to see the first few lines of a dataset, we often write head(data). Instead, we can write data |&gt; head().\nTry this yourself. Write code that displays the first few lines of the penguins dataset, using |&gt; and head():\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins ___ head()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt; head()\n\n\n\n\nIn older R code, you may also see %&gt;% (called the “magrittr” pipe) instead of |&gt; (the “native” pipe). While these two operators have subtle differences, for all intents and purposes you can treat them interchangeably. Try the previous exercise with the magrittr pipe instead of the native pipe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins ___ head()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins %&gt;% head()"
  },
  {
    "objectID": "worksheets/data-wrangling-1.html#choosing-data-rows",
    "href": "worksheets/data-wrangling-1.html#choosing-data-rows",
    "title": "Data wrangling 1",
    "section": "Choosing data rows",
    "text": "Choosing data rows\nThe function filter() allows you to find rows in a dataset that meet one or more specific conditions. The syntax is data |&gt; filter(condition), where condition is a logical condition. For example, filter(x &gt; 5) would pick all rows for which the value in column x is greater than 5.\nAs an example, the following code picks all penguins from the island Biscoe:\n\n\n\n\n\n\n\n\nNow it’s your turn. Pick all penguins from the island Dream:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  filter(island == \"Dream\")\n\n\n\n\nYou can also state multiple conditions, separated by a comma. For example, filter(x &gt; 5, y &lt; 2) would pick all rows for which the value in the column x is greater than 5 and the value in the column y is less than 2. Note that the conditions are combined via logical AND, both need to be satisfied for the row to be picked.\nTo try this out, pick all penguins of species Chinstrap from the island Dream:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  filter(species == ___, island == ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  filter(species == \"Chinstrap\", island == \"Dream\")"
  },
  {
    "objectID": "worksheets/data-wrangling-1.html#choosing-data-columns",
    "href": "worksheets/data-wrangling-1.html#choosing-data-columns",
    "title": "Data wrangling 1",
    "section": "Choosing data columns",
    "text": "Choosing data columns\nThe function select() allows you to pick specific data columns by name. This is frequently useful when a dataset has many more columns than we are interested in at the time. For example, if we are only interested in the penguins’ species, island, and sex, we could select these three columns:\n\n\n\n\n\n\n\n\nTry this yourself, picking the columns representing the penguin species (species), the bill length (bill_length_mm), and then flipper length (flipper_length_mm).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  select(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  select(species, bill_length_mm, flipper_length_mm)\n\n\n\n\nAnother situation that arises frequently is one where we want to remove specific columns. We can also do this with select(), but now write select(-column) to remove one or more columns.\nTry this. Remove the column species.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  select(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  select(-species)\n\n\n\n\nAnd now remove both species and island.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  select(-___, -___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  select(-species, -island)"
  },
  {
    "objectID": "worksheets/data-wrangling-1.html#sorting-data",
    "href": "worksheets/data-wrangling-1.html#sorting-data",
    "title": "Data wrangling 1",
    "section": "Sorting data",
    "text": "Sorting data\nThe function arrange() allows you to sort data by one or more columns. For example, data |&gt; arrange(x) would sort the data by increasing values of x, and data |&gt; arrange(x, y) would sort the data first by x and then, for ties in x, by y.\nAs an example, the following code sorts penguins by their flipper length:\n\n\n\n\n\n\n\n\nNow it’s your turn. Sort the penguins by bill length:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  arrange(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  arrange(bill_length_mm)\n\n\n\n\nTo arrange data in descending order, enclose the data column in desc(). For example, data |&gt; arrange(desc(x)) would sort the data by decreasing values of x. (desc stands for “descending”.)\nTry this out. Sort the penguins by bill length, from largest to smallest:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  arrange(___(bill_length_mm))\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  arrange(desc(bill_length_mm))"
  },
  {
    "objectID": "worksheets/data-wrangling-1.html#counting",
    "href": "worksheets/data-wrangling-1.html#counting",
    "title": "Data wrangling 1",
    "section": "Counting",
    "text": "Counting\nWe frequently want to count how many times a particular value or combination of values occurs in a dataset. We do this using the count() function. For example, the following code counts how many penguins of the different species there are in the penguins dataset.\n\n\n\n\n\n\n\n\nNow try this yourself. Count how many male and female penguins there are.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  count(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  count(sex)\n\n\n\n\nWe can also perform more fine-grained counts, by providing the count() function with more than one column name. See if you can count how many male and female penguins the dataset contains for each species.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  count(___, sex)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  count(species, sex)\n\n\n\n\nNow count how many penguins of each species the dataset contains for each island.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  count(___, species)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  count(island, species)"
  },
  {
    "objectID": "worksheets/data-wrangling-1.html#chaining-analysis-steps-into-pipelines",
    "href": "worksheets/data-wrangling-1.html#chaining-analysis-steps-into-pipelines",
    "title": "Data wrangling 1",
    "section": "Chaining analysis steps into pipelines",
    "text": "Chaining analysis steps into pipelines\nWe can chain multiple analysis steps into a pipeline by continuing to add “and then” statements. For example, data |&gt; count(...) |&gt; arrange(...) would first count and then sort the data.\nTry this out by counting the number of penguins of each species and then sorting by the number of penguins.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  count(___) |&gt;\n  arrange(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  count(species) |&gt;\n  arrange(n)\n\n\n\n\nYou may remember from before that the default sorting is from the smallest to the largest value. Repeat the previous exercise but now arrange the penguin species from the most frequent to the least frequent:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  count(species) |&gt;\n  arrange(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  count(species) |&gt;\n  arrange(desc(n))"
  },
  {
    "objectID": "worksheets/data-wrangling-1.html#creating-new-data-columns",
    "href": "worksheets/data-wrangling-1.html#creating-new-data-columns",
    "title": "Data wrangling 1",
    "section": "Creating new data columns",
    "text": "Creating new data columns\nThe function mutate() allows you to add new columns to a data table. For example, data |&gt; mutate(sum = x + y) would create a new column sum that is the sum of the columns x and y:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote that the part to the left of the equals sign (here, sum) is the name of the new column, and the part to the right of the equals sign (here, x + y) is an R expression that evaluates to the values in the new column.\nNow apply this concept to the penguins dataset. Add a new column bill_ratio that is the ratio of bill length and bill depth:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  select(species, bill_length_mm, bill_depth_mm) |&gt;\n  mutate(\n    bill_ratio = ___\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  select(species, bill_length_mm, bill_depth_mm) |&gt;\n  mutate(\n    bill_ratio = bill_length_mm / bill_depth_mm\n  )"
  },
  {
    "objectID": "worksheets/data-wrangling-1.html#counting-with-custom-conditions",
    "href": "worksheets/data-wrangling-1.html#counting-with-custom-conditions",
    "title": "Data wrangling 1",
    "section": "Counting with custom conditions",
    "text": "Counting with custom conditions\nIt is quite common that we want to count items that meet a specific condition. For example, let’s say we want to count how many penguins of different species have flippers longer than 200mm. To do this efficiently, we first create a new column that indicates whether the condition is met or not, and we then use count with that indicator column.\nThe easiest way to create indicator columns is via the function if_else(), which takes three arguments: a condition, a result if the condition is met, and a result if the condition is not met. The following example shows how to create an indicator column showing whether a variable is positive or negative:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow try this yourself. Count how many penguins of different species have flippers longer than 200mm. Then sort your results from most frequent to least frequent.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  mutate(\n    flipper_length = if_else(___, \"greater than 200mm\", \"less than 200mm\")\n  ) |&gt;\n  count(___, flipper_length) |&gt;\n  arrange(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  mutate(\n    flipper_length = if_else(flipper_length_mm &gt; 200, \"greater than 200mm\", \"less than 200mm\")\n  ) |&gt;\n  count(species, flipper_length) |&gt;\n  arrange(desc(n))"
  },
  {
    "objectID": "worksheets/figure-design.html",
    "href": "worksheets/figure-design.html",
    "title": "Figure design",
    "section": "",
    "text": "In this worksheet, we will discuss how to change and customize plot appearance through themes.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nWe will be working with the dataset penguins, which contains data on individual penguins on Antarctica.\npenguins"
  },
  {
    "objectID": "worksheets/figure-design.html#introduction",
    "href": "worksheets/figure-design.html#introduction",
    "title": "Figure design",
    "section": "",
    "text": "In this worksheet, we will discuss how to change and customize plot appearance through themes.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nWe will be working with the dataset penguins, which contains data on individual penguins on Antarctica.\npenguins"
  },
  {
    "objectID": "worksheets/figure-design.html#ready-made-themes",
    "href": "worksheets/figure-design.html#ready-made-themes",
    "title": "Figure design",
    "section": "Ready-made themes",
    "text": "Ready-made themes\nLet’s start with this simple plot with no specific styling.\n\n\n\n\n\n\n\n\nThe default ggplot theme is theme_gray(). Verify that adding this theme to the plot makes no difference in the output. Then change the overall font size by providing the theme function with a numeric font size argument, e.g. theme_gray(16).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme_gray()\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme_gray(16)\n\n\n\n\nThe ggplot2 package has many built-in themes, including theme_minimal(), theme_bw(), theme_void(), theme_dark(). Try these different themes on the above plot. Also try again changing the font size. You can see all themes provided by ggplot2 here: https://ggplot2.tidyverse.org/reference/ggtheme.html\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme_bw(12)\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme_minimal(14)\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme_void()\n\n\n\n\nMany other packages also provide themes. For example, the cowplot package provides themes theme_half_open(), theme_minimal_grid(), theme_minimal_hgrid(), and theme_minimal_vgrid(). You can see all cowplot themes here: https://wilkelab.org/cowplot/articles/themes.html Try these out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme_half_open()\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme_minimal_grid()\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme_minimal_hgrid()\n\n\n\n\nCompare the visual appearance of theme_minimal() from ggplot2 to theme_minimal_grid() from cowplot. What similarities and differences to you notice? Which do you prefer? (There is no correct answer here, just be aware of the differences and of your preferences.)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme_minimal()\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme_minimal_grid()"
  },
  {
    "objectID": "worksheets/figure-design.html#modifying-theme-elements",
    "href": "worksheets/figure-design.html#modifying-theme-elements",
    "title": "Figure design",
    "section": "Modifying theme elements",
    "text": "Modifying theme elements\nYou can modify theme elements by adding a theme() call to the plot. Inside the theme() call you specify which theme element you want to modify (e.g., axis.title, axis.text.x, panel.background, etc) and what changes you want to make. For example, to make axis titles blue, you would write:\ntheme(\n  axis.title = element_text(color = \"blue\")\n)\nThere are many theme settings, and for each one you need to know what type of an element it is (for example, element_text(), element_line(), element_rect() for text, lines, or rectangles, respectively). A complete description of the available options is available at the ggplot2 website: https://ggplot2.tidyverse.org/reference/theme.html\nHere, we will only try a few simple things. For example, see if you can make the legend title blue and the legend text red.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme(\n    legend.title = ___,\n    legend.text = ___\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme(\n    legend.title = element_text(color = \"blue\"),\n    legend.text = element_text(color = \"red\")\n  )\n\n\n\n\nNow color the area behind the legend in \"aliceblue\". Hint: The theme element you need to change is called legend.background. There is also an element legend.box.background but it is only visible if legend.background is not shown, and in the default ggplot2 themes that is not the case.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme(\n    legend.background = element_rect(___)\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme(\n    legend.background = element_rect(fill = \"aliceblue\")\n  )\n\n\n\n\nAnother commonly used feature in themes are margins. Many parts of the plot theme can understand customized margins, which control how much spacing there is between different parts of a plot. Margins are typically specified with the function margin(), which takes four numbers specifying the margins in points, in the order top, right, bottom, left. So, margin(10, 5, 5, 10) would specify a top margin of 10pt, a right margin of 5pt, a bottom margin of 5pt, and a left margin of 10pt.\nTry this out by setting the legend margin (element legend.margin) such that there is no top and no bottom margin but 10pt left and right margin.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme(\n    legend.background = element_rect(fill = \"aliceblue\"),\n    legend.margin = margin(___)\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme(\n    legend.background = element_rect(fill = \"aliceblue\"),\n    legend.margin = margin(0, 10, 0, 10)\n  )\n\n\n\n\nThere are many other things you can do. Try at least some of the following:\n\nChange the horizontal or vertical justification of text with hjust and vjust.\nChange the font family with family.1\nChange the panel grid. For example, create only horizontal lines, or only vertical lines.\nChange the overall margin of the plot with plot.margin.\nMove the position of the legend with legend.position and legend.justification.\nTurn off some elements by setting them to element_blank().\n\n1 Getting fonts to work well can be tricky in R. Which specific fonts work depends on the graphics device and the operating system. The following fonts work on the edupod class server: \"Palatino\", \"Times\", \"Helvetica\", \"Courier\", \"ITC Bookman\", \"ITC Avant Garde Gothic\", \"ITC Zapf Chancery\"."
  },
  {
    "objectID": "worksheets/figure-design.html#writing-your-own-theme",
    "href": "worksheets/figure-design.html#writing-your-own-theme",
    "title": "Figure design",
    "section": "Writing your own theme",
    "text": "Writing your own theme\nYou can write a theme by taking an existing theme and making some modifications, like so:\n\n\n\n\n\n\n\n\nNow try this out on the penguins scatter plot.\nHint: When using this theme, do you have to add theme_colorful or theme_colorful() to the plot? Do you understand which option is correct and why? If you are unsure, try both and see what happens.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  ___\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme_colorful\n\n\n\n\nNow write your own theme and then add it to the penguins plot."
  },
  {
    "objectID": "worksheets/intro-to-Quarto.html",
    "href": "worksheets/intro-to-Quarto.html",
    "title": "Introduction to Quarto",
    "section": "",
    "text": "All assignments in this class will be done via Quarto documents. Quarto documents are documents that combine text, code, and output, including figures. They are a great way to produce self-contained and documented statistical analyses. Quarto has support for a variety of popular programming languages for data analysis, including R and python.\nTo get familiar with Quarto, please download this Quarto template worksheet, complete it, and render into a PDF. You will use this same workflow in all homeworks and projects throughout the semester."
  },
  {
    "objectID": "worksheets/know-your-data-1.html",
    "href": "worksheets/know-your-data-1.html",
    "title": "Getting to know your data 1",
    "section": "",
    "text": "In this worksheet, we will discuss how to perform basic inspection of a dataset and simple data-cleaning tasks.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with the dataset NCbirths, which contains data about 1450 births in the state of North Carolina in 2001.\nNCbirths"
  },
  {
    "objectID": "worksheets/know-your-data-1.html#introduction",
    "href": "worksheets/know-your-data-1.html#introduction",
    "title": "Getting to know your data 1",
    "section": "",
    "text": "In this worksheet, we will discuss how to perform basic inspection of a dataset and simple data-cleaning tasks.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with the dataset NCbirths, which contains data about 1450 births in the state of North Carolina in 2001.\nNCbirths"
  },
  {
    "objectID": "worksheets/know-your-data-1.html#basic-inspection-of-the-data",
    "href": "worksheets/know-your-data-1.html#basic-inspection-of-the-data",
    "title": "Getting to know your data 1",
    "section": "Basic inspection of the data",
    "text": "Basic inspection of the data\nWhen first working with a new dataset, you should always start by just looking at the data. The simplest way to do this is to just enter the name of the dataset in the R command line and run, which causes the data to be printed. You can also use head(...) to only see the first six rows or glimpse(...) to get a list of all columns with their type and first few values.\nTry this yourself. Write code that displays the entire NCbirths dataset, the first six rows, or a list of all columns.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nNCbirths\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nhead(NCbirths)\nglimpse(NCbirths)\nNCbirths\n\n\n\n\nIt is often useful to get a list of all names of the columns in a data frame. You can obtain this with names(...). Try this yourself.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nnames(NCbirths)\n\n\n\n\nTo inspect individual columns, you can extract them either with pull() like so: data |&gt; pull(column) or with the $ operator like so: data$column. The second option is shorter but the first option integrates better into longer analysis pipelines. Try both options on the NCbirths dataset, for example for the Smoke column.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n# option using pull()\nNCbirths |&gt;\n  pull(Smoke)\n\n# option using $ operator\nNCbirths$Smoke\n\n\n\n\nFinally, to see all distinct values in a column, you can apply the function unique() to it. Try this with the Smoke column.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nNCbirths |&gt;\n  pull(Smoke) |&gt;\n  ___\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nNCbirths |&gt;\n  pull(Smoke) |&gt;\n  unique()"
  },
  {
    "objectID": "worksheets/know-your-data-1.html#recoding-of-data-values",
    "href": "worksheets/know-your-data-1.html#recoding-of-data-values",
    "title": "Getting to know your data 1",
    "section": "Recoding of data values",
    "text": "Recoding of data values\nWe frequently want to recode data values such that they are more humanly readable. For example, we might want to write smoker/non-smoker instead of 1/0. We can do this with if_else(), which takes three arguments: a logical condition, the data value if the logical condition is true, and the data value if the logical condition is false. Try this out on the Smoke column, creating a new column Smoke_recoded that is human-readable.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nNCbirths |&gt;\n  mutate(\n    Smoke_recoded = if_else(___, ___, ___)\n  ) |&gt;\n  select(Smoke, Smoke_recoded) |&gt;\n  unique()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nNCbirths |&gt;\n  mutate(\n    Smoke_recoded = if_else(Smoke == 0, \"non-smoker\", \"smoker\")\n  ) |&gt;\n  select(Smoke, Smoke_recoded) |&gt;\n  unique()\n\n\n\n\nWhen you want to recode a variable with more than two categories, you could nest if_else() commands, but usually it is simpler to use case_when(). With case_when(), you provide a list of conditions and corresponding data values as formulas of the form condition ~ data value. For example, the recoding exercise for the Smoke column could be written with case_when() as follows:\n\n\n\n\n\n\n\n\nWhen using case_when(), it is usually a good idea to provide an explicit fallback that is used when none of the earlier conditions match. The logical conditions are evaluated in order, so you want to list the most specific conditions first and the least specific conditions last. The fallback condition is simply TRUE. It applies always if no previous condition applied.\nNow use case_when() to recode the Plural column into singlet/twins/triplets.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nNCbirths |&gt;\n  mutate(\n    Plural_recoded = case_when(\n      Plural == 1 ~ \"singlet\",\n      ___,\n      ___,\n      ___\n    )\n  ) |&gt;\n  select(Plural, Plural_recoded) |&gt;\n  unique()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nNCbirths |&gt;\n  mutate(\n    Plural_recoded = case_when(\n      Plural == 1 ~ \"singlet\",\n      Plural == 2 ~ \"twins\",\n      Plural == 3 ~ \"triplets\",\n      TRUE ~ NA\n    )\n  ) |&gt;\n  select(Plural, Plural_recoded) |&gt;\n  unique()"
  },
  {
    "objectID": "worksheets/know-your-data-1.html#summaries-of-data-columns",
    "href": "worksheets/know-your-data-1.html#summaries-of-data-columns",
    "title": "Getting to know your data 1",
    "section": "Summaries of data columns",
    "text": "Summaries of data columns\nWhen exploring a new dataset, it is usually a good idea to look at summaries of the data values in each column, to get a quick sense of the range of data values, to see whether there are any unexpected outliers, etc. There are two useful functions for this purpose, summary() for numerical data and table() for categorical data.\nFirst try this for numerical data. Perform summaries for the data columns MomAge, Weeks, and BirthWeightGm.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nsummary(NCbirths$MomAge)\n___\n___\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nsummary(NCbirths$MomAge)\nsummary(NCbirths$Weeks)\nsummary(NCbirths$BirthWeightGm)\n\n\n\n\nNow try this for categorical data. Perform summaries for the data columns Plural, Smoke, and RaceMom.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\ntable(NCbirths$Plural)\n___\n___\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\ntable(NCbirths$Plural)\ntable(NCbirths$Smoke)\ntable(NCbirths$RaceMom)\n\n\n\n\nDo you understand what the output means? If not, look it up in the R documentation for the table() function.\nOne quirk of the table() function is that by default it omits any NA values. However, it is important to know whether there are any NA values in a data column or not. We can get table() to tabulate NAs as well by providing it with the argument useNA = \"ifany\". Repeat the previous exercise with this modification and see which of the three columns Plural, Smoke, or RaceMom contain any NAs.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\ntable(NCbirths$Plural, useNA = \"ifany\")\n___\n___\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\ntable(NCbirths$Plural, useNA = \"ifany\")\ntable(NCbirths$Smoke, useNA = \"ifany\")\ntable(NCbirths$RaceMom, useNA = \"ifany\")"
  },
  {
    "objectID": "worksheets/visualizing-amounts.html",
    "href": "worksheets/visualizing-amounts.html",
    "title": "Visualizing amounts",
    "section": "",
    "text": "In this worksheet, we will discuss a core concept of ggplot, the mapping of data values onto aesthetics.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with two datasets. First, box-office gross results for Dec. 22-24, 2017:\n\n\n\n\n\n\n\n\nSecond, data on individual penguins in Antarctica. Note that missing values have been removed:\npenguins2"
  },
  {
    "objectID": "worksheets/visualizing-amounts.html#introduction",
    "href": "worksheets/visualizing-amounts.html#introduction",
    "title": "Visualizing amounts",
    "section": "",
    "text": "In this worksheet, we will discuss a core concept of ggplot, the mapping of data values onto aesthetics.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with two datasets. First, box-office gross results for Dec. 22-24, 2017:\n\n\n\n\n\n\n\n\nSecond, data on individual penguins in Antarctica. Note that missing values have been removed:\npenguins2"
  },
  {
    "objectID": "worksheets/visualizing-amounts.html#drawing-numerical-values-as-bars",
    "href": "worksheets/visualizing-amounts.html#drawing-numerical-values-as-bars",
    "title": "Visualizing amounts",
    "section": "Drawing numerical values as bars",
    "text": "Drawing numerical values as bars\nFor the boxoffice dataset, we want to draw the amount (Weekend gross, in million USD) for each movie as a bar. Somewhat confusingly, the ggplot geom that does this is called geom_col(). (There is also a geom_bar(), but it works differently. We’ll get to that later in this tutorial.) Make a bar plot of amount versus title. This means amount goes on the y axis and title on the x axis.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(boxoffice, aes(x = ___, y = ___)) +\n  geom_col()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(boxoffice, aes(x = title, y = amount)) +\n  geom_col()\n\n\n\n\nNow flip which column you map onto x and which onto y.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(boxoffice, aes(x = amount, y = title)) +\n  geom_col()\n\n\n\n\nThe x-axis label should specify that the amount is in million USD, and the y axis doesn’t need the word “title”. Use xlab() and ylab() to make these changes to the plot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(boxoffice, aes(x = amount, y = title)) +\n  geom_col() +\n  xlab(___) +\n  ylab(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(boxoffice, aes(x = amount, y = title)) +\n  geom_col() +\n  xlab(\"weekend gross (million USD)\") +\n  ylab(NULL) # NULL means nothing, don't show a y label"
  },
  {
    "objectID": "worksheets/visualizing-amounts.html#getting-bars-into-the-right-order",
    "href": "worksheets/visualizing-amounts.html#getting-bars-into-the-right-order",
    "title": "Visualizing amounts",
    "section": "Getting bars into the right order",
    "text": "Getting bars into the right order\nWhenever we are making bar plots, we need to think about the correct order of the bars. By default, ggplot uses alphabetic ordering, but that is rarely appropriate. If there is no inherent ordering (such as, for example, a temporal progression), then it is usually best to order by the magnitude of the values, i.e., sort the bars by length.\nWe can do this with the fct_reorder() function, which takes two arguments: The categorical variable we want to re-order, and the values by which we want to order. Here, the categorical variable is the column title and the values are in the column amount. We can apply the fct_reorder() function right inside the aes() statement.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(boxoffice, aes(x = amount, y = fct_reorder(___, ___))) +\n  geom_col() +\n  xlab(\"weekend gross (million USD)\") +\n  ylab(NULL)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(boxoffice, aes(x = amount, y = fct_reorder(title, amount))) +\n  geom_col() +\n  xlab(\"weekend gross (million USD)\") +\n  ylab(NULL)\n\n\n\n\nTry the following additional experiments in the above code:\n\nWhat happens when you run the above code without the ylab(NULL) statement?\nCan you make the bars blue?\nCan you color the bars by amount or by title?"
  },
  {
    "objectID": "worksheets/visualizing-amounts.html#drawing-bars-based-on-a-count",
    "href": "worksheets/visualizing-amounts.html#drawing-bars-based-on-a-count",
    "title": "Visualizing amounts",
    "section": "Drawing bars based on a count",
    "text": "Drawing bars based on a count\nThe boxoffice dataset contains individual values, the dollar amounts, that we wanted to visualize with bars. Often, however, we encounter a slightly different scenario: A dataset doesn’t contain the numeric amounts directly, but instead contains observations we want to count. This is the case in the penguins2 dataset (see above).\nIt contains one row per penguin. If we want to make a bar plot of the number of penguins of each species (Adelie, Chinstrap, Gentoo), we cannot use geom_col() as before, because the dataset doesn’t have a column that contains these counts.\nThe solution here is to use geom_bar(), which performs a count and then displays the result of that count. Because geom_bar() counts automatically, you only have to provide it with a single aesthetic, which specifies the data column in which you are counting.\nTry this out. Make a bar plot of the number of penguins per species. Map the penguin species onto the x axis.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(penguins2, aes(x = ___)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(penguins2, aes(x = species)) +\n  geom_bar()\n\n\n\n\nTry the following additional modifications in the above code:\n\nMap penguin species onto the y axis.\nRemove the axis label that says “species”.\nChange the order of the bars manually, using fct_relevel() (see slides)."
  },
  {
    "objectID": "worksheets/visualizing-amounts.html#counting-subgroups",
    "href": "worksheets/visualizing-amounts.html#counting-subgroups",
    "title": "Visualizing amounts",
    "section": "Counting subgroups",
    "text": "Counting subgroups\ngeom_bar() automatically counts how many cases there are in each unique combination of different categorical aesthetics. In the previous example, we had only one categorical aesthetic, species. But we can add a second one, for example sex. Then geom_bar() counts the number of cases in each unique combination of species and sex and draws separate bars for each. Try this out by mapping the sex column onto the fill aesthetic.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(penguins2, aes(x = species, fill = sex)) +\n  geom_bar()\n\n\n\n\nBy default, the bars for different fill values but identical x values will be drawn on top of one-another. But there are other possibilities, which are controled by the position argument to geom_bar(). For example, try to set the position to \"dodge\".\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(penguins2, aes(x = species, fill = sex)) +\n  geom_bar(position = ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(penguins2, aes(x = species, fill = sex)) +\n  geom_bar(position = \"dodge\")\n\n\n\n\nIn the above code, also try positions \"stack\" and \"fill\"."
  },
  {
    "objectID": "worksheets/visualizing-distributions-2.html",
    "href": "worksheets/visualizing-distributions-2.html",
    "title": "Visualizing distributions 2",
    "section": "",
    "text": "In this worksheet, we will discuss how to display many distributions at once, using boxplots, violin plots, strip charts, sina plots, and ridgeline plots.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nThe dataset we will be working with contains information about the mean temperature for every day of the year 2016 in Lincoln, NE:"
  },
  {
    "objectID": "worksheets/visualizing-distributions-2.html#introduction",
    "href": "worksheets/visualizing-distributions-2.html#introduction",
    "title": "Visualizing distributions 2",
    "section": "",
    "text": "In this worksheet, we will discuss how to display many distributions at once, using boxplots, violin plots, strip charts, sina plots, and ridgeline plots.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nThe dataset we will be working with contains information about the mean temperature for every day of the year 2016 in Lincoln, NE:"
  },
  {
    "objectID": "worksheets/visualizing-distributions-2.html#boxplots-and-violins",
    "href": "worksheets/visualizing-distributions-2.html#boxplots-and-violins",
    "title": "Visualizing distributions 2",
    "section": "Boxplots and violins",
    "text": "Boxplots and violins\nWe start by drawing the distributions of mean temperatures for each month of the year (columns month and mean_temp in the dataset lincoln_temps), using boxplots. We can do this in ggplot with the geom geom_boxplot(). Try this for yourself.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(lincoln_temps, aes(x = ___, y = ___)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_boxplot()\n\n\n\n\nNext, do the same but now using violins (geom_violin()) instead of boxplots.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_violin()\n\n\n\n\nCustomize the violins by trying some of the following:\n\nChange the fill or outline color.\nSwap the x and y mappings.\nChange the bandwidth (parameter bw) or kernel (parameter kernel). These parameters work just like in geom_density() as discussed in the previous worksheet.\nSet trim = FALSE. What does this do?"
  },
  {
    "objectID": "worksheets/visualizing-distributions-2.html#strip-charts-and-jittering",
    "href": "worksheets/visualizing-distributions-2.html#strip-charts-and-jittering",
    "title": "Visualizing distributions 2",
    "section": "Strip charts and jittering",
    "text": "Strip charts and jittering\nBoth boxplots and violin plots have the disadvantage that they don’t show the individual data points. We can show individual data points by using geom_point(). Such a plot is called a strip chart.\nMake a strip chart for the Lincoln temperature data set. Hint: Use size = 0.75 to reduce the size of the individual points.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_point(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_point(size = 0.75)\n\n\n\n\nFrequently when we make strip charts we want to apply some jitter to separate points away from each other. We can do so by setting the argument position = position_jitter() in geom_point().\nWhen using position_jitter() we will normally have to specify how much jittering we want in the horizontal and vertical direction, by setting the width and height arguments: position_jitter(width = 0.15, height = 0). Both width and height are specified in units representing the resolution of the data points, and indicate jittering in either direction. So, if data points are 1 unit apart, then width = 0.15 means the jittering covers 0.3 units or 30% of the spacing of the data points.\nTry this for yourself, by making a strip chart with jittering.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_point(\n    size = 0.75,\n    position = position_jitter(___)\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_point(\n    size = 0.75,\n    position = position_jitter(width = 0.15, height = 0)\n  )\n\n\n\n\nThe function position_jitter() applies random jittering to the data points, which means the plot looks different each time you make it. (Verify this.) We can force a specific, fixed arrangement of jittering by setting the seed parameter. This parameter takes an arbitrary integer value, e.g. seed = 1234. Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_point(\n    size = 0.75,\n    position = position_jitter(width = 0.15, height = 0, seed = ___)\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_point(\n    size = 0.75,\n    position = position_jitter(width = 0.15, height = 0, seed = 1234)\n  )\n\n\n\n\nFinally, try to figure out what the parameter height does, by setting it to a value other than 0, or by removing it entirely."
  },
  {
    "objectID": "worksheets/visualizing-distributions-2.html#sina-plots",
    "href": "worksheets/visualizing-distributions-2.html#sina-plots",
    "title": "Visualizing distributions 2",
    "section": "Sina plots",
    "text": "Sina plots\nWe can create a combination of strip charts and violin plots by making sina plots, which jitter points into the shape of a violin. We can do this with geom_sina() from the ggforce package. Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_sina(size = 0.75)\n\n\n\n\nIt often makes sense to draw a sina plot on top of a violin plot. Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_violin() +\n  geom_sina(size = 0.75)\n\n\n\n\nFinally, customize the violins by removing the outline and changing the fill color.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_violin(color = NA, fill = \"cornsilk\") +  # `NA` means no color\n  geom_sina(size = 0.75)"
  },
  {
    "objectID": "worksheets/visualizing-distributions-2.html#ridgeline-plots",
    "href": "worksheets/visualizing-distributions-2.html#ridgeline-plots",
    "title": "Visualizing distributions 2",
    "section": "Ridgeline plots",
    "text": "Ridgeline plots\nAs the last alternative for visualizing multiple distributions at once, we will make ridgeline plots. These are multiple density plots staggered vertically. In ridgeline plots, we normally map the grouping variable (e.g. here, the month) to the y axis and the dependent variable (e.g. here, the mean temperature) to the x axis.\nWe can create ridgeline plots using geom_density_ridges() from the ggridges package. Try this out. Use the column month_long instead of month for the name of the month to get a slightly nicer plot. Hint: If you get an error about a missing y aesthetic you need to swap your x and y mappings.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(lincoln_temps, aes(x = mean_temp, y = month_long)) +\n  geom_density_ridges()\n\n\n\n\nWhat happens when you use month instead of month_long? Can you explain why?\nIt is often a good idea to prune the ridgelines once they are close to zero. You can do this with the parameter rel_min_height, which takes a numeric value relative to the maximum height of any ridgeline anywhere in the plot. So, rel_min_height = 0.01 would prune all lines that are less than 1% of the maximum height in the plot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(lincoln_temps, aes(x = mean_temp, y = month_long)) +\n  geom_density_ridges(rel_min_height = ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(lincoln_temps, aes(x = mean_temp, y = month_long)) +\n  geom_density_ridges(rel_min_height = 0.01)"
  }
]