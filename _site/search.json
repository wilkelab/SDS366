[
  {
    "objectID": "slides/figure-design.html#how-do-we-go",
    "href": "slides/figure-design.html#how-do-we-go",
    "title": "Figure design",
    "section": "",
    "text": "How do we go from this\n\n\n\n\n\n \n\n\n\n\n\n   to this?\n\n\n\n\n\n \n\n\n\n\n\n\nRequires coordinated modification of multiple elements:\n\n\n\ngeoms (via arguments to geoms)\nscales (via scale_*() functions)\nplot appearance (via themes)"
  },
  {
    "objectID": "slides/figure-design.html#the-starting-point-a-rough-draft",
    "href": "slides/figure-design.html#the-starting-point-a-rough-draft",
    "title": "Figure design",
    "section": "The starting point, a rough draft",
    "text": "The starting point, a rough draft\n\n\n\nggplot(lincoln_temps) +\n  aes(x = mean_temp, y = month_long) +\n  geom_density_ridges()\n\n\n\n\n\n \n\n\n\n\n\n\nYou can download the dataset using this code:\nlincoln_temps &lt;- readRDS(url(\"https://wilkelab.org/SDS366/datasets/lincoln_temps.rds\"))"
  },
  {
    "objectID": "slides/figure-design.html#set-scale-and-bandwidth-to-shape-ridgelines",
    "href": "slides/figure-design.html#set-scale-and-bandwidth-to-shape-ridgelines",
    "title": "Figure design",
    "section": "Set scale and bandwidth to shape ridgelines",
    "text": "Set scale and bandwidth to shape ridgelines\n\n\n\nggplot(lincoln_temps) +\n  aes(x = mean_temp, y = month_long) +\n  geom_density_ridges(\n    scale = 3, bandwidth = 3.4\n  )"
  },
  {
    "objectID": "slides/figure-design.html#set-rel_min_height-to-cut-ridgelines-near-zero",
    "href": "slides/figure-design.html#set-rel_min_height-to-cut-ridgelines-near-zero",
    "title": "Figure design",
    "section": "Set rel_min_height to cut ridgelines near zero",
    "text": "Set rel_min_height to cut ridgelines near zero\n\n\n\nggplot(lincoln_temps) +\n  aes(x = mean_temp, y = month_long) +\n  geom_density_ridges(\n    scale = 3, bandwidth = 3.4,\n    rel_min_height = 0.01\n  )"
  },
  {
    "objectID": "slides/figure-design.html#use-scale_-functions-to-specify-axis-labels",
    "href": "slides/figure-design.html#use-scale_-functions-to-specify-axis-labels",
    "title": "Figure design",
    "section": "Use scale_*() functions to specify axis labels",
    "text": "Use scale_*() functions to specify axis labels\n\n\n\nggplot(lincoln_temps) +\n  aes(x = mean_temp, y = month_long) +\n  geom_density_ridges(\n    scale = 3, bandwidth = 3.4,\n    rel_min_height = 0.01,\n  ) +\n  scale_x_continuous(\n    name = \"mean temperature (°F)\"\n  ) +\n  scale_y_discrete(\n    name = NULL  # NULL means no label\n  )"
  },
  {
    "objectID": "slides/figure-design.html#specify-scale-expansion",
    "href": "slides/figure-design.html#specify-scale-expansion",
    "title": "Figure design",
    "section": "Specify scale expansion",
    "text": "Specify scale expansion\n\n\n\nggplot(lincoln_temps) +\n  aes(x = mean_temp, y = month_long) +\n  geom_density_ridges(\n    scale = 3, bandwidth = 3.4,\n    rel_min_height = 0.01\n  ) +\n  scale_x_continuous(\n    name = \"mean temperature (°F)\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(\n    name = NULL,\n    expand = expansion(add = c(0.2, 2.6))\n  )"
  },
  {
    "objectID": "slides/figure-design.html#set-overall-plot-theme",
    "href": "slides/figure-design.html#set-overall-plot-theme",
    "title": "Figure design",
    "section": "Set overall plot theme",
    "text": "Set overall plot theme\n\n\n\nggplot(lincoln_temps) +\n  aes(x = mean_temp, y = month_long) +\n  geom_density_ridges(\n    scale = 3, bandwidth = 3.4,\n    rel_min_height = 0.01\n  ) +\n  scale_x_continuous(\n    name = \"mean temperature (°F)\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(\n    name = NULL,\n    expand = expansion(add = c(0.2, 2.6))\n  ) +\n  theme_minimal_grid()  # from cowplot"
  },
  {
    "objectID": "slides/figure-design.html#align-y-axis-labels-to-grid-lines",
    "href": "slides/figure-design.html#align-y-axis-labels-to-grid-lines",
    "title": "Figure design",
    "section": "Align y axis labels to grid lines",
    "text": "Align y axis labels to grid lines\n\n\n\nggplot(lincoln_temps) +\n  aes(x = mean_temp, y = month_long) +\n  geom_density_ridges(\n    scale = 3, bandwidth = 3.4,\n    rel_min_height = 0.01\n  ) +\n  scale_x_continuous(\n    name = \"mean temperature (°F)\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(\n    name = NULL,\n    expand = expansion(add = c(0.2, 2.6))\n  ) +\n  theme_minimal_grid() +\n  theme(\n    axis.text.y = element_text(vjust = 0)\n  )"
  },
  {
    "objectID": "slides/figure-design.html#change-fill-color-from-default-gray-to-blue",
    "href": "slides/figure-design.html#change-fill-color-from-default-gray-to-blue",
    "title": "Figure design",
    "section": "Change fill color from default gray to blue",
    "text": "Change fill color from default gray to blue\n\n\n\nggplot(lincoln_temps) +\n  aes(x = mean_temp, y = month_long) +\n  geom_density_ridges(\n    scale = 3, bandwidth = 3.4,\n    rel_min_height = 0.01,\n    fill = \"#7DCCFF\"\n  ) +\n  scale_x_continuous(\n    name = \"mean temperature (°F)\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(\n    name = NULL,\n    expand = expansion(add = c(0.2, 2.6))\n  ) +\n  theme_minimal_grid() +\n  theme(\n    axis.text.y = element_text(vjust = 0)\n  )"
  },
  {
    "objectID": "slides/figure-design.html#draw-lines-in-white-instead-of-black",
    "href": "slides/figure-design.html#draw-lines-in-white-instead-of-black",
    "title": "Figure design",
    "section": "Draw lines in white instead of black",
    "text": "Draw lines in white instead of black\n\n\n\nggplot(lincoln_temps) +\n  aes(x = mean_temp, y = month_long) +\n  geom_density_ridges(\n    scale = 3, bandwidth = 3.4,\n    rel_min_height = 0.01,\n    fill = \"#7DCCFF\",\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"mean temperature (°F)\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(\n    name = NULL,\n    expand = expansion(add = c(0.2, 2.6))\n  ) +\n  theme_minimal_grid() +\n  theme(\n    axis.text.y = element_text(vjust = 0)\n  )"
  },
  {
    "objectID": "slides/figure-design.html#using-ready-made-themes",
    "href": "slides/figure-design.html#using-ready-made-themes",
    "title": "Figure design",
    "section": "Using ready-made themes",
    "text": "Using ready-made themes\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point()\n  # default theme is theme_gray()"
  },
  {
    "objectID": "slides/figure-design.html#using-ready-made-themes-1",
    "href": "slides/figure-design.html#using-ready-made-themes-1",
    "title": "Figure design",
    "section": "Using ready-made themes",
    "text": "Using ready-made themes\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point() +\n  theme_gray()"
  },
  {
    "objectID": "slides/figure-design.html#using-ready-made-themes-2",
    "href": "slides/figure-design.html#using-ready-made-themes-2",
    "title": "Figure design",
    "section": "Using ready-made themes",
    "text": "Using ready-made themes\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point() +\n  theme_gray(14) # most themes take a font-size argument to scale text size"
  },
  {
    "objectID": "slides/figure-design.html#using-ready-made-themes-3",
    "href": "slides/figure-design.html#using-ready-made-themes-3",
    "title": "Figure design",
    "section": "Using ready-made themes",
    "text": "Using ready-made themes\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point() +\n  theme_bw(14)"
  },
  {
    "objectID": "slides/figure-design.html#using-ready-made-themes-4",
    "href": "slides/figure-design.html#using-ready-made-themes-4",
    "title": "Figure design",
    "section": "Using ready-made themes",
    "text": "Using ready-made themes\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point() +\n  theme_minimal(14)"
  },
  {
    "objectID": "slides/figure-design.html#using-ready-made-themes-5",
    "href": "slides/figure-design.html#using-ready-made-themes-5",
    "title": "Figure design",
    "section": "Using ready-made themes",
    "text": "Using ready-made themes\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point() +\n  theme_classic(14)"
  },
  {
    "objectID": "slides/figure-design.html#using-ready-made-themes-6",
    "href": "slides/figure-design.html#using-ready-made-themes-6",
    "title": "Figure design",
    "section": "Using ready-made themes",
    "text": "Using ready-made themes\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point() +\n  theme_half_open()  # from package cowplot"
  },
  {
    "objectID": "slides/figure-design.html#using-ready-made-themes-7",
    "href": "slides/figure-design.html#using-ready-made-themes-7",
    "title": "Figure design",
    "section": "Using ready-made themes",
    "text": "Using ready-made themes\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point() +\n  theme_minimal_grid()  # from package cowplot"
  },
  {
    "objectID": "slides/figure-design.html#using-ready-made-themes-8",
    "href": "slides/figure-design.html#using-ready-made-themes-8",
    "title": "Figure design",
    "section": "Using ready-made themes",
    "text": "Using ready-made themes\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point() +\n  theme_minimal_hgrid()  # from package cowplot"
  },
  {
    "objectID": "slides/figure-design.html#using-ready-made-themes-9",
    "href": "slides/figure-design.html#using-ready-made-themes-9",
    "title": "Figure design",
    "section": "Using ready-made themes",
    "text": "Using ready-made themes\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point() +\n  theme_minimal_vgrid()  # from package cowplot"
  },
  {
    "objectID": "slides/figure-design.html#using-ready-made-themes-10",
    "href": "slides/figure-design.html#using-ready-made-themes-10",
    "title": "Figure design",
    "section": "Using ready-made themes",
    "text": "Using ready-made themes\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point() +\n  theme_economist(14)       # from package ggthemes"
  },
  {
    "objectID": "slides/figure-design.html#using-ready-made-themes-11",
    "href": "slides/figure-design.html#using-ready-made-themes-11",
    "title": "Figure design",
    "section": "Using ready-made themes",
    "text": "Using ready-made themes\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point() +\n  theme_economist(14) + # from package ggthemes\n  scale_color_economist()"
  },
  {
    "objectID": "slides/figure-design.html#using-ready-made-themes-12",
    "href": "slides/figure-design.html#using-ready-made-themes-12",
    "title": "Figure design",
    "section": "Using ready-made themes",
    "text": "Using ready-made themes\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point() +\n  theme_fivethirtyeight(14) + # from package ggthemes\n  scale_color_fivethirtyeight()"
  },
  {
    "objectID": "slides/figure-design.html#customizing-theme-elements",
    "href": "slides/figure-design.html#customizing-theme-elements",
    "title": "Figure design",
    "section": "Customizing theme elements",
    "text": "Customizing theme elements\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid()"
  },
  {
    "objectID": "slides/figure-design.html#customizing-theme-elements-1",
    "href": "slides/figure-design.html#customizing-theme-elements-1",
    "title": "Figure design",
    "section": "Customizing theme elements",
    "text": "Customizing theme elements\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    # change overall font family\n    # (requires font to be available)\n    text = element_text(\n      family = \"Comic Sans MS\"\n    )\n  )"
  },
  {
    "objectID": "slides/figure-design.html#customizing-theme-elements-2",
    "href": "slides/figure-design.html#customizing-theme-elements-2",
    "title": "Figure design",
    "section": "Customizing theme elements",
    "text": "Customizing theme elements\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    # change color of axis titles\n    axis.title = element_text(\n      color = \"royalblue2\"\n    )\n  )"
  },
  {
    "objectID": "slides/figure-design.html#customizing-theme-elements-3",
    "href": "slides/figure-design.html#customizing-theme-elements-3",
    "title": "Figure design",
    "section": "Customizing theme elements",
    "text": "Customizing theme elements\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    # change color of only the x axis title\n    axis.title.x = element_text(\n      color = \"royalblue2\"\n    )\n  )"
  },
  {
    "objectID": "slides/figure-design.html#customizing-theme-elements-4",
    "href": "slides/figure-design.html#customizing-theme-elements-4",
    "title": "Figure design",
    "section": "Customizing theme elements",
    "text": "Customizing theme elements\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    # change all text colors?\n    # why does it not work?\n    text = element_text(color = \"royalblue2\")\n  )"
  },
  {
    "objectID": "slides/figure-design.html#customizing-theme-elements-5",
    "href": "slides/figure-design.html#customizing-theme-elements-5",
    "title": "Figure design",
    "section": "Customizing theme elements",
    "text": "Customizing theme elements\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    text = element_text(color = \"royalblue2\"),\n    axis.text = element_text(\n      color = \"royalblue2\"\n    )\n  )\n\n\n\n\n\n \n\n\n\n\n\n\nThe element axis.text has its own color set in the theme. Therefore it doesn’t inherit from text."
  },
  {
    "objectID": "slides/figure-design.html#horizontal-and-vertical-alignment",
    "href": "slides/figure-design.html#horizontal-and-vertical-alignment",
    "title": "Figure design",
    "section": "Horizontal and vertical alignment",
    "text": "Horizontal and vertical alignment\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    axis.title.x = element_text(\n      # horizontal justification\n      # (0 = left)\n      hjust = 0\n    )\n  )"
  },
  {
    "objectID": "slides/figure-design.html#horizontal-and-vertical-alignment-1",
    "href": "slides/figure-design.html#horizontal-and-vertical-alignment-1",
    "title": "Figure design",
    "section": "Horizontal and vertical alignment",
    "text": "Horizontal and vertical alignment\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    axis.title.x = element_text(\n      # horizontal justification\n      # (0.5 = center)\n      hjust = 0.5\n    )\n  )"
  },
  {
    "objectID": "slides/figure-design.html#horizontal-and-vertical-alignment-2",
    "href": "slides/figure-design.html#horizontal-and-vertical-alignment-2",
    "title": "Figure design",
    "section": "Horizontal and vertical alignment",
    "text": "Horizontal and vertical alignment\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    axis.title.x = element_text(\n      # horizontal justification\n      # (1 = right)\n      hjust = 1\n    )\n  )"
  },
  {
    "objectID": "slides/figure-design.html#horizontal-and-vertical-alignment-3",
    "href": "slides/figure-design.html#horizontal-and-vertical-alignment-3",
    "title": "Figure design",
    "section": "Horizontal and vertical alignment",
    "text": "Horizontal and vertical alignment\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    axis.text.y = element_text(\n      # vertical justification\n      # (0 = bottom)\n      vjust = 0\n    )\n  )"
  },
  {
    "objectID": "slides/figure-design.html#horizontal-and-vertical-alignment-4",
    "href": "slides/figure-design.html#horizontal-and-vertical-alignment-4",
    "title": "Figure design",
    "section": "Horizontal and vertical alignment",
    "text": "Horizontal and vertical alignment\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    axis.text.y = element_text(\n      # vertical justification\n      # (0.5 = center)\n      vjust = 0.5\n    )\n  )"
  },
  {
    "objectID": "slides/figure-design.html#horizontal-and-vertical-alignment-5",
    "href": "slides/figure-design.html#horizontal-and-vertical-alignment-5",
    "title": "Figure design",
    "section": "Horizontal and vertical alignment",
    "text": "Horizontal and vertical alignment\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    axis.text.y = element_text(\n      # vertical justification\n      # (1 = top)\n      vjust = 1\n    )\n  )"
  },
  {
    "objectID": "slides/figure-design.html#remove-elements-entirely-element_blank",
    "href": "slides/figure-design.html#remove-elements-entirely-element_blank",
    "title": "Figure design",
    "section": "Remove elements entirely: element_blank()",
    "text": "Remove elements entirely: element_blank()\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    # all text gone\n    text = element_blank()\n  )"
  },
  {
    "objectID": "slides/figure-design.html#remove-elements-entirely-element_blank-1",
    "href": "slides/figure-design.html#remove-elements-entirely-element_blank-1",
    "title": "Figure design",
    "section": "Remove elements entirely: element_blank()",
    "text": "Remove elements entirely: element_blank()\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    # no axis titles\n    axis.title = element_blank()\n  )"
  },
  {
    "objectID": "slides/figure-design.html#set-background-color-element_rect",
    "href": "slides/figure-design.html#set-background-color-element_rect",
    "title": "Figure design",
    "section": "Set background color: element_rect()",
    "text": "Set background color: element_rect()\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    plot.background = element_rect(\n      fill = \"aliceblue\"\n    )\n  )"
  },
  {
    "objectID": "slides/figure-design.html#set-background-color-element_rect-1",
    "href": "slides/figure-design.html#set-background-color-element_rect-1",
    "title": "Figure design",
    "section": "Set background color: element_rect()",
    "text": "Set background color: element_rect()\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    panel.background = element_rect(\n      fill = \"aliceblue\"\n    )\n  )"
  },
  {
    "objectID": "slides/figure-design.html#set-background-color-element_rect-2",
    "href": "slides/figure-design.html#set-background-color-element_rect-2",
    "title": "Figure design",
    "section": "Set background color: element_rect()",
    "text": "Set background color: element_rect()\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    legend.box.background = element_rect(\n      fill = \"aliceblue\",\n      color = \"steelblue4\" # line color\n    )\n  )"
  },
  {
    "objectID": "slides/figure-design.html#set-background-color-element_rect-3",
    "href": "slides/figure-design.html#set-background-color-element_rect-3",
    "title": "Figure design",
    "section": "Set background color: element_rect()",
    "text": "Set background color: element_rect()\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    legend.box.background = element_rect(\n      fill = \"aliceblue\",\n      color = \"steelblue4\" # line color\n    ),\n    legend.box.margin = margin(7, 7, 7, 7)\n  )"
  },
  {
    "objectID": "slides/figure-design.html#move-the-legend-legend.position",
    "href": "slides/figure-design.html#move-the-legend-legend.position",
    "title": "Figure design",
    "section": "Move the legend: legend.position",
    "text": "Move the legend: legend.position\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    legend.box.background = element_rect(\n      fill = \"aliceblue\",\n      color = \"steelblue4\" # line color\n    ),\n    legend.box.margin = margin(7, 7, 7, 7),\n    # legend on top of plot\n    legend.position = \"top\"\n  )"
  },
  {
    "objectID": "slides/figure-design.html#move-the-legend-legend.position-1",
    "href": "slides/figure-design.html#move-the-legend-legend.position-1",
    "title": "Figure design",
    "section": "Move the legend: legend.position",
    "text": "Move the legend: legend.position\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    legend.box.background = element_rect(\n      fill = \"aliceblue\",\n      color = \"steelblue4\" # line color\n    ),\n    legend.box.margin = margin(7, 7, 7, 7),\n    # legend inside plot\n    legend.position = \"inside\", \n    # relative position inside plot panel\n    legend.position.inside = c(0.98, 0.02),\n    # justification relative to position\n    legend.justification = c(1, 0)\n  )"
  },
  {
    "objectID": "slides/figure-design.html#further-reading",
    "href": "slides/figure-design.html#further-reading",
    "title": "Figure design",
    "section": "Further reading",
    "text": "Further reading\n\n\nFundamentals of Data Visualization: Chapter 23: Balance the data and the context\nData Visualization—A Practical Introduction: Chapter 8.3: Change the appearance of plots with themes\nggplot2 reference documentation: Complete themes\nggplot2 reference documentation: Modify components of a theme"
  },
  {
    "objectID": "slides/visualizing-amounts.html#many-datasets-contain-simple-amounts",
    "href": "slides/visualizing-amounts.html#many-datasets-contain-simple-amounts",
    "title": "Visualizing amounts",
    "section": "Many datasets contain simple amounts",
    "text": "Many datasets contain simple amounts\n\n\nExample: Highest grossing movies Dec. 2017\n\n\n\n\n\n\nrank\ntitle\namount\n\n\n\n\n1\nStar Wars\n71.57\n\n\n2\nJumanji\n36.17\n\n\n3\nPitch Perfect 3\n19.93\n\n\n4\nGreatest Showman\n8.81\n\n\n5\nFerdinand\n7.32\n\n\n\n\n\n\n\n\n\nData source: Box Office Mojo"
  },
  {
    "objectID": "slides/visualizing-amounts.html#we-can-visualize-amounts-with-bar-plots",
    "href": "slides/visualizing-amounts.html#we-can-visualize-amounts-with-bar-plots",
    "title": "Visualizing amounts",
    "section": "We can visualize amounts with bar plots",
    "text": "We can visualize amounts with bar plots"
  },
  {
    "objectID": "slides/visualizing-amounts.html#bars-can-also-run-horizontally",
    "href": "slides/visualizing-amounts.html#bars-can-also-run-horizontally",
    "title": "Visualizing amounts",
    "section": "Bars can also run horizontally",
    "text": "Bars can also run horizontally"
  },
  {
    "objectID": "slides/visualizing-amounts.html#avoid-rotated-axis-labels",
    "href": "slides/visualizing-amounts.html#avoid-rotated-axis-labels",
    "title": "Visualizing amounts",
    "section": "Avoid rotated axis labels",
    "text": "Avoid rotated axis labels"
  },
  {
    "objectID": "slides/visualizing-amounts.html#avoid-rotated-axis-labels-1",
    "href": "slides/visualizing-amounts.html#avoid-rotated-axis-labels-1",
    "title": "Visualizing amounts",
    "section": "Avoid rotated axis labels",
    "text": "Avoid rotated axis labels"
  },
  {
    "objectID": "slides/visualizing-amounts.html#pay-attention-to-the-order-of-the-bars",
    "href": "slides/visualizing-amounts.html#pay-attention-to-the-order-of-the-bars",
    "title": "Visualizing amounts",
    "section": "Pay attention to the order of the bars",
    "text": "Pay attention to the order of the bars"
  },
  {
    "objectID": "slides/visualizing-amounts.html#pay-attention-to-the-order-of-the-bars-1",
    "href": "slides/visualizing-amounts.html#pay-attention-to-the-order-of-the-bars-1",
    "title": "Visualizing amounts",
    "section": "Pay attention to the order of the bars",
    "text": "Pay attention to the order of the bars"
  },
  {
    "objectID": "slides/visualizing-amounts.html#we-can-use-dots-instead-of-bars",
    "href": "slides/visualizing-amounts.html#we-can-use-dots-instead-of-bars",
    "title": "Visualizing amounts",
    "section": "We can use dots instead of bars",
    "text": "We can use dots instead of bars"
  },
  {
    "objectID": "slides/visualizing-amounts.html#dots-are-preferable-if-we-want-to-truncate-the-axes",
    "href": "slides/visualizing-amounts.html#dots-are-preferable-if-we-want-to-truncate-the-axes",
    "title": "Visualizing amounts",
    "section": "Dots are preferable if we want to truncate the axes",
    "text": "Dots are preferable if we want to truncate the axes"
  },
  {
    "objectID": "slides/visualizing-amounts.html#dots-are-preferable-if-we-want-to-truncate-the-axes-1",
    "href": "slides/visualizing-amounts.html#dots-are-preferable-if-we-want-to-truncate-the-axes-1",
    "title": "Visualizing amounts",
    "section": "Dots are preferable if we want to truncate the axes",
    "text": "Dots are preferable if we want to truncate the axes\n\n\n\n\n\n \n\n\n\n\n\nBar lengths donot accurately represent thedata values"
  },
  {
    "objectID": "slides/visualizing-amounts.html#dots-are-preferable-if-we-want-to-truncate-the-axes-2",
    "href": "slides/visualizing-amounts.html#dots-are-preferable-if-we-want-to-truncate-the-axes-2",
    "title": "Visualizing amounts",
    "section": "Dots are preferable if we want to truncate the axes",
    "text": "Dots are preferable if we want to truncate the axes\n\n\n\n\n\n \n\n\n\n\n\nKey featuresof the dataare obscured"
  },
  {
    "objectID": "slides/visualizing-amounts.html#dots-are-preferable-if-we-want-to-truncate-the-axes-3",
    "href": "slides/visualizing-amounts.html#dots-are-preferable-if-we-want-to-truncate-the-axes-3",
    "title": "Visualizing amounts",
    "section": "Dots are preferable if we want to truncate the axes",
    "text": "Dots are preferable if we want to truncate the axes"
  },
  {
    "objectID": "slides/visualizing-amounts.html#we-use-grouped-bars-for-higher-dimensional-datasets",
    "href": "slides/visualizing-amounts.html#we-use-grouped-bars-for-higher-dimensional-datasets",
    "title": "Visualizing amounts",
    "section": "We use grouped bars for higher-dimensional datasets",
    "text": "We use grouped bars for higher-dimensional datasets\n\n\n\n\n\n\n \n\n\n\n\n\nData source: United States Census Bureau, 2016"
  },
  {
    "objectID": "slides/visualizing-amounts.html#we-are-free-to-choose-by-which-variable-to-group",
    "href": "slides/visualizing-amounts.html#we-are-free-to-choose-by-which-variable-to-group",
    "title": "Visualizing amounts",
    "section": "We are free to choose by which variable to group",
    "text": "We are free to choose by which variable to group\n\n\n\n\n\n\n \n\n\n\n\n\nData source: United States Census Bureau, 2016"
  },
  {
    "objectID": "slides/visualizing-amounts.html#we-can-also-use-multiple-plot-panels-facets",
    "href": "slides/visualizing-amounts.html#we-can-also-use-multiple-plot-panels-facets",
    "title": "Visualizing amounts",
    "section": "We can also use multiple plot panels (facets)",
    "text": "We can also use multiple plot panels (facets)\n\n\n\n\n\n \n\n\n\n\n\nData source: United States Census Bureau, 2016"
  },
  {
    "objectID": "slides/visualizing-amounts.html#dataset-highest-grossing-movies-dec.-2017",
    "href": "slides/visualizing-amounts.html#dataset-highest-grossing-movies-dec.-2017",
    "title": "Visualizing amounts",
    "section": "Dataset: Highest grossing movies Dec. 2017",
    "text": "Dataset: Highest grossing movies Dec. 2017\n\n# Data from Box Office Mojo for Dec. 22-24, 2017. \nboxoffice &lt;- tibble(\n  rank = 1:5,\n  title = c(\n    \"Star Wars\", \"Jumanji\", \"Pitch Perfect 3\",\n    \"Greatest Showman\", \"Ferdinand\"\n  ),\n  amount = c(71.57, 36.17, 19.93, 8.81, 7.32) # million USD\n)\n\nboxoffice\n\n# A tibble: 5 × 3\n   rank title            amount\n  &lt;int&gt; &lt;chr&gt;             &lt;dbl&gt;\n1     1 Star Wars         71.6 \n2     2 Jumanji           36.2 \n3     3 Pitch Perfect 3   19.9 \n4     4 Greatest Showman   8.81\n5     5 Ferdinand          7.32"
  },
  {
    "objectID": "slides/visualizing-amounts.html#visualize-as-a-bar-plot",
    "href": "slides/visualizing-amounts.html#visualize-as-a-bar-plot",
    "title": "Visualizing amounts",
    "section": "Visualize as a bar plot",
    "text": "Visualize as a bar plot\n\nggplot(boxoffice, aes(title, amount)) +\n  geom_col()  # \"col\" stands for column"
  },
  {
    "objectID": "slides/visualizing-amounts.html#order-by-data-value",
    "href": "slides/visualizing-amounts.html#order-by-data-value",
    "title": "Visualizing amounts",
    "section": "Order by data value",
    "text": "Order by data value\n\nggplot(boxoffice, aes(fct_reorder(title, amount), amount)) +\n  geom_col()  # \"col\" stands for column"
  },
  {
    "objectID": "slides/visualizing-amounts.html#order-by-data-value-descending",
    "href": "slides/visualizing-amounts.html#order-by-data-value-descending",
    "title": "Visualizing amounts",
    "section": "Order by data value, descending",
    "text": "Order by data value, descending\n\nggplot(boxoffice, aes(fct_reorder(title, -amount), amount)) +\n  geom_col() + \n  xlab(NULL) # remove x axis label"
  },
  {
    "objectID": "slides/visualizing-amounts.html#flip-x-and-y-set-custom-x-axis-label",
    "href": "slides/visualizing-amounts.html#flip-x-and-y-set-custom-x-axis-label",
    "title": "Visualizing amounts",
    "section": "Flip x and y, set custom x axis label",
    "text": "Flip x and y, set custom x axis label\n\nggplot(boxoffice, aes(amount, fct_reorder(title, amount))) +\n  geom_col() +\n  xlab(\"amount (in million USD)\") +\n  ylab(NULL)"
  },
  {
    "objectID": "slides/visualizing-amounts.html#example-visualize-number-of-penguins-per-species",
    "href": "slides/visualizing-amounts.html#example-visualize-number-of-penguins-per-species",
    "title": "Visualizing amounts",
    "section": "Example: Visualize number of penguins per species",
    "text": "Example: Visualize number of penguins per species\n\n\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "slides/visualizing-amounts.html#use-geom_bar-to-count-before-plotting",
    "href": "slides/visualizing-amounts.html#use-geom_bar-to-count-before-plotting",
    "title": "Visualizing amounts",
    "section": "Use geom_bar() to count before plotting",
    "text": "Use geom_bar() to count before plotting\n\nggplot(penguins, aes(y = species)) + # no x aesthetic needed\n  geom_bar()"
  },
  {
    "objectID": "slides/visualizing-amounts.html#getting-the-bars-into-the-right-order",
    "href": "slides/visualizing-amounts.html#getting-the-bars-into-the-right-order",
    "title": "Visualizing amounts",
    "section": "Getting the bars into the right order",
    "text": "Getting the bars into the right order\n\n\nOption 1: Manually, using fct_relevel()\n\nggplot(penguins, aes(y = fct_relevel(species, \"Chinstrap\", \"Gentoo\", \"Adelie\"))) +\n  geom_bar() +\n  ylab(NULL)"
  },
  {
    "objectID": "slides/visualizing-amounts.html#getting-the-bars-into-the-right-order-1",
    "href": "slides/visualizing-amounts.html#getting-the-bars-into-the-right-order-1",
    "title": "Visualizing amounts",
    "section": "Getting the bars into the right order",
    "text": "Getting the bars into the right order\n\nOption 2: Using fct_rev() and fct_infreq() from the forcats package\n\nggplot(penguins, aes(y = fct_rev(fct_infreq(species)))) +\n  geom_bar() +\n  ylab(NULL)"
  },
  {
    "objectID": "slides/visualizing-amounts.html#display-counts-by-species-and-sex",
    "href": "slides/visualizing-amounts.html#display-counts-by-species-and-sex",
    "title": "Visualizing amounts",
    "section": "Display counts by species and sex",
    "text": "Display counts by species and sex\n\n\nggplot(penguins, aes(sex, fill = species)) +\n  geom_bar()"
  },
  {
    "objectID": "slides/visualizing-amounts.html#remove-missing-values-nas",
    "href": "slides/visualizing-amounts.html#remove-missing-values-nas",
    "title": "Visualizing amounts",
    "section": "Remove missing values (NAs)",
    "text": "Remove missing values (NAs)\n\n\npenguins2 &lt;- na.omit(penguins) # remove all rows with any missing values\n\nggplot(penguins2, aes(sex, fill = species)) +\n  geom_bar()"
  },
  {
    "objectID": "slides/visualizing-amounts.html#positions-define-how-subgroups-are-shown",
    "href": "slides/visualizing-amounts.html#positions-define-how-subgroups-are-shown",
    "title": "Visualizing amounts",
    "section": "Positions define how subgroups are shown",
    "text": "Positions define how subgroups are shown\n\nposition = \"dodge\": Place bars for subgroups side-by-side\n\nggplot(penguins2, aes(sex, fill = species)) +\n  geom_bar(position = \"dodge\")"
  },
  {
    "objectID": "slides/visualizing-amounts.html#positions-define-how-subgroups-are-shown-1",
    "href": "slides/visualizing-amounts.html#positions-define-how-subgroups-are-shown-1",
    "title": "Visualizing amounts",
    "section": "Positions define how subgroups are shown",
    "text": "Positions define how subgroups are shown\n\nposition = \"stack\": Place bars for subgroups on top of each other\n\nggplot(penguins2, aes(sex, fill = species)) +\n  geom_bar(position = \"stack\")"
  },
  {
    "objectID": "slides/visualizing-amounts.html#positions-define-how-subgroups-are-shown-2",
    "href": "slides/visualizing-amounts.html#positions-define-how-subgroups-are-shown-2",
    "title": "Visualizing amounts",
    "section": "Positions define how subgroups are shown",
    "text": "Positions define how subgroups are shown\n\nposition = \"fill\": Like \"stack\", but scale to 100%\n\nggplot(penguins2, aes(sex, fill = species)) +\n  geom_bar(position = \"fill\")"
  },
  {
    "objectID": "slides/visualizing-amounts.html#further-reading",
    "href": "slides/visualizing-amounts.html#further-reading",
    "title": "Visualizing amounts",
    "section": "Further reading",
    "text": "Further reading\n\n\nFundamentals of Data Visualization: Chapter 6: Visualizing amounts\nData Visualization—A Practical Introduction: Chapter 4.4: Geoms can transform data\nggplot2 reference documentation: geom_bar(), geom_col()\nggplot2 reference documentation: position_stack(), position_fill()"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#dataset-daily-average-temperatures-for-various-locations",
    "href": "slides/aesthetic-mappings.html#dataset-daily-average-temperatures-for-various-locations",
    "title": "Aesthetic mappings",
    "section": "Dataset:Daily average temperatures for various locations",
    "text": "Dataset:Daily average temperatures for various locations\n\n\n\n\n\n\nlocation\nday_of_year\nmonth\ntemperature\n\n\n\n\nDeath Valley\n1\n01\n51.0\n\n\nDeath Valley\n2\n01\n51.2\n\n\nDeath Valley\n3\n01\n51.3\n\n\nDeath Valley\n4\n01\n51.4\n\n\nDeath Valley\n5\n01\n51.6\n\n\nDeath Valley\n6\n01\n51.7\n\n\nDeath Valley\n7\n01\n51.9\n\n\nDeath Valley\n8\n01\n52.0\n\n\nDeath Valley\n9\n01\n52.2\n\n\nDeath Valley\n10\n01\n52.3\n\n\nDeath Valley\n11\n01\n52.5\n\n\nDeath Valley\n12\n01\n52.7\n\n\nDeath Valley\n13\n01\n52.9"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#temperatures-mapped-onto-y-position",
    "href": "slides/aesthetic-mappings.html#temperatures-mapped-onto-y-position",
    "title": "Aesthetic mappings",
    "section": "Temperatures mapped onto y position",
    "text": "Temperatures mapped onto y position"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#temperatures-mapped-onto-color",
    "href": "slides/aesthetic-mappings.html#temperatures-mapped-onto-color",
    "title": "Aesthetic mappings",
    "section": "Temperatures mapped onto color",
    "text": "Temperatures mapped onto color"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#commonly-used-aesthetics",
    "href": "slides/aesthetic-mappings.html#commonly-used-aesthetics",
    "title": "Aesthetic mappings",
    "section": "Commonly used aesthetics",
    "text": "Commonly used aesthetics"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#the-same-data-values-can-be-mapped-to-different-aesthetics",
    "href": "slides/aesthetic-mappings.html#the-same-data-values-can-be-mapped-to-different-aesthetics",
    "title": "Aesthetic mappings",
    "section": "The same data values can be mapped to different aesthetics",
    "text": "The same data values can be mapped to different aesthetics"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#we-can-use-many-different-aesthetics-at-once",
    "href": "slides/aesthetic-mappings.html#we-can-use-many-different-aesthetics-at-once",
    "title": "Aesthetic mappings",
    "section": "We can use many different aesthetics at once",
    "text": "We can use many different aesthetics at once"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#getting-the-data",
    "href": "slides/aesthetic-mappings.html#getting-the-data",
    "title": "Aesthetic mappings",
    "section": "Getting the data",
    "text": "Getting the data\nAll examples will use the temperatures dataset:\n\ntemperatures &lt;- read_csv(\"https://wilkelab.org/SDS366/datasets/tempnormals.csv\") |&gt;\n  mutate(\n    location = factor(\n      location, levels = c(\"Death Valley\", \"Houston\", \"San Diego\", \"Chicago\")\n    )\n  ) |&gt;\n  select(location, station_id, day_of_year, month, temperature)"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#we-define-the-mapping-with-aes",
    "href": "slides/aesthetic-mappings.html#we-define-the-mapping-with-aes",
    "title": "Aesthetic mappings",
    "section": "We define the mapping with aes()",
    "text": "We define the mapping with aes()\n\nggplot(\n  data = temperatures,\n  mapping = aes(x = day_of_year, y = temperature, color = location)\n) + \n  geom_line()"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#we-define-the-mapping-with-aes-1",
    "href": "slides/aesthetic-mappings.html#we-define-the-mapping-with-aes-1",
    "title": "Aesthetic mappings",
    "section": "We define the mapping with aes()",
    "text": "We define the mapping with aes()\n\nggplot(\n  data = temperatures,\n  mapping = aes(x = day_of_year, y = location, color = temperature)\n) + \n  geom_point(size = 5)"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#we-frequently-omit-argument-names",
    "href": "slides/aesthetic-mappings.html#we-frequently-omit-argument-names",
    "title": "Aesthetic mappings",
    "section": "We frequently omit argument names",
    "text": "We frequently omit argument names\nLong form, all arguments are named:\nggplot(\n  data = temperatures,\n  mapping = aes(x = day_of_year, y = location, color = temperature)\n) + geom_point(size = 5)\n\n\nAbbreviated form, common arguments remain unnamed:\nggplot(temperatures, aes(day_of_year, location, color = temperature)) + \n  geom_point(size = 5)"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#the-geom-determines-how-the-data-is-shown",
    "href": "slides/aesthetic-mappings.html#the-geom-determines-how-the-data-is-shown",
    "title": "Aesthetic mappings",
    "section": "The geom determines how the data is shown",
    "text": "The geom determines how the data is shown\n\nggplot(temperatures, aes(day_of_year, temperature, color = location)) + \n  geom_line()"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#the-geom-determines-how-the-data-is-shown-1",
    "href": "slides/aesthetic-mappings.html#the-geom-determines-how-the-data-is-shown-1",
    "title": "Aesthetic mappings",
    "section": "The geom determines how the data is shown",
    "text": "The geom determines how the data is shown\n\nggplot(temperatures, aes(day_of_year, location, color = temperature)) + \n  geom_point(size = 5)"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#the-geom-determines-how-the-data-is-shown-2",
    "href": "slides/aesthetic-mappings.html#the-geom-determines-how-the-data-is-shown-2",
    "title": "Aesthetic mappings",
    "section": "The geom determines how the data is shown",
    "text": "The geom determines how the data is shown\n\nggplot(temperatures, aes(month, temperature, color = location)) + \n  geom_boxplot()"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#the-geom-determines-how-the-data-is-shown-3",
    "href": "slides/aesthetic-mappings.html#the-geom-determines-how-the-data-is-shown-3",
    "title": "Aesthetic mappings",
    "section": "The geom determines how the data is shown",
    "text": "The geom determines how the data is shown\n\nggplot(temperatures, aes(month, temperature, fill = location)) + \n  geom_violin() + \n  facet_wrap(~location) # make separate panel per location"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#distinguish-between-color-and-fill",
    "href": "slides/aesthetic-mappings.html#distinguish-between-color-and-fill",
    "title": "Aesthetic mappings",
    "section": "Distinguish between color and fill",
    "text": "Distinguish between color and fill\n\n\ncolor Applies color to points, lines, text, borders\n\n\n\nfill Applies color to any filled areas"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#many-geoms-use-both-color-and-fill",
    "href": "slides/aesthetic-mappings.html#many-geoms-use-both-color-and-fill",
    "title": "Aesthetic mappings",
    "section": "Many geoms use both color and fill",
    "text": "Many geoms use both color and fill\n\nggplot(temperatures, aes(month, temperature, color = location)) + \n  geom_boxplot()"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#many-geoms-use-both-color-and-fill-1",
    "href": "slides/aesthetic-mappings.html#many-geoms-use-both-color-and-fill-1",
    "title": "Aesthetic mappings",
    "section": "Many geoms use both color and fill",
    "text": "Many geoms use both color and fill\n\nggplot(temperatures, aes(month, temperature, fill = location)) + \n  geom_boxplot()"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#many-geoms-use-both-color-and-fill-2",
    "href": "slides/aesthetic-mappings.html#many-geoms-use-both-color-and-fill-2",
    "title": "Aesthetic mappings",
    "section": "Many geoms use both color and fill",
    "text": "Many geoms use both color and fill\n\nggplot(temperatures, aes(month, temperature, color = location, fill = location)) + \n  geom_boxplot()"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#aesthetics-can-also-be-used-as-parameters",
    "href": "slides/aesthetic-mappings.html#aesthetics-can-also-be-used-as-parameters",
    "title": "Aesthetic mappings",
    "section": "Aesthetics can also be used as parameters",
    "text": "Aesthetics can also be used as parameters\n\nggplot(temperatures, aes(month, temperature, fill = location)) + \n  geom_boxplot(color = \"steelblue\")"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#aesthetics-can-also-be-used-as-parameters-1",
    "href": "slides/aesthetic-mappings.html#aesthetics-can-also-be-used-as-parameters-1",
    "title": "Aesthetic mappings",
    "section": "Aesthetics can also be used as parameters",
    "text": "Aesthetics can also be used as parameters\n\nggplot(temperatures, aes(month, temperature, color = location)) + \n  geom_boxplot(fill = \"steelblue\")"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#further-reading",
    "href": "slides/aesthetic-mappings.html#further-reading",
    "title": "Aesthetic mappings",
    "section": "Further reading",
    "text": "Further reading\n\n\nFundamentals of Data Visualization: Chapter 2: Visualizing data\nData Visualization—A Practical Introduction: Chapter 3: Make a plot\nggplot2 reference documentation\nggplot2 book\nggplot2 cheatsheet"
  },
  {
    "objectID": "worksheets/visualizing-amounts.html",
    "href": "worksheets/visualizing-amounts.html",
    "title": "Visualizing amounts",
    "section": "",
    "text": "In this worksheet, we will discuss a core concept of ggplot, the mapping of data values onto aesthetics.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with two datasets. First, box-office gross results for Dec. 22-24, 2017:\n\n\n\n\n\n\n\n\nSecond, data on individual penguins on Antarctica. Note that missing values have been removed:\npenguins2"
  },
  {
    "objectID": "worksheets/visualizing-amounts.html#introduction",
    "href": "worksheets/visualizing-amounts.html#introduction",
    "title": "Visualizing amounts",
    "section": "",
    "text": "In this worksheet, we will discuss a core concept of ggplot, the mapping of data values onto aesthetics.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with two datasets. First, box-office gross results for Dec. 22-24, 2017:\n\n\n\n\n\n\n\n\nSecond, data on individual penguins on Antarctica. Note that missing values have been removed:\npenguins2"
  },
  {
    "objectID": "worksheets/visualizing-amounts.html#drawing-numerical-values-as-bars",
    "href": "worksheets/visualizing-amounts.html#drawing-numerical-values-as-bars",
    "title": "Visualizing amounts",
    "section": "Drawing numerical values as bars",
    "text": "Drawing numerical values as bars\nFor the boxoffice dataset, we want to draw the amount (Weekend gross, in million USD) for each movie as a bar. Somewhat confusingly, the ggplot geom that does this is called geom_col(). (There is also a geom_bar(), but it works differently. We’ll get to that later in this tutorial.) Make a bar plot of amount versus title. This means amount goes on the y axis and title on the x axis.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(boxoffice, aes(x = ___, y = ___)) +\n  geom_col()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(boxoffice, aes(x = title, y = amount)) +\n  geom_col()\n\n\n\n\nNow flip which column you map onto x and which onto y.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(boxoffice, aes(x = amount, y = title)) +\n  geom_col()\n\n\n\n\nThe x-axis label should specify that the amount is in million USD, and the y axis doesn’t need the word “title”. Use xlab() and ylab() to make these changes to the plot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(boxoffice, aes(x = amount, y = title)) +\n  geom_col() +\n  xlab(___) +\n  ylab(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(boxoffice, aes(x = amount, y = title)) +\n  geom_col() +\n  xlab(\"weekend gross (million USD)\") +\n  ylab(NULL) # NULL means nothing, don't show a y label"
  },
  {
    "objectID": "worksheets/visualizing-amounts.html#getting-bars-into-the-right-order",
    "href": "worksheets/visualizing-amounts.html#getting-bars-into-the-right-order",
    "title": "Visualizing amounts",
    "section": "Getting bars into the right order",
    "text": "Getting bars into the right order\nWhenever we are making bar plots, we need to think about the correct order of the bars. By default, ggplot uses alphabetic ordering, but that is rarely appropriate. If there is no inherent ordering (such as, for example, a temporal progression), then it is usually best to order by the magnitude of the values, i.e., sort the bars by length.\nWe can do this with the fct_reorder() function, which takes two arguments: The categorical variable we want to re-order, and the values by which we want to order. Here, the categorical variable is the column title and the values are in the column amount. We can apply the fct_reorder() function right inside the aes() statement.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(boxoffice, aes(x = amount, y = fct_reorder(___, ___))) +\n  geom_col() +\n  xlab(\"weekend gross (million USD)\") +\n  ylab(NULL)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(boxoffice, aes(x = amount, y = fct_reorder(title, amount))) +\n  geom_col() +\n  xlab(\"weekend gross (million USD)\") +\n  ylab(NULL)\n\n\n\n\nTry the following additional experiments in the above code:\n\nWhat happens when you run the above code without the ylab(NULL) statement?\nCan you make the bars blue?\nCan you color the bars by amount or by title?"
  },
  {
    "objectID": "worksheets/visualizing-amounts.html#drawing-bars-based-on-a-count",
    "href": "worksheets/visualizing-amounts.html#drawing-bars-based-on-a-count",
    "title": "Visualizing amounts",
    "section": "Drawing bars based on a count",
    "text": "Drawing bars based on a count\nThe boxoffice dataset contains individual values, the dollar amounts, that we wanted to visualize with bars. Often, however, we encounter a slightly different scenario: A dataset doesn’t contain the numeric amounts directly, but instead contains observations we want to count. This is the case in the penguins2 dataset (see above).\nIt contains one row per penguin. If we want to make a bar plot of the number of penguins of each species (Adelie, Chinstrap, Gentoo), we cannot use geom_col() as before, because the dataset doesn’t have a column that contains these counts.\nThe solution here is to use geom_bar(), which performs a count and then displays the result of that count. Because geom_bar() counts automatically, you only have to provide it with a single aesthetic, which specifies the data column in which you are counting.\nTry this out. Make a bar plot of the number of penguins per species. Map the penguin species onto the x axis.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(penguins2, aes(x = ___)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(penguins2, aes(x = species)) +\n  geom_bar()\n\n\n\n\nTry the following additional modifications in the above code:\n\nMap penguin species onto the y axis.\nRemove the axis label that says “species”.\nChange the order of the bars manually, using fct_relevel() (see slides)."
  },
  {
    "objectID": "worksheets/visualizing-amounts.html#counting-subgroups",
    "href": "worksheets/visualizing-amounts.html#counting-subgroups",
    "title": "Visualizing amounts",
    "section": "Counting subgroups",
    "text": "Counting subgroups\ngeom_bar() automatically counts how many cases there are in each unique combination of different categorical aesthetics. In the previous example, we had only one categorical aesthetic, species. But we can add a second one, for example sex. Then geom_bar() counts the number of cases in each unique combination of species and sex and draws separate bars for each. Try this out by mapping the sex column onto the fill aesthetic.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(penguins2, aes(x = species, fill = sex)) +\n  geom_bar()\n\n\n\n\nBy default, the bars for different fill values but identical x values will be drawn on top of one-another. But there are other possibilities, which are controled by the position argument to geom_bar(). For example, try to set the position to \"dodge\".\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(penguins2, aes(x = species, fill = sex)) +\n  geom_bar(position = ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(penguins2, aes(x = species, fill = sex)) +\n  geom_bar(position = \"dodge\")\n\n\n\n\nIn the above code, also try positions \"stack\" and \"fill\"."
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "Title: SDS 366 Data Visualization in R Semester: Spring 2025 Unique: 57785, TTH 5:00pm to 6:30pm, MEZ B0.306\nInstructor: Claus O. Wilke Email: wilke@austin.utexas.edu Office Hours: Mon. 9am - 10am (open Zoom), Thurs. 10am - 11am (open Zoom), or by appointment\nTeaching Assistant: TBD Email: TBD Office Hours: TBD"
  },
  {
    "objectID": "syllabus.html#course-title-and-instructor",
    "href": "syllabus.html#course-title-and-instructor",
    "title": "Syllabus",
    "section": "",
    "text": "Title: SDS 366 Data Visualization in R Semester: Spring 2025 Unique: 57785, TTH 5:00pm to 6:30pm, MEZ B0.306\nInstructor: Claus O. Wilke Email: wilke@austin.utexas.edu Office Hours: Mon. 9am - 10am (open Zoom), Thurs. 10am - 11am (open Zoom), or by appointment\nTeaching Assistant: TBD Email: TBD Office Hours: TBD"
  },
  {
    "objectID": "syllabus.html#purpose-and-contents-of-the-class",
    "href": "syllabus.html#purpose-and-contents-of-the-class",
    "title": "Syllabus",
    "section": "Purpose and contents of the class",
    "text": "Purpose and contents of the class\nIn this class, students will learn how to visualize data sets and how to reason about and communicate with data visualizations. A substantial component of this class will be dedicated to learning how to program in R. In addition, students will learn how to compile analyses and visualizations into reports, how to make the reports reproducible, and how to post reports on a website or blog."
  },
  {
    "objectID": "syllabus.html#prerequisites",
    "href": "syllabus.html#prerequisites",
    "title": "Syllabus",
    "section": "Prerequisites",
    "text": "Prerequisites\nThe class requires no prior knowledge of programming. However, students are expected to have successfully completed an introductory statistics class taught with R, such as SDS 320E, and they are expected to have some basic familiarity with the statistical language R."
  },
  {
    "objectID": "syllabus.html#textbook",
    "href": "syllabus.html#textbook",
    "title": "Syllabus",
    "section": "Textbook",
    "text": "Textbook\nThis class draws heavily from materials presented in the following book:\n\nClaus O. Wilke. Fundamentals of Data Visualization. O’Reilly Media, 2019.\n\nAdditionally, we will also make use of the following books:\n\nHadley Wickham, Danielle Navarro, and Thomas Lin Pedersen. ggplot2: Elegant Graphics for Data Analysis, 3rd ed. Springer, to appear.\nKieran Healy. Data Visualization: A Practical Introduction. Princeton University Press, 2018.\n\nAll these books are freely available online and you do not need to purchase a physical copy of either book to succeed in this class."
  },
  {
    "objectID": "syllabus.html#topics-covered",
    "href": "syllabus.html#topics-covered",
    "title": "Syllabus",
    "section": "Topics covered",
    "text": "Topics covered\n\n\n\n\n\n\n\n\nClass\nTopic\nCoding concepts covered\n\n\n\n\n1.\nIntroduction, reproducible workflows\nRStudio setup online, Quarto\n\n\n2.\nAesthetic mappings\nggplot2 quickstart\n\n\n3.\nVisualizing amounts, telling a story\ngeom_col(), geom_point(), position adjustments\n\n\n4.\nCoordinate systems and axes\ncoords and position scales\n\n\n5.\nVisualizing distributions 1\nstats, geom_density(), geom_histogram()\n\n\n6.\nVisualizing distributions 2\nviolin plots, sina plots, ridgeline plots\n\n\n7.\nColor scales\ncolor and fill scales\n\n\n8.\nColor spaces, color vision deficiency\ncolorspace package\n\n\n9.\nData wrangling\nmutate(), filter(), arrange() summarize(), join(), pivot_longer()\n\n\n10.\nVisualizing proportions\nbar charts, pie charts\n\n\n11.\nGetting to know your data\nhandling missing data, is.na(), case_when()\n\n\n12.\nGetting things into the right order\nfct_reorder(), fct_lump()\n\n\n13.\nFigure design\nggplot themes\n\n\n14.\nCompound figures\npatchwork package\n\n\n15.\nVisualizing trends\ngeom_smooth()\n\n\n16.\nFunctions and functional programming\nmap(), nest(), purrr package\n\n\n17.\nWorking with models\nlm, cor.test, broom package\n\n\n18.\nVisualizing uncertainty\nfrequency framing, error bars, ggdist package\n\n\n19.\nDimension reduction 1\nPCA\n\n\n20.\nDimension reduction 2\nkernel PCA, t-SNE, UMAP\n\n\n21.\nClustering 1\nk-means clustering\n\n\n22.\nClustering 2\nhierarchical clustering\n\n\n23.\nVisualizing geospatial data\ngeom_sf(), coord_sf()\n\n\n24.\nRedundant coding, text annotations\nggrepel package\n\n\n25.\nOver-plotting\njittering, 2d histograms, contour plots\n\n\n26.\nInteractive plots\nggiraph package\n\n\n27.\nWeb technologies and web design\nCSS\n\n\n28.\nInteractive plots\ngganimate package"
  },
  {
    "objectID": "syllabus.html#computing-requirements",
    "href": "syllabus.html#computing-requirements",
    "title": "Syllabus",
    "section": "Computing requirements",
    "text": "Computing requirements\nProgramming needs to be learned by doing, and a significant portion of the in-class time will be dedicated to working through simple problems. All programming exercises will be available through a web-based system, so the only system requirement for student computers is a modern web browser."
  },
  {
    "objectID": "syllabus.html#course-site",
    "href": "syllabus.html#course-site",
    "title": "Syllabus",
    "section": "Course site",
    "text": "Course site\nAll materials and assignments will be posted on the course webpage at: https://wilkelab.org/SDS366\nAssignment deadlines are shown on the schedule.\nAssignments will be submitted and grades will be posted on Canvas.\nParticipation via presence in class and in online discussions will also be tracked on Canvas.\nR compute sessions are available at: https://edupod.cns.utexas.edu\nNote that edupods will be unavailable due to maintenance approximately two hours per month, usually on a Thursday afternoon between 4pm and 6pm. Specific maintenance times are published in advance on the RCTF wiki."
  },
  {
    "objectID": "syllabus.html#assignments-and-grading",
    "href": "syllabus.html#assignments-and-grading",
    "title": "Syllabus",
    "section": "Assignments and grading",
    "text": "Assignments and grading\nThe graded components of this class will be homeworks, projects, peer-grading, and participation. Each week either a homework, a project, or a peer-grading is due. Homeworks will be relatively short visualization problems to be solved by the student, usually involving some small amount of programming to achieve a specified goal. They are graded by the TA. Projects are larger and more involved data analysis problems that involve both programming and writing. They are peer-graded by the students. Students will have at least one week to complete each homework and two weeks to complete each project. The submission deadlines for homeworks and projects will be Thursdays at 11pm.\nThere will be seven homeworks and three projects. Both homeworks and projects need to be submitted electronically on Canvas. Homeworks are worth 20 points and projects are worth 100 points. The lowest-scoring homework will be dropped, so that a maximum of 120 points can be obtained from the homeworks.\nProjects are peer-graded, which involves evaluating three projects by other students according to a detailed grading rubric that will be provided. The final grade for each project is the mean of the peer-graded projects. The peer-grading itself will be graded by the TA, who will also oversee and spot-check the assigned peer grades. Experience has shown that peer-grading is often the most instructive component of this class, so don’t take this lightly.\nParticipation is assessed in two ways. First, students will receive 2 points for every lecture they attend. This is tracked via simple quizzes on Canvas. Second, each week students can receive up to 4 points for making substantive contributions to the Canvas online discussion (2 points per contribution). Total participation points are capped at 52 (13 weeks of class times 4 points), so students can compensate for lack of in-person attendance by participating in discussions and vice versa. You do not have to get full points in both in-person attendance and online discussions. No participation is assessed in the first week of class.\n\n\n\nAssignment type\nNumber\nPoints per assignment\nTotal points\n\n\n\n\nHomework\n6 (+1)\n20\n120\n\n\nProject\n3\n100\n300\n\n\nPeer grading\n3\n16\n48\n\n\nParticipation\n26 (+26)\n2\n52\n\n\n\nThus, in summary, each project (+ peer grading) contributes 22% to the final grade, the totality of all homeworks contributes another 23% to the final grade, and participation contributes 10%. There are no traditional exams in this class and there is no final.\nThe class will use +/- grading, and the exact grade boundaries will be determined at the end of the semester. However, the following minimum grades will be guaranteed:\n\n\n\nPoints achieved\nMinimum guaranteed grade\n\n\n\n\n468 (90%)\nA-\n\n\n416 (80%)\nB-\n\n\n364 (70%)\nC-\n\n\n260 (50%)\nD-"
  },
  {
    "objectID": "syllabus.html#late-assignment-policy",
    "href": "syllabus.html#late-assignment-policy",
    "title": "Syllabus",
    "section": "Late assignment policy",
    "text": "Late assignment policy\nHomeworks that are submitted past the posted deadline will not be graded and will receive 0 points.\nProject submissions will have a 1-day grace period. Projects submitted during the grace period will have 25 points deducted from the obtained grade. After the grace period, students who have not submitted their project will receive 0 points.\nPeer grades need to be submitted by the posted deadline. Late submissions will result in 0 points for the peer-grading effort.\nIn case of illness or other unforeseen circumstances out of your control, please reach out to Claus Wilke as soon as possible. We will consider your request on a case-by-case basis. If you need a deadline extension for valid reasons, please reach out before the official submission deadline and state how much of an extension you would need. Whether deadline extensions are possible depends on the severity of your situation as well as whether the solutions to the assignment have already been published."
  },
  {
    "objectID": "syllabus.html#office-hours",
    "href": "syllabus.html#office-hours",
    "title": "Syllabus",
    "section": "Office hours",
    "text": "Office hours\nBoth the graduate TA and myself will be available at posted times or by appointment. Office hours will be over Zoom. The most effective way to request an appointment for office hours outside of posted times is to suggest several times that work for you. I would suggest to write an email such as the following:\nDear Dr. Wilke,\n\nI would like to request a meeting with you outside of \nregular office hours this week. I am available Thurs.\nbetween 1pm and 2:30pm or Fri. before 11am or after 4pm.\n\nThanks a lot,\n  John Doe\nNote that we will not usually make appointments before 9am or after 5pm."
  },
  {
    "objectID": "syllabus.html#email-policy",
    "href": "syllabus.html#email-policy",
    "title": "Syllabus",
    "section": "Email policy",
    "text": "Email policy\nWhen emailing about this course, please put “SDS366” into the subject line. Emails to the instructor or TA should be restricted to organizational issues, such as requests for appointments, questions about course organization, etc. For all other issues, post in the discussions on Canvas, ask a question during open Zoom, or make an appointment for a one-on-one session.\nSpecifically, we will not discuss technical issues related to assignments over email. Technical issues are questions concerning how to approach a particular problem, whether a particular solution is correct, or how to use the statistical software R. These questions should be posted as issues on GitHub. Also, we will not discuss grading-related matters over email. If you have a concern about grading, schedule a one-on-one Zoom meeting."
  },
  {
    "objectID": "syllabus.html#special-accommodations",
    "href": "syllabus.html#special-accommodations",
    "title": "Syllabus",
    "section": "Special accommodations",
    "text": "Special accommodations\nStudents with disabilities. Students with disabilities may request appropriate accommodations from the Division of Diversity and Community Engagement, Services for Students with Disabilities, 512-471-6259, https://diversity.utexas.edu/disability/\nReligious holy days. Students who must miss a class or an assignment to observe a religious holy day will be given an opportunity to complete the missed work within a reasonable time after the absence. According to UT Austin policy, such students must notify me of the pending absence at least fourteen days prior to the date of observance of a religious holy day."
  },
  {
    "objectID": "syllabus.html#academic-dishonesty",
    "href": "syllabus.html#academic-dishonesty",
    "title": "Syllabus",
    "section": "Academic dishonesty",
    "text": "Academic dishonesty\nThis course is built upon the idea that student interaction is important and a powerful way to learn. We encourage you to communicate with other students, in particular through the discussion forums on Canvas. However, there are times when you need to demonstrate your own ability to work and solve problems. In particular, your homeworks and projects are independent work, unless explicitly stated otherwise. You are allowed to confer with fellow students about general approaches to solve the problems in the assignments, but you have to do the assignments on your own and describe your work in your own words. Students who violate these expectations can expect to receive a failing grade on the assignment and will be reported to Student Judicial Services. These types of violations are reported to professional schools, should you ever decide to apply one day. Don’t do it—it’s not worth the consequences."
  },
  {
    "objectID": "syllabus.html#sharing-of-course-materials-is-prohibited",
    "href": "syllabus.html#sharing-of-course-materials-is-prohibited",
    "title": "Syllabus",
    "section": "Sharing of Course Materials is Prohibited",
    "text": "Sharing of Course Materials is Prohibited\nAny materials in this class that are not posted publicly may not be shared online or with anyone outside of the class unless you have my explicit, written permission. This includes but is not limited to lecture hand-outs, videos, assessments (quizzes, exams, papers, projects, homework assignments), in-class materials, review sheets, and additional problem sets. Unauthorized sharing of materials promotes cheating. It is a violation of the University’s Student Honor Code and an act of academic dishonesty. We are well aware of the sites used for sharing materials, and any materials found online that are associated with you, or any suspected unauthorized sharing of materials, will be reported to Student Conduct and Academic Integrity in the Office of the Dean of Students. These reports can result in sanctions, including failure in the course.\nAny materials posted on the public class website (https://wilkelab.org/SDS366/) are considered public and can be shared under the Creative Commons Attribution CC BY 4.0 license."
  },
  {
    "objectID": "syllabus.html#class-recordings",
    "href": "syllabus.html#class-recordings",
    "title": "Syllabus",
    "section": "Class Recordings",
    "text": "Class Recordings\nIf any class recordings are provided they are reserved only for students in this class for educational purposes and are protected under FERPA. The recordings should not be shared outside the class in any form. Violation of this restriction by a student could lead to Student Misconduct proceedings."
  },
  {
    "objectID": "schedule.html#homeworks",
    "href": "schedule.html#homeworks",
    "title": "SDS 366 Schedule Spring 2025",
    "section": "Homeworks",
    "text": "Homeworks\nAll homeworks are due by 11:00pm on the day they are due. Homeworks need to be submitted as pdf files on Canvas."
  },
  {
    "objectID": "schedule.html#projects",
    "href": "schedule.html#projects",
    "title": "SDS 366 Schedule Spring 2025",
    "section": "Projects",
    "text": "Projects\nAll projects are due by 11:00pm on the day they are due. Projects need to be submitted on Canvas. Please carefully read the submission instructions for each project."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "SDS 366",
    "section": "",
    "text": "This is the home page for SDS 366, Data Visualization in R. All course materials will be posted on this site.\nInstructor: Claus O. Wilke\nMeeting times: TTH 5:00pm to 6:30pm Venue: MEZ B0.306 Syllabus: click here\nUpcoming lectures and assignments: click here"
  },
  {
    "objectID": "index.html#computing-requirements",
    "href": "index.html#computing-requirements",
    "title": "SDS 366",
    "section": "Computing requirements",
    "text": "Computing requirements\nFor students enrolled in this course, you only need a working web browser to access the edupod server, located at: https://edupod.cns.utexas.edu/\nIf you are using the edupod server, stop reading here. Everything is pre-installed and no further action is needed.\nTo run any of the materials locally on your own machine, you will need the following:\n\nA recent version of R, download from here.\nA recent version of RStudio, download from here, OR a recent version of Positron, download from here.\nThe following R packages:\nbroom, cluster, colorspace, cowplot, distill, gapminder, GGally, gganimate, ggiraph, ggdendro, ggdist, ggforce, ggplot2movies, ggrepel, ggridges, ggthemes, gifski, glue, knitr, learnr, naniar, margins, MASS, Matrix, nycflights13, palmerpenguins, patchwork, rmarkdown, rnaturalearth, rnaturalearthhires, scales, sf, shinyjs, sp, tidyverse, transformr, umap, xaringan\n\nYou can install all required R packages at once by running the following code in the R command line:\n# first run this command:\ninstall.packages(\n  c(\n    \"broom\", \"cluster\", \"colorspace\", \"cowplot\", \"distill\", \"gapminder\", \n    \"GGally\", \"gganimate\", \"ggiraph\", \"ggdendro\", \"ggdist\", \"ggforce\",\n    \"ggplot2movies\", \"ggrepel\", \"ggridges\", \"ggthemes\", \"gifski\", \"glue\",\n    \"knitr\", \"learnr\", \"naniar\", \"margins\", \"MASS\", \"Matrix\",\n    \"nycflights13\", \"palmerpenguins\", \"patchwork\", \"rmarkdown\", \"rnaturalearth\",\n    \"scales\", \"sf\", \"shinyjs\", \"sp\", \"tidyverse\", \"transformr\", \"umap\",\n    \"xaringan\"\n  )\n)\n\n# then run this command:\ninstall.packages(\n  \"rnaturalearthhires\", repos = \"https://packages.ropensci.org\", type = \"source\"\n)"
  },
  {
    "objectID": "slides/introduction.html#why-data-visualization",
    "href": "slides/introduction.html#why-data-visualization",
    "title": "Introduction",
    "section": "Why Data Visualization?",
    "text": "Why Data Visualization?"
  },
  {
    "objectID": "slides/introduction.html#why-data-visualization-1",
    "href": "slides/introduction.html#why-data-visualization-1",
    "title": "Introduction",
    "section": "Why Data Visualization?",
    "text": "Why Data Visualization?"
  },
  {
    "objectID": "slides/introduction.html#why-r",
    "href": "slides/introduction.html#why-r",
    "title": "Introduction",
    "section": "Why R?",
    "text": "Why R?"
  },
  {
    "objectID": "slides/introduction.html#why-me",
    "href": "slides/introduction.html#why-me",
    "title": "Introduction",
    "section": "Why me?",
    "text": "Why me?\n\n\n\nhttps://clauswilke.com/dataviz"
  },
  {
    "objectID": "slides/introduction.html#why-me-1",
    "href": "slides/introduction.html#why-me-1",
    "title": "Introduction",
    "section": "Why me?",
    "text": "Why me?"
  },
  {
    "objectID": "slides/introduction.html#we-will-use-quarto-for-all-assignments",
    "href": "slides/introduction.html#we-will-use-quarto-for-all-assignments",
    "title": "Introduction",
    "section": "We will use Quarto for all assignments",
    "text": "We will use Quarto for all assignments\n\n\n\n\nhttps://quarto.org/"
  },
  {
    "objectID": "slides/introduction.html#edupod-login-httpsedupod.cns.utexas.edu",
    "href": "slides/introduction.html#edupod-login-httpsedupod.cns.utexas.edu",
    "title": "Introduction",
    "section": "Edupod login: https://edupod.cns.utexas.edu",
    "text": "Edupod login: https://edupod.cns.utexas.edu"
  },
  {
    "objectID": "slides/introduction.html#edupod-login-httpsedupod.cns.utexas.edu-1",
    "href": "slides/introduction.html#edupod-login-httpsedupod.cns.utexas.edu-1",
    "title": "Introduction",
    "section": "Edupod login: https://edupod.cns.utexas.edu",
    "text": "Edupod login: https://edupod.cns.utexas.edu"
  },
  {
    "objectID": "slides/introduction.html#edupod-login-httpsedupod.cns.utexas.edu-2",
    "href": "slides/introduction.html#edupod-login-httpsedupod.cns.utexas.edu-2",
    "title": "Introduction",
    "section": "Edupod login: https://edupod.cns.utexas.edu",
    "text": "Edupod login: https://edupod.cns.utexas.edu"
  },
  {
    "objectID": "slides/introduction.html#working-with-quarto-documents",
    "href": "slides/introduction.html#working-with-quarto-documents",
    "title": "Introduction",
    "section": "Working with Quarto documents",
    "text": "Working with Quarto documents"
  },
  {
    "objectID": "slides/introduction.html#working-with-quarto-documents-1",
    "href": "slides/introduction.html#working-with-quarto-documents-1",
    "title": "Introduction",
    "section": "Working with Quarto documents",
    "text": "Working with Quarto documents"
  },
  {
    "objectID": "slides/introduction.html#working-with-quarto-documents-2",
    "href": "slides/introduction.html#working-with-quarto-documents-2",
    "title": "Introduction",
    "section": "Working with Quarto documents",
    "text": "Working with Quarto documents"
  },
  {
    "objectID": "slides/introduction.html#working-with-quarto-documents-3",
    "href": "slides/introduction.html#working-with-quarto-documents-3",
    "title": "Introduction",
    "section": "Working with Quarto documents",
    "text": "Working with Quarto documents"
  },
  {
    "objectID": "slides/introduction.html#working-with-quarto-documents-4",
    "href": "slides/introduction.html#working-with-quarto-documents-4",
    "title": "Introduction",
    "section": "Working with Quarto documents",
    "text": "Working with Quarto documents"
  },
  {
    "objectID": "slides/introduction.html#use-export-to-download-pdfs",
    "href": "slides/introduction.html#use-export-to-download-pdfs",
    "title": "Introduction",
    "section": "Use “Export” to download PDFs",
    "text": "Use “Export” to download PDFs"
  },
  {
    "objectID": "slides/introduction.html#the-source-for-the-class-website-is-on-github",
    "href": "slides/introduction.html#the-source-for-the-class-website-is-on-github",
    "title": "Introduction",
    "section": "The source for the class website is on GitHub",
    "text": "The source for the class website is on GitHub"
  },
  {
    "objectID": "slides/introduction.html#the-source-for-the-class-website-is-on-github-1",
    "href": "slides/introduction.html#the-source-for-the-class-website-is-on-github-1",
    "title": "Introduction",
    "section": "The source for the class website is on GitHub",
    "text": "The source for the class website is on GitHub"
  },
  {
    "objectID": "slides/introduction.html#the-source-for-the-class-website-is-on-github-2",
    "href": "slides/introduction.html#the-source-for-the-class-website-is-on-github-2",
    "title": "Introduction",
    "section": "The source for the class website is on GitHub",
    "text": "The source for the class website is on GitHub\n\n\n\n\nhttps://github.com/wilkelab/SDS366"
  },
  {
    "objectID": "slides/introduction.html#press-e-to-save-slides-as-pdf",
    "href": "slides/introduction.html#press-e-to-save-slides-as-pdf",
    "title": "Introduction",
    "section": "Press ‘e’ to save slides as PDF",
    "text": "Press ‘e’ to save slides as PDF\n\n\n\n\n(Works best on Chrome)"
  },
  {
    "objectID": "slides/introduction.html#further-reading",
    "href": "slides/introduction.html#further-reading",
    "title": "Introduction",
    "section": "Further reading",
    "text": "Further reading\n\n\nFundamentals of Data Visualization\nQuarto guide"
  },
  {
    "objectID": "slides/telling-a-story.html#how-did-i-get-to-teach-data-visualization",
    "href": "slides/telling-a-story.html#how-did-i-get-to-teach-data-visualization",
    "title": "Telling a story",
    "section": "How did I get to teach data visualization?",
    "text": "How did I get to teach data visualization?"
  },
  {
    "objectID": "slides/telling-a-story.html#what-is-a-story",
    "href": "slides/telling-a-story.html#what-is-a-story",
    "title": "Telling a story",
    "section": "What is a story?",
    "text": "What is a story?\n\n\nA story is a collection of observations, facts, or events presented in a specific order such that they create an emotional reaction."
  },
  {
    "objectID": "slides/telling-a-story.html#every-story-needs-an-arc",
    "href": "slides/telling-a-story.html#every-story-needs-an-arc",
    "title": "Telling a story",
    "section": "Every story needs an arc",
    "text": "Every story needs an arc\n\nOpening\n\n\n\nChallenge\n\n\n\nAction\n\n\n\nResolution"
  },
  {
    "objectID": "slides/telling-a-story.html#every-story-needs-an-arc-1",
    "href": "slides/telling-a-story.html#every-story-needs-an-arc-1",
    "title": "Telling a story",
    "section": "Every story needs an arc",
    "text": "Every story needs an arc\n\nOpening\n\n\n\nChallenge\n\n\n\nAction\n\n\n\nResolution\n\n\nChallenge and resolution arethe two most important parts"
  },
  {
    "objectID": "slides/telling-a-story.html#mapping-my-story-onto-this-format",
    "href": "slides/telling-a-story.html#mapping-my-story-onto-this-format",
    "title": "Telling a story",
    "section": "Mapping my story onto this format",
    "text": "Mapping my story onto this format\n\nOpening: We need to make many data visualizations in my lab\n\n\nChallenge: I end up telling my students the same things over and over\n\n\nAction: I go and write a book about data visualization\n\n\nResolution: The book is written. But now I teach the material, so I still keep saying the same things over and over"
  },
  {
    "objectID": "slides/telling-a-story.html#other-story-structures",
    "href": "slides/telling-a-story.html#other-story-structures",
    "title": "Telling a story",
    "section": "Other story structures",
    "text": "Other story structures\n\nAction\n\n\n\nBackground\n\n\n\nDevelopment\n\n\n\nClimax\n\n\n\nEnding\n\n\n(Better for action moviesthan for scientific reports)"
  },
  {
    "objectID": "slides/telling-a-story.html#mapping-my-story-onto-this-format-1",
    "href": "slides/telling-a-story.html#mapping-my-story-onto-this-format-1",
    "title": "Telling a story",
    "section": "Mapping my story onto this format",
    "text": "Mapping my story onto this format\n\nAction: In May 2017, I embark on a major project: Write a book on data visualization\n\n\nBackground: I do this because we need to make many data visualizations in my lab, and I end up telling my students the same things over and over\n\n\nDevelopment: Writing the book takes me almost two years; along the way, I add many features to ggplot2 and become a member of the ggplot2 team\n\n\nClimax: The book is released in April 2019\n\n\nEnding: Now I’m a dataviz teacher"
  },
  {
    "objectID": "slides/telling-a-story.html#other-story-structures-1",
    "href": "slides/telling-a-story.html#other-story-structures-1",
    "title": "Telling a story",
    "section": "Other story structures",
    "text": "Other story structures\n\n\nLead\n\n\n\nDevelopment\n\n\n(Commonly used in newspaper articles)"
  },
  {
    "objectID": "slides/telling-a-story.html#mapping-my-story-onto-this-format-2",
    "href": "slides/telling-a-story.html#mapping-my-story-onto-this-format-2",
    "title": "Telling a story",
    "section": "Mapping my story onto this format",
    "text": "Mapping my story onto this format\n\nLead: Because I see the need for more education in data visualization, I have written an entire book about the topic\n\n\nDevelopment: I had previously written an R package to improve figure design, but it wasn’t sufficient: Good judgement cannot be automated\n\n\nSo I wrote a book; the book is entirely about concepts, not about coding, and it is meant as a resource for anybody doing data visualizations, regardless of their preferred visualization software"
  },
  {
    "objectID": "slides/telling-a-story.html#example-preprints-in-biology",
    "href": "slides/telling-a-story.html#example-preprints-in-biology",
    "title": "Telling a story",
    "section": "Example: Preprints in biology",
    "text": "Example: Preprints in biology\n\n\n\n\n\n \n\n\n\n\n\nOpening"
  },
  {
    "objectID": "slides/telling-a-story.html#example-preprints-in-biology-1",
    "href": "slides/telling-a-story.html#example-preprints-in-biology-1",
    "title": "Telling a story",
    "section": "Example: Preprints in biology",
    "text": "Example: Preprints in biology\n\n\n\n\n\n \n\n\n\n\nWhat happened in 2014 to curtail the growth?\n\nChallenge"
  },
  {
    "objectID": "slides/telling-a-story.html#example-preprints-in-biology-2",
    "href": "slides/telling-a-story.html#example-preprints-in-biology-2",
    "title": "Telling a story",
    "section": "Example: Preprints in biology",
    "text": "Example: Preprints in biology\n\n\n\n\n\n \n\n\n\n\nbioRxiv opened in 2014\n\nResolution"
  },
  {
    "objectID": "slides/telling-a-story.html#keep-in-mind",
    "href": "slides/telling-a-story.html#keep-in-mind",
    "title": "Telling a story",
    "section": "Keep in mind",
    "text": "Keep in mind\n\n\nEvery figure needs a clear purpose within the story arc\nA complete arc will usually require at least two figures"
  },
  {
    "objectID": "slides/telling-a-story.html#prepare-figures-that-make-a-clear-point",
    "href": "slides/telling-a-story.html#prepare-figures-that-make-a-clear-point",
    "title": "Telling a story",
    "section": "Prepare figures that make a clear point",
    "text": "Prepare figures that make a clear point"
  },
  {
    "objectID": "slides/telling-a-story.html#prepare-figures-that-make-a-clear-point-1",
    "href": "slides/telling-a-story.html#prepare-figures-that-make-a-clear-point-1",
    "title": "Telling a story",
    "section": "Prepare figures that make a clear point",
    "text": "Prepare figures that make a clear point\n\n\n\n\n\n \n\n\n\n\nAmerican and Delta have the shortest delays"
  },
  {
    "objectID": "slides/telling-a-story.html#make-your-figures-memorable",
    "href": "slides/telling-a-story.html#make-your-figures-memorable",
    "title": "Telling a story",
    "section": "Make your figures memorable",
    "text": "Make your figures memorable"
  },
  {
    "objectID": "slides/telling-a-story.html#make-your-figures-memorable-1",
    "href": "slides/telling-a-story.html#make-your-figures-memorable-1",
    "title": "Telling a story",
    "section": "Make your figures memorable",
    "text": "Make your figures memorable"
  },
  {
    "objectID": "slides/telling-a-story.html#further-reading",
    "href": "slides/telling-a-story.html#further-reading",
    "title": "Telling a story",
    "section": "Further reading",
    "text": "Further reading\n\n\nFundamentals of Data Visualization: Chapter 29: Telling a story and making a point\nJoshua Schimel (2011) Writing Science: How to Write Papers That Get Cited and Proposals That Get Funded"
  },
  {
    "objectID": "worksheets/aesthetic-mappings.html",
    "href": "worksheets/aesthetic-mappings.html",
    "title": "Aesthetic mappings",
    "section": "",
    "text": "In this worksheet, we will discuss a core concept of ggplot, the mapping of data values onto aesthetics.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will first work with the dataset temps_houston which contains the average temperature for each day of the year for Houston, TX."
  },
  {
    "objectID": "worksheets/aesthetic-mappings.html#introduction",
    "href": "worksheets/aesthetic-mappings.html#introduction",
    "title": "Aesthetic mappings",
    "section": "",
    "text": "In this worksheet, we will discuss a core concept of ggplot, the mapping of data values onto aesthetics.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will first work with the dataset temps_houston which contains the average temperature for each day of the year for Houston, TX."
  },
  {
    "objectID": "worksheets/aesthetic-mappings.html#basic-use-of-ggplot",
    "href": "worksheets/aesthetic-mappings.html#basic-use-of-ggplot",
    "title": "Aesthetic mappings",
    "section": "Basic use of ggplot",
    "text": "Basic use of ggplot\nIn the most basic use of ggplot, we call the ggplot() function with a dataset and an aesthetic mapping (created with aes()), and then we add a geom, such as geom_line() to draw lines or geom_point() to draw points.\nTry this for yourself. Map the column day_of_year onto the x axis and the column temperature onto the y axis, and use geom_line() to display the data.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_houston, aes(x = day_of_year, y = temperature)) +\n  geom_line()\n\n\n\n\nTry again. Now use geom_point() instead of geom_line().\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_houston, aes(x = day_of_year, y = temperature)) +\n  geom_point()\n\n\n\n\nAnd now swap which column you map to x and which to y.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_houston, aes(x = temperature, y = day_of_year)) +\n  geom_point()"
  },
  {
    "objectID": "worksheets/aesthetic-mappings.html#more-complex-geoms",
    "href": "worksheets/aesthetic-mappings.html#more-complex-geoms",
    "title": "Aesthetic mappings",
    "section": "More complex geoms",
    "text": "More complex geoms\nYou can use other geoms to make different types of plots. For example, geom_boxplot() will make boxplots. For boxplots, we frequently want categorical data on the x or y axis. For example, we might want a separate boxplot for each month. Try this out. Puth month on the x axis, temperature on the y axis, and use geom_boxplot().\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temps_houston, aes(x = month, y = temperature)) +\n  ___()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_houston, aes(x = month, y = temperature)) +\n  geom_boxplot()\n\n\n\n\nNow put the month on the y axis and the temperature on the x axis.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temps_houston, aes(x = ___, y = ___)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_houston, aes(x = temperature, y = month)) +\n  geom_boxplot()"
  },
  {
    "objectID": "worksheets/aesthetic-mappings.html#adding-color",
    "href": "worksheets/aesthetic-mappings.html#adding-color",
    "title": "Aesthetic mappings",
    "section": "Adding color",
    "text": "Adding color\nNext we will be working with the dataset temperatures, which is similar to temps_houston but contains data for three more locations.\n\n\n\n\n\n\n\n\nMake a line plot of temperature against day_of_year, using the color aesthetic to color the lines by location.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temperatures, aes(x = day_of_year, y = temperature, color = ___)) +\n  geom_line()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temperatures, aes(x = day_of_year, y = temperature, color = location)) +\n  geom_line()\n\n\n\n\nTry again, this time using location as the location along the y axis and temperature for the color. This plot looks better with geom_point() than geom_line(). (Try it out to see why. Also, try geom_point(size = 5) to create larger points.)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temperatures, aes(x = ___, y = ___, color = ___)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temperatures, aes(x = day_of_year, y = location, color = temperature)) +\n  geom_point()"
  },
  {
    "objectID": "worksheets/aesthetic-mappings.html#using-the-fill-aesthetic",
    "href": "worksheets/aesthetic-mappings.html#using-the-fill-aesthetic",
    "title": "Aesthetic mappings",
    "section": "Using the fill aesthetic",
    "text": "Using the fill aesthetic\nSome geoms use a fill aesthetic, which is similar to color but applies to shaded areas. (color applies to lines and points.) For example, we can use the fill aesthetic with geom_boxplot() to color the interior of the box. Try this yourself. Plot month on x, temperature on y, and color the interior of the box by location.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temperatures, aes(x = month, y = ___, fill = ___)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temperatures, aes(x = month, y = temperature, fill = location)) +\n  geom_boxplot()\n\n\n\n\nCan you color the lines of the boxplot by location and the interior by month? Try it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temperatures, aes(x = month, y = temperature, color = ___, fill = ___)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temperatures, aes(x = month, y = temperature, color = location, fill = month)) +\n  geom_boxplot()"
  },
  {
    "objectID": "worksheets/aesthetic-mappings.html#using-aesthetics-as-parameters",
    "href": "worksheets/aesthetic-mappings.html#using-aesthetics-as-parameters",
    "title": "Aesthetic mappings",
    "section": "Using aesthetics as parameters",
    "text": "Using aesthetics as parameters\nMany of the aesthetics (such as color, fill, and also size to change line size or point thickness) can be used as parameters inside a geom rather than inside an aes() statement. The difference is that when you use an aesthetic as a parameter, you specify a specific value, such as color = \"blue\", rather than a mapping, such as aes(color = location). Notice the difference: Inside the aes() function, we don’t actually specify the specific color values, ggplot does that for us. We only say that we want the data values of the location column to correspond to different colors. (We will learn later how to tell ggplot to use specific colors in this mapping.)\nTry this with the boxplot example from the previous section. Map location onto the fill aesthetic but set the color of the lines to \"navyblue\".\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temperatures, aes(x = month, y = temperature, fill = ___)) +\n  geom_boxplot(color = ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temperatures, aes(x = month, y = temperature, fill = location)) +\n  geom_boxplot(color = \"navyblue\")\n\n\n\n\nNow do the reverse. Map location onto the line colors but fill the box with the color \"navyblue\".\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temperatures, aes(x = month, y = temperature, color = ___)) +\n  geom_boxplot(fill = ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temperatures, aes(x = month, y = temperature, color = location)) +\n  geom_boxplot(fill = \"navyblue\")"
  },
  {
    "objectID": "worksheets/coordinate-systems-axes.html",
    "href": "worksheets/coordinate-systems-axes.html",
    "title": "Coordinate systems and axes",
    "section": "",
    "text": "In this worksheet, we will discuss how to change and customize scales and coordinate systems.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with three different datasets, boxoffice, temperatures, and tx_counties. You have already seen the first two previously.\nThe boxoffice dataset contains box-office gross results for Dec. 22-24, 2017.\n\n\n\n\n\n\n\n\nThe temperatures dataset contains the average temperature for each day of the year for four different locations.\n\n\n\n\n\n\n\n\nThe tx_counties dataset holds information about how many people lived in Texas counties in 2010. The column popratio is the ratio of the number of inhabitants to the median across all counties, and the column index simply counts the counties from most populous to least populous."
  },
  {
    "objectID": "worksheets/coordinate-systems-axes.html#introduction",
    "href": "worksheets/coordinate-systems-axes.html#introduction",
    "title": "Coordinate systems and axes",
    "section": "",
    "text": "In this worksheet, we will discuss how to change and customize scales and coordinate systems.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with three different datasets, boxoffice, temperatures, and tx_counties. You have already seen the first two previously.\nThe boxoffice dataset contains box-office gross results for Dec. 22-24, 2017.\n\n\n\n\n\n\n\n\nThe temperatures dataset contains the average temperature for each day of the year for four different locations.\n\n\n\n\n\n\n\n\nThe tx_counties dataset holds information about how many people lived in Texas counties in 2010. The column popratio is the ratio of the number of inhabitants to the median across all counties, and the column index simply counts the counties from most populous to least populous."
  },
  {
    "objectID": "worksheets/coordinate-systems-axes.html#scale-customizations",
    "href": "worksheets/coordinate-systems-axes.html#scale-customizations",
    "title": "Coordinate systems and axes",
    "section": "Scale customizations",
    "text": "Scale customizations\nWe can modify the appearance of the x and y axis with scale functions. All scale functions have name of the form scale_aesthetic_type(), where aesthetic stands for an aesthetic to which we’re mapping data (e.g., x, y, color, fill, etc), and type stands for the specific type of the scale. What scale types are available depends on both the aesthetic and the data.\nHere, we only consider position scales, which are scales for the x and y aesthetics. The most commonly used scales types for position scales are continuous for continuous data and discrete for discrete data, yielding the scale functions scale_x_continuous(), scale_y_continuous(), scale_x_discrete(), and scale_y_discrete(). But there are others, such as date, time, or binned. You can look them up here: https://ggplot2.tidyverse.org/reference/index.html#section-scales\nPosition scale functions are used to modify both the appearance of the axis (axis title, axis labels, number and location of breaks, etc.) and the mapping from data to position (including the range of data values considered, i.e., axis limits, and whether the data should be transformed, as is the case in log scales).\nLet’s start with this plot of the boxoffice data:\n\n\n\n\n\n\n\n\nWe can use scale functions to modify the axis titles, by setting the name argument. For example, scale_x_continuous(name = \"the x value\") would set the axis title to “the x value” in a continuous scale along the x axis.\nUse the appropriate scale functions to modify both axis titles in the above plot. Think about which axes (if any) are continuous and which are discrete.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  scale_x_continuous(___) +\n  scale_y_discrete(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  scale_x_continuous(name = \"weekend gross (million USD)\") +\n  scale_y_discrete(name = NULL)\n\n\n\n\nWe can also use scale functions to set axis limits, via the limits argument. For continuous scales, the limits argument takes a vector of two numbers representing the lower and upper limit. For example, limits = c(0, 80) would indicate an axis that runs from 0 to 80. For discrete scales, the limits argument takes a vector of all the categories that should be shown, in the order in which they should be shown.\nTry this out by setting a limit from 0 to 80 on the x axis.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  scale_x_continuous(\n    name = \"weekend gross (million USD)\",\n    limits = ___\n  ) +\n  scale_y_discrete(name = NULL)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  scale_x_continuous(\n    name = \"weekend gross (million USD)\",\n    limits = c(0, 80)\n  ) +\n  scale_y_discrete(name = NULL)\n\n\n\n\nWhat happens if you set the axis limits such that not all data points can be shown, for example an upper limit of 65 rather than 80? Do you understand why?\n(Hint: Scale limits are applied before the plot is drawn, and data points outside the scale limits are discarded. If this is not what you want, there’s an alternative way of setting limits. See the very end of this worksheet under “Coords”.)\nNext, we can use the breaks and labels arguments to customize which axis ticks are shown and how they are labeled. In general, you need exactly as many breaks as labels. If you define only breaks but not labels then labels are automatically generated from the breaks.\nBuilding on the code from the previous example, set breaks at 0, 25, 50, and 75, and format the labels such that they can be read as currency. For example, write $25M instead of just 25.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  scale_x_continuous(\n    name = \"weekend gross\",\n    limits = c(0, 80),\n    breaks = ___,\n    labels = ___\n  ) +\n  scale_y_discrete(name = NULL)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  scale_x_continuous(\n    name = \"weekend gross\",\n    limits = c(0, 80),\n    breaks = c(0, 25, 50, 75),\n    labels = c(\"0\", \"$25M\", \"$50M\", \"$75M\")\n  ) +\n  scale_y_discrete(name = NULL)\n\n\n\n\nWhen looking at the resulting plot, you may notice that the x axis extends beyond the limits you have set. This happens because by default ggplot scales expand the axis range by a small amount. You can set the axis expansion via the expand parameter. Setting the expansion can be a bit tricky, because we can set expansion at either end of a scale and we can define both additive and multiplicative expansion. (Additive expansion adds a fixed value, whereas multiplicative expansion adds a multiple of the scale range. ggplot uses additive expansion for discrete scales and multiplicative expansion for continuous scales, but you can use either for either scale.)\nThe simplest way to define expansions is with the expansion() function, which takes arguments mult for multiplicative expansion and add for additive expansion. Either takes a vector of two values, indicating expansion at the lower and upper end, respectively. Thus, expansion(mult = c(0, 0.1)) indicates multiplicative expansion of 0% at the lower end and 10% at the upper end, whereas expansion(add = c(2, 2)) indicates additive expansion of 2 units at either end of the scale.\nTry this yourself. Use the expand argument to remove the gap to the left of 0 on the x axis.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  scale_x_continuous(\n    name = \"weekend gross\",\n    limits = c(0, 80),\n    breaks = c(0, 25, 50, 75),\n    labels = c(\"0\", \"$25M\", \"$50M\", \"$75M\"),\n    expand = expansion(___)\n  ) +\n  scale_y_discrete(name = NULL)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  scale_x_continuous(\n    name = \"weekend gross\",\n    limits = c(0, 80),\n    breaks = c(0, 25, 50, 75),\n    labels = c(\"0\", \"$25M\", \"$50M\", \"$75M\"),\n    expand = expansion(mult = c(0, 0.06))\n  ) +\n  scale_y_discrete(name = NULL)\n\n\n\n\nTry different settings for the expand argument. Try both multiplicative and additive expansions. Apply different expansions to the y axis as well."
  },
  {
    "objectID": "worksheets/coordinate-systems-axes.html#logarithmic-scales",
    "href": "worksheets/coordinate-systems-axes.html#logarithmic-scales",
    "title": "Coordinate systems and axes",
    "section": "Logarithmic scales",
    "text": "Logarithmic scales\nScales can also transform the data before plotting. For example, log scales such as scale_x_log10() and scale_y_log10() log-transform the data. To try this out, we’ll be working with the tx_counties dataset:\n\n\n\n\n\n\n\n\nModify this plot so the y axis uses a log scale.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(tx_counties) +\n  aes(x = index, y = popratio) +\n  geom_point() +\n  scale_y_log10()\n\n\n\n\nNow customize the log scale by setting name, limits, breaks, and labels. These work exactly as they did in scale_x_continuous().\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(tx_counties) +\n  aes(x = index, y = popratio) +\n  geom_point() +\n  scale_y_log10(\n    name = ___,\n    limits = ___,\n    breaks = ___,\n    labels = ___\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(tx_counties) +\n  aes(x = index, y = popratio) +\n  geom_point() +\n  scale_y_log10(\n    name = \"population number / median\",\n    limits = c(0.003, 300),\n    breaks = c(0.01, 1, 100),\n    labels = c(\"0.01\", \"1\", \"100\")\n  )"
  },
  {
    "objectID": "worksheets/coordinate-systems-axes.html#coords",
    "href": "worksheets/coordinate-systems-axes.html#coords",
    "title": "Coordinate systems and axes",
    "section": "Coords",
    "text": "Coords\nWhile scales determine how data values are mapped and represented along one dimension, e.g. the x or the y axis, coordinate systems define how these dimensions are projected onto the 2d plot surface. The default coordinate system is the Cartesian coordinate system, which uses orthogonal x and y axes. In the following example, I have added the coord explicitly, but this is not normally necessary.\n\n\n\n\n\n\n\n\nWe can however add a different coord, for example coord_polar() to use a polar coordinate system. Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temperatures, aes(day_of_year, temperature, color = location)) +\n  geom_line() +\n  coord_polar()\n\n\n\n\nIn the polar coordinate system, the y axis (here, temperature) is mapped onto the radius, and the x axis (here, day of year) is mapped onto the angle. You can use scale_x_continuous() and scale_y_continuous() to modify the radial and angular axes. For example, you may want to change the temperature limits from 0 to 105 so the temperature curve for Chicago doesn’t hit the exact center of the plot. Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temperatures, aes(day_of_year, temperature, color = location)) +\n  geom_line() +\n  coord_polar() +\n  scale_y_continuous(limits = ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temperatures, aes(day_of_year, temperature, color = location)) +\n  geom_line() +\n  coord_polar() +\n  scale_y_continuous(limits = c(0, 105))\n\n\n\n\nThere are other useful coords. For example, coord_fixed() is a Cartesian coordinate system with fixed aspect ratio. This is useful when we plot variables along the x and y axes that are measured in the same units. In this case, we want the two axes to be coordinated, such that one step along x has the same meaning as one step along y.\nTo demonstrate this, we reshape the temperatures dataset into wide format, and then plot temperatures in San Diego versus temperatures in Houston.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(A side remark: Do you know why we write `San Diego` and not \"San Diego\" or 'San Diego' inside the aes() function? If you don’t, see if you can find out.)\nThe units along both the x and the y axis are temperatures, but a 10 degree difference in Houston is shown as a shorter distance than a 10 degree difference in San Diego. To address this problem, add coord_fixed() to the above plot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_wide, aes(`San Diego`, Houston)) +\n  geom_point() +\n  coord_fixed()\n\n\n\n\nThis plot is technically correct but it doesn’t look good, because breaks are spaced differently along the two axes. Also, the plot looks strangely narrow and tall. We can fix both issues by manually setting breaks and limits for both axes. Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temps_wide, aes(`San Diego`, Houston)) +\n  geom_point() +\n  coord_fixed() +\n  scale_x_continuous(\n    limits = ___,\n    breaks = ___\n  ) +\n  scale_y_continuous(\n    limits = ___,\n    breaks = ___\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_wide, aes(`San Diego`, Houston)) +\n  geom_point() +\n  coord_fixed() +\n  scale_x_continuous(\n    limits = c(45, 85),\n    breaks = c(40, 50, 60, 70, 80)\n  ) +\n  scale_y_continuous(\n    limits = c(48, 88),\n    breaks = c(50, 60, 70, 80)\n  )\n\n\n\n\nFinally, as the last example of what can be done with coords, we go back to the problem of setting limits on the box-office bar plot. Instead of setting limits with scale functions, we can also set them via the arguments xlim and ylim inside the coord, for example here coord_cartesian(). (This would be a good reason to explicity add coord_cartesian() to a plot.) When we set limits in the coord ggplot does not discard any data points. Instead it simply zooms in or out according to the limits set. Try this out by setting the x limits from 10 to 65 in the box-office plot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  coord_cartesian(\n    xlim = ___\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  coord_cartesian(\n    xlim = c(10, 65)\n  )\n\n\n\n\nNote: It is normally not a good idea to start a bar plot at a value other than 0. This exercise was solely meant to demonstrate how limits in coords differ from limits in scales."
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#most-data-visualizations-use-cartesian-coordinates",
    "href": "slides/coordinate-systems-axes.html#most-data-visualizations-use-cartesian-coordinates",
    "title": "Coordinate systems and axes",
    "section": "Most data visualizations use Cartesian coordinates",
    "text": "Most data visualizations use Cartesian coordinates"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#changing-units-does-not-change-the-plot",
    "href": "slides/coordinate-systems-axes.html#changing-units-does-not-change-the-plot",
    "title": "Coordinate systems and axes",
    "section": "Changing units does not change the plot",
    "text": "Changing units does not change the plot"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#if-scale-units-are-unrelated-aspect-ratio-is-arbitrary",
    "href": "slides/coordinate-systems-axes.html#if-scale-units-are-unrelated-aspect-ratio-is-arbitrary",
    "title": "Coordinate systems and axes",
    "section": "If scale units are unrelated, aspect ratio is arbitrary",
    "text": "If scale units are unrelated, aspect ratio is arbitrary"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#logarithmic-scales-log-scales",
    "href": "slides/coordinate-systems-axes.html#logarithmic-scales-log-scales",
    "title": "Coordinate systems and axes",
    "section": "Logarithmic scales (log scales)",
    "text": "Logarithmic scales (log scales)\n\nVisualize these five values: 1,   3.16,   10,   31.6,   100"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#example-population-number-of-texas-counties",
    "href": "slides/coordinate-systems-axes.html#example-population-number-of-texas-counties",
    "title": "Coordinate systems and axes",
    "section": "Example: Population number of Texas counties",
    "text": "Example: Population number of Texas counties\nA linear scale emphasizes large counties"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#example-population-number-of-texas-counties-1",
    "href": "slides/coordinate-systems-axes.html#example-population-number-of-texas-counties-1",
    "title": "Coordinate systems and axes",
    "section": "Example: Population number of Texas counties",
    "text": "Example: Population number of Texas counties\nA log scale shows symmetry around the median"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#nonlinear-coordinate-systems-polar-coordinates",
    "href": "slides/coordinate-systems-axes.html#nonlinear-coordinate-systems-polar-coordinates",
    "title": "Coordinate systems and axes",
    "section": "Nonlinear coordinate systems: Polar coordinates",
    "text": "Nonlinear coordinate systems: Polar coordinates"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#cartesian-vs-polar-example",
    "href": "slides/coordinate-systems-axes.html#cartesian-vs-polar-example",
    "title": "Coordinate systems and axes",
    "section": "Cartesian vs polar example",
    "text": "Cartesian vs polar example"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#getting-the-data",
    "href": "slides/coordinate-systems-axes.html#getting-the-data",
    "title": "Coordinate systems and axes",
    "section": "Getting the data",
    "text": "Getting the data\nThe boxoffice dataset:\n\n\nboxoffice &lt;- tibble(\n  rank = 1:5,\n  title = c(\"Star Wars\", \"Jumanji\", \"Pitch Perfect 3\", \"Greatest Showman\", \"Ferdinand\"),\n  amount = c(71.57, 36.17, 19.93, 8.81, 7.32) # million USD\n)\n\n\n\nThe tx_counties dataset:\n\n\ntx_counties &lt;- read_csv(\"https://wilkelab.org/SDS375/datasets/US_census.csv\") |&gt; \n  filter(state == \"Texas\") |&gt;\n  mutate(popratio = pop2010/median(pop2010)) |&gt;\n  arrange(desc(popratio)) |&gt;\n  mutate(index = 1:n())\n\n\n\n\nThe temperatures dataset:\n\n\ntemperatures &lt;- read_csv(\"https://wilkelab.org/SDS375/datasets/tempnormals.csv\") |&gt;\n  mutate(\n    location = factor(\n      location, levels = c(\"Death Valley\", \"Houston\", \"San Diego\", \"Chicago\")\n    )\n  ) |&gt;\n  select(location, station_id, day_of_year, month, temperature)"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#scale-functions-customize-the-x-and-y-axes",
    "href": "slides/coordinate-systems-axes.html#scale-functions-customize-the-x-and-y-axes",
    "title": "Coordinate systems and axes",
    "section": "Scale functions customize the x and y axes",
    "text": "Scale functions customize the x and y axes\nRecall the box-office example from a prior lecture:\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col()"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#scale-functions-customize-the-x-and-y-axes-1",
    "href": "slides/coordinate-systems-axes.html#scale-functions-customize-the-x-and-y-axes-1",
    "title": "Coordinate systems and axes",
    "section": "Scale functions customize the x and y axes",
    "text": "Scale functions customize the x and y axes\nAdd scale functions (no change in figure so far):\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  scale_x_continuous() +\n  scale_y_discrete()"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#scale-functions-customize-the-x-and-y-axes-2",
    "href": "slides/coordinate-systems-axes.html#scale-functions-customize-the-x-and-y-axes-2",
    "title": "Coordinate systems and axes",
    "section": "Scale functions customize the x and y axes",
    "text": "Scale functions customize the x and y axes\nThe parameter name sets the axis title:\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  scale_x_continuous(\n    name = \"weekend gross (million USD)\"\n  ) +\n  scale_y_discrete(\n    name = NULL  # no axis title\n  )\n\n\n\n\n\n\n\n\n\n\n\nNote: We could do the same with xlab() and ylab()"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#scale-functions-customize-the-x-and-y-axes-3",
    "href": "slides/coordinate-systems-axes.html#scale-functions-customize-the-x-and-y-axes-3",
    "title": "Coordinate systems and axes",
    "section": "Scale functions customize the x and y axes",
    "text": "Scale functions customize the x and y axes\nThe parameter limits sets the scale limits:\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  scale_x_continuous(\n    name = \"weekend gross (million USD)\",\n    limits = c(0, 80)\n  ) +\n  scale_y_discrete(\n    name = NULL\n  )\n\n\n\n\n\n\n\n\n\n\n\nNote: We could do the same with xlim() and ylim() but I advise against it, as these functions can have unexpected side-effects"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#scale-functions-customize-the-x-and-y-axes-4",
    "href": "slides/coordinate-systems-axes.html#scale-functions-customize-the-x-and-y-axes-4",
    "title": "Coordinate systems and axes",
    "section": "Scale functions customize the x and y axes",
    "text": "Scale functions customize the x and y axes\nThe parameter breaks sets the axis tick positions:\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  scale_x_continuous(\n    name = \"weekend gross (million USD)\",\n    limits = c(0, 80),\n    breaks = c(0, 25, 50, 75)\n  ) +\n  scale_y_discrete(\n    name = NULL\n  )"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#scale-functions-customize-the-x-and-y-axes-5",
    "href": "slides/coordinate-systems-axes.html#scale-functions-customize-the-x-and-y-axes-5",
    "title": "Coordinate systems and axes",
    "section": "Scale functions customize the x and y axes",
    "text": "Scale functions customize the x and y axes\nThe parameter labels sets the axis tick labels:\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  scale_x_continuous(\n    name = \"weekend gross (million USD)\",\n    limits = c(0, 80),\n    breaks = c(0, 25, 50, 75),\n    labels = c(\"0\", \"$25M\", \"$50M\", \"$75M\")\n  ) +\n  scale_y_discrete(\n    name = NULL\n  )"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#scale-functions-customize-the-x-and-y-axes-6",
    "href": "slides/coordinate-systems-axes.html#scale-functions-customize-the-x-and-y-axes-6",
    "title": "Coordinate systems and axes",
    "section": "Scale functions customize the x and y axes",
    "text": "Scale functions customize the x and y axes\nThe parameter expand sets the axis expansion:\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  scale_x_continuous(\n    name = \"weekend gross (million USD)\",\n    limits = c(0, 80),\n    breaks = c(0, 25, 50, 75),\n    labels = c(\"0\", \"$25M\", \"$50M\", \"$75M\"),\n    expand = expansion(mult = c(0, 0.06))\n  ) +\n  scale_y_discrete(\n    name = NULL\n  )"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#scale-functions-define-transformations",
    "href": "slides/coordinate-systems-axes.html#scale-functions-define-transformations",
    "title": "Coordinate systems and axes",
    "section": "Scale functions define transformations",
    "text": "Scale functions define transformations\n\n\nLinear y scale:\n\n\nggplot(tx_counties) +\n  aes(x = index, y = popratio) +\n  geom_point() +\n  scale_y_continuous() \n\n\n\n\n \n\n\n\n\n\n\nLog y scale:\n\n\nggplot(tx_counties) +\n  aes(x = index, y = popratio) +\n  geom_point() +\n  scale_y_log10()"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#parameters-work-the-same-for-all-scale-functions",
    "href": "slides/coordinate-systems-axes.html#parameters-work-the-same-for-all-scale-functions",
    "title": "Coordinate systems and axes",
    "section": "Parameters work the same for all scale functions",
    "text": "Parameters work the same for all scale functions\n\n\nLinear y scale:\n\n\nggplot(tx_counties) +\n  aes(x = index, y = popratio) +\n  geom_point() +\n  scale_y_continuous(\n    name = \"population number / median\",\n    breaks = c(0, 100, 200),\n    labels = c(\"0\", \"100\", \"200\")\n  )\n\n\n\n\n \n\n\n\n\n\n\nLog y scale:\n\n\nggplot(tx_counties) +\n  aes(x = index, y = popratio) +\n  geom_point() +\n  scale_y_log10(\n    name = \"population number / median\",\n    breaks = c(0.01, 1, 100),\n    labels = c(\"0.01\", \"1\", \"100\")\n  )"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#coords-define-the-coordinate-system",
    "href": "slides/coordinate-systems-axes.html#coords-define-the-coordinate-system",
    "title": "Coordinate systems and axes",
    "section": "Coords define the coordinate system",
    "text": "Coords define the coordinate system\n\n\nggplot(temperatures, aes(day_of_year, temperature, color = location)) +\n  geom_line() +\n  coord_cartesian()  # cartesian coords are the default"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#coords-define-the-coordinate-system-1",
    "href": "slides/coordinate-systems-axes.html#coords-define-the-coordinate-system-1",
    "title": "Coordinate systems and axes",
    "section": "Coords define the coordinate system",
    "text": "Coords define the coordinate system\n\n\nggplot(temperatures, aes(day_of_year, temperature, color = location)) +\n  geom_line() +\n  coord_polar()   # polar coords"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#coords-define-the-coordinate-system-2",
    "href": "slides/coordinate-systems-axes.html#coords-define-the-coordinate-system-2",
    "title": "Coordinate systems and axes",
    "section": "Coords define the coordinate system",
    "text": "Coords define the coordinate system\n\n\nggplot(temperatures, aes(day_of_year, temperature, color = location)) +\n  geom_line() +\n  coord_polar() +\n  scale_y_continuous(limits = c(0, 105))  # fix up temperature limits"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#further-reading",
    "href": "slides/coordinate-systems-axes.html#further-reading",
    "title": "Coordinate systems and axes",
    "section": "Further reading",
    "text": "Further reading\n\n\nFundamentals of Data Visualization: Chapter 3: Coordinate systems and axes\nggplot2 reference documentation: Scales\nggplot2 reference documentation: Coordinate systems\nggplot2 book: Position scales\nggplot2 book: Coordinate systems"
  }
]