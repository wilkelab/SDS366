[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "SDS 366",
    "section": "",
    "text": "This is the home page for SDS 366, Data Visualization in R. All course materials will be posted on this site.\nInstructor: Claus O. Wilke\nMeeting times: TTH 5:00pm to 6:30pm Venue: MEZ B0.306 Syllabus: click here\nUpcoming lectures and assignments: click here"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html#computing-requirements",
    "href": "index.html#computing-requirements",
    "title": "SDS 366",
    "section": "Computing requirements",
    "text": "Computing requirements\nFor students enrolled in this course, you only need a working web browser to access the edupod server, located at: https://edupod.cns.utexas.edu/\nIf you are using the edupod server, stop reading here. Everything is pre-installed and no further action is needed.\nTo run any of the materials locally on your own machine, you will need the following:\n\nA recent version of R, download from here.\nA recent version of RStudio, download from here, OR a recent version of Positron, download from here.\nThe following R packages:\nbroom, cluster, colorspace, cowplot, distill, gapminder, GGally, gganimate, ggiraph, ggdendro, ggdist, ggforce, ggplot2movies, ggrepel, ggridges, ggthemes, gifski, glue, knitr, learnr, naniar, margins, MASS, Matrix, nycflights13, palmerpenguins, patchwork, rmarkdown, rnaturalearth, rnaturalearthhires, scales, sf, shinyjs, sp, tidyverse, transformr, umap, xaringan\n\nYou can install all required R packages at once by running the following code in the R command line:\n# first run this command:\ninstall.packages(\n  c(\n    \"broom\", \"cluster\", \"colorspace\", \"cowplot\", \"distill\", \"gapminder\", \n    \"GGally\", \"gganimate\", \"ggiraph\", \"ggdendro\", \"ggdist\", \"ggforce\",\n    \"ggplot2movies\", \"ggrepel\", \"ggridges\", \"ggthemes\", \"gifski\", \"glue\",\n    \"knitr\", \"learnr\", \"naniar\", \"margins\", \"MASS\", \"Matrix\",\n    \"nycflights13\", \"palmerpenguins\", \"patchwork\", \"rmarkdown\", \"rnaturalearth\",\n    \"scales\", \"sf\", \"shinyjs\", \"sp\", \"tidyverse\", \"transformr\", \"umap\",\n    \"xaringan\"\n  )\n)\n\n# then run this command:\ninstall.packages(\n  \"rnaturalearthhires\", repos = \"https://packages.ropensci.org\", type = \"source\"\n)"
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "Title: SDS 366 Data Visualization in R Semester: Spring 2025 Unique: 57785, TTH 5:00pm to 6:30pm, MEZ B0.306\nInstructor: Claus O. Wilke Email: wilke@austin.utexas.edu Office Hours: Mon. 9am - 10am (open Zoom), Thurs. 10am - 11am (open Zoom), or by appointment\nTeaching Assistant: TBD Email: TBD Office Hours: TBD"
  },
  {
    "objectID": "syllabus.html#course-title-and-instructor",
    "href": "syllabus.html#course-title-and-instructor",
    "title": "Syllabus",
    "section": "",
    "text": "Title: SDS 366 Data Visualization in R Semester: Spring 2025 Unique: 57785, TTH 5:00pm to 6:30pm, MEZ B0.306\nInstructor: Claus O. Wilke Email: wilke@austin.utexas.edu Office Hours: Mon. 9am - 10am (open Zoom), Thurs. 10am - 11am (open Zoom), or by appointment\nTeaching Assistant: TBD Email: TBD Office Hours: TBD"
  },
  {
    "objectID": "syllabus.html#purpose-and-contents-of-the-class",
    "href": "syllabus.html#purpose-and-contents-of-the-class",
    "title": "Syllabus",
    "section": "Purpose and contents of the class",
    "text": "Purpose and contents of the class\nIn this class, students will learn how to visualize data sets and how to reason about and communicate with data visualizations. A substantial component of this class will be dedicated to learning how to program in R. In addition, students will learn how to compile analyses and visualizations into reports, how to make the reports reproducible, and how to post reports on a website or blog."
  },
  {
    "objectID": "syllabus.html#prerequisites",
    "href": "syllabus.html#prerequisites",
    "title": "Syllabus",
    "section": "Prerequisites",
    "text": "Prerequisites\nThe class requires no prior knowledge of programming. However, students are expected to have successfully completed an introductory statistics class taught with R, such as SDS 320E, and they are expected to have some basic familiarity with the statistical language R."
  },
  {
    "objectID": "syllabus.html#textbook",
    "href": "syllabus.html#textbook",
    "title": "Syllabus",
    "section": "Textbook",
    "text": "Textbook\nThis class draws heavily from materials presented in the following book:\n\nClaus O. Wilke. Fundamentals of Data Visualization. O’Reilly Media, 2019.\n\nAdditionally, we will also make use of the following books:\n\nHadley Wickham, Danielle Navarro, and Thomas Lin Pedersen. ggplot2: Elegant Graphics for Data Analysis, 3rd ed. Springer, to appear.\nKieran Healy. Data Visualization: A Practical Introduction. Princeton University Press, 2018.\n\nAll these books are freely available online and you do not need to purchase a physical copy of either book to succeed in this class."
  },
  {
    "objectID": "syllabus.html#topics-covered",
    "href": "syllabus.html#topics-covered",
    "title": "Syllabus",
    "section": "Topics covered",
    "text": "Topics covered\n\n\n\n\n\n\n\n\nClass\nTopic\nCoding concepts covered\n\n\n\n\n1.\nIntroduction, reproducible workflows\nRStudio setup online, R Markdown\n\n\n2.\nAesthetic mappings\nggplot2 quickstart\n\n\n3.\nTelling a story\n\n\n\n4.\nVisualizing amounts\ngeom_col(), geom_point(), position adjustments\n\n\n5.\nCoordinate systems and axes\ncoords and position scales\n\n\n6.\nVisualizing distributions 1\nstats, geom_density(), geom_histogram()\n\n\n7.\nVisualizing distributions 2\nviolin plots, sina plots, ridgeline plots\n\n\n8.\nColor scales\ncolor and fill scales\n\n\n9.\nData wrangling 1\nmutate(), filter(), arrange()\n\n\n10.\nData wrangling 2\ngroup_by(), summarize(), count()\n\n\n11.\nVisualizing proportions\nbar charts, pie charts\n\n\n12.\nGetting to know your data\nhandling missing data, is.na(), case_when()\n\n\n13.\nGetting things into the right order\nfct_reorder(), fct_lump()\n\n\n14.\nFigure design\nggplot themes\n\n\n15.\nColor spaces, color vision deficiency\ncolorspace package\n\n\n16.\nFunctions and functional programming\nmap(), nest(), purrr package\n\n\n17.\nVisualizing trends\ngeom_smooth()\n\n\n18.\nWorking with models\nlm, cor.test, broom package\n\n\n19.\nVisualizing uncertainty\nfrequency framing, error bars, ggdist package\n\n\n20.\nDimension reduction 1\nPCA\n\n\n21.\nDimension reduction 2\nkernel PCA, t-SNE, UMAP\n\n\n22.\nClustering 1\nk-means clustering\n\n\n23.\nClustering 2\nhierarchical clustering\n\n\n24.\nVisualizing geospatial data\ngeom_sf(), coord_sf()\n\n\n25.\nRedundant coding, text annotations\nggrepel package\n\n\n26.\nInteractive plots\nggiraph package\n\n\n27.\nOver-plotting\njittering, 2d histograms, contour plots\n\n\n28.\nCompound figures\npatchwork package"
  },
  {
    "objectID": "syllabus.html#computing-requirements",
    "href": "syllabus.html#computing-requirements",
    "title": "Syllabus",
    "section": "Computing requirements",
    "text": "Computing requirements\nProgramming needs to be learned by doing, and a significant portion of the in-class time will be dedicated to working through simple problems. All programming exercises will be available through a web-based system, so the only system requirement for student computers is a modern web browser."
  },
  {
    "objectID": "syllabus.html#course-site",
    "href": "syllabus.html#course-site",
    "title": "Syllabus",
    "section": "Course site",
    "text": "Course site\nAll materials and assignments will be posted on the course webpage at: https://wilkelab.org/SDS366\nAssignment deadlines are shown on the schedule.\nAssignments will be submitted and grades will be posted on Canvas.\nParticipation via presence in class and in online discussions will also be tracked on Canvas.\nR compute sessions are available at: https://edupod.cns.utexas.edu\nNote that edupods will be unavailable due to maintenance approximately two hours per month, usually on a Thursday afternoon between 4pm and 6pm. Specific maintenance times are published in advance on the RCTF wiki."
  },
  {
    "objectID": "syllabus.html#assignments-and-grading",
    "href": "syllabus.html#assignments-and-grading",
    "title": "Syllabus",
    "section": "Assignments and grading",
    "text": "Assignments and grading\nThe graded components of this class will be homeworks, projects, peer-grading, and participation. Each week either a homework, a project, or a peer-grading is due. Homeworks will be relatively short visualization problems to be solved by the student, usually involving some small amount of programming to achieve a specified goal. They are graded by the TA. Projects are larger and more involved data analysis problems that involve both programming and writing. They are peer-graded by the students. Students will have at least one week to complete each homework and two weeks to complete each project. The submission deadlines for homeworks and projects will be Thursdays at 11pm.\nThere will be seven homeworks and three projects. Both homeworks and projects need to be submitted electronically on Canvas. Homeworks are worth 20 points and projects are worth 100 points. The lowest-scoring homework will be dropped, so that a maximum of 120 points can be obtained from the homeworks.\nProjects are peer-graded, which involves evaluating three projects by other students according to a detailed grading rubric that will be provided. The final grade for each project is the mean of the peer-graded projects. The peer-grading itself will be graded by the TA, who will also oversee and spot-check the assigned peer grades. Experience has shown that peer-grading is often the most instructive component of this class, so don’t take this lightly.\nParticipation is assessed in two ways. First, students will receive 2 points for every lecture they attend. This is tracked via simple quizzes on Canvas. Second, each week students can receive up to 4 points for making substantive contributions to the Canvas online discussion (2 points per contribution). Total participation points are capped at 52 (13 weeks of class times 4 points), so students can compensate for lack of in-person attendance by participating in discussions and vice versa. You do not have to get full points in both in-person attendance and online discussions. No participation is assessed in the first week of class.\n\n\n\nAssignment type\nNumber\nPoints per assignment\nTotal points\n\n\n\n\nHomework\n6 (+1)\n20\n120\n\n\nProject\n3\n100\n300\n\n\nPeer grading\n3\n16\n48\n\n\nParticipation\n26 (+26)\n2\n52\n\n\n\nThus, in summary, each project (+ peer grading) contributes 22% to the final grade, the totality of all homeworks contributes another 23% to the final grade, and participation contributes 10%. There are no traditional exams in this class and there is no final.\nThe class will use +/- grading, and the exact grade boundaries will be determined at the end of the semester. However, the following minimum grades will be guaranteed:\n\n\n\nPoints achieved\nMinimum guaranteed grade\n\n\n\n\n468 (90%)\nA-\n\n\n416 (80%)\nB-\n\n\n364 (70%)\nC-\n\n\n260 (50%)\nD-"
  },
  {
    "objectID": "syllabus.html#late-assignment-policy",
    "href": "syllabus.html#late-assignment-policy",
    "title": "Syllabus",
    "section": "Late assignment policy",
    "text": "Late assignment policy\nHomeworks that are submitted past the posted deadline will not be graded and will receive 0 points.\nProject submissions will have a 1-day grace period. Projects submitted during the grace period will have 25 points deducted from the obtained grade. After the grace period, students who have not submitted their project will receive 0 points.\nPeer grades need to be submitted by the posted deadline. Late submissions will result in 0 points for the peer-grading effort.\nIn case of illness or other unforeseen circumstances out of your control, please reach out to Claus Wilke as soon as possible. We will consider your request on a case-by-case basis. If you need a deadline extension for valid reasons, please reach out before the official submission deadline and state how much of an extension you would need. Whether deadline extensions are possible depends on the severity of your situation as well as whether the solutions to the assignment have already been published."
  },
  {
    "objectID": "syllabus.html#office-hours",
    "href": "syllabus.html#office-hours",
    "title": "Syllabus",
    "section": "Office hours",
    "text": "Office hours\nBoth the graduate TA and myself will be available at posted times or by appointment. Office hours will be over Zoom. The most effective way to request an appointment for office hours outside of posted times is to suggest several times that work for you. I would suggest to write an email such as the following:\nDear Dr. Wilke,\n\nI would like to request a meeting with you outside of \nregular office hours this week. I am available Thurs.\nbetween 1pm and 2:30pm or Fri. before 11am or after 4pm.\n\nThanks a lot,\n  John Doe\nNote that we will not usually make appointments before 9am or after 5pm."
  },
  {
    "objectID": "syllabus.html#email-policy",
    "href": "syllabus.html#email-policy",
    "title": "Syllabus",
    "section": "Email policy",
    "text": "Email policy\nWhen emailing about this course, please put “SDS366” into the subject line. Emails to the instructor or TA should be restricted to organizational issues, such as requests for appointments, questions about course organization, etc. For all other issues, post in the discussions on Canvas, ask a question during open Zoom, or make an appointment for a one-on-one session.\nSpecifically, we will not discuss technical issues related to assignments over email. Technical issues are questions concerning how to approach a particular problem, whether a particular solution is correct, or how to use the statistical software R. These questions should be posted as issues on GitHub. Also, we will not discuss grading-related matters over email. If you have a concern about grading, schedule a one-on-one Zoom meeting."
  },
  {
    "objectID": "syllabus.html#special-accommodations",
    "href": "syllabus.html#special-accommodations",
    "title": "Syllabus",
    "section": "Special accommodations",
    "text": "Special accommodations\nStudents with disabilities. Students with disabilities may request appropriate accommodations from the Division of Diversity and Community Engagement, Services for Students with Disabilities, 512-471-6259, https://diversity.utexas.edu/disability/\nReligious holy days. Students who must miss a class or an assignment to observe a religious holy day will be given an opportunity to complete the missed work within a reasonable time after the absence. According to UT Austin policy, such students must notify me of the pending absence at least fourteen days prior to the date of observance of a religious holy day."
  },
  {
    "objectID": "syllabus.html#academic-dishonesty",
    "href": "syllabus.html#academic-dishonesty",
    "title": "Syllabus",
    "section": "Academic dishonesty",
    "text": "Academic dishonesty\nThis course is built upon the idea that student interaction is important and a powerful way to learn. We encourage you to communicate with other students, in particular through the discussion forums on Canvas. However, there are times when you need to demonstrate your own ability to work and solve problems. In particular, your homeworks and projects are independent work, unless explicitly stated otherwise. You are allowed to confer with fellow students about general approaches to solve the problems in the assignments, but you have to do the assignments on your own and describe your work in your own words. Students who violate these expectations can expect to receive a failing grade on the assignment and will be reported to Student Judicial Services. These types of violations are reported to professional schools, should you ever decide to apply one day. Don’t do it—it’s not worth the consequences."
  },
  {
    "objectID": "syllabus.html#sharing-of-course-materials-is-prohibited",
    "href": "syllabus.html#sharing-of-course-materials-is-prohibited",
    "title": "Syllabus",
    "section": "Sharing of Course Materials is Prohibited",
    "text": "Sharing of Course Materials is Prohibited\nAny materials in this class that are not posted publicly may not be shared online or with anyone outside of the class unless you have my explicit, written permission. This includes but is not limited to lecture hand-outs, videos, assessments (quizzes, exams, papers, projects, homework assignments), in-class materials, review sheets, and additional problem sets. Unauthorized sharing of materials promotes cheating. It is a violation of the University’s Student Honor Code and an act of academic dishonesty. We are well aware of the sites used for sharing materials, and any materials found online that are associated with you, or any suspected unauthorized sharing of materials, will be reported to Student Conduct and Academic Integrity in the Office of the Dean of Students. These reports can result in sanctions, including failure in the course.\nAny materials posted on the public class website (https://wilkelab.org/SDS366/) are considered public and can be shared under the Creative Commons Attribution CC BY 4.0 license."
  },
  {
    "objectID": "syllabus.html#class-recordings",
    "href": "syllabus.html#class-recordings",
    "title": "Syllabus",
    "section": "Class Recordings",
    "text": "Class Recordings\nIf any class recordings are provided they are reserved only for students in this class for educational purposes and are protected under FERPA. The recordings should not be shared outside the class in any form. Violation of this restriction by a student could lead to Student Misconduct proceedings."
  },
  {
    "objectID": "schedule.html#homeworks",
    "href": "schedule.html#homeworks",
    "title": "SDS 366 Schedule Spring 2025",
    "section": "Homeworks",
    "text": "Homeworks\nAll homeworks are due by 11:00pm on the day they are due. Homeworks need to be submitted as pdf files on Canvas."
  },
  {
    "objectID": "schedule.html#projects",
    "href": "schedule.html#projects",
    "title": "SDS 366 Schedule Spring 2025",
    "section": "Projects",
    "text": "Projects\nAll projects are due by 11:00pm on the day they are due. Projects need to be submitted on Canvas. Please carefully read the submission instructions for each project."
  },
  {
    "objectID": "worksheets/aesthetic-mappings.html",
    "href": "worksheets/aesthetic-mappings.html",
    "title": "Aesthetic mappings",
    "section": "",
    "text": "In this worksheet, we will discuss a core concept of ggplot, the mapping of data values onto aesthetics.\nFirst we need to load the required R packages and the data. Please run this code to ensure the subsequent exercises work.\n\n\n\n\n\n\n\n\nWe will first work with the dataset temps_houston which contains the average temperature for each day of the year for Houston, TX."
  },
  {
    "objectID": "worksheets/aesthetic-mappings.html#introduction",
    "href": "worksheets/aesthetic-mappings.html#introduction",
    "title": "Aesthetic mappings",
    "section": "",
    "text": "In this worksheet, we will discuss a core concept of ggplot, the mapping of data values onto aesthetics.\nFirst we need to load the required R packages and the data. Please run this code to ensure the subsequent exercises work.\n\n\n\n\n\n\n\n\nWe will first work with the dataset temps_houston which contains the average temperature for each day of the year for Houston, TX."
  },
  {
    "objectID": "worksheets/aesthetic-mappings.html#basic-use-of-ggplot",
    "href": "worksheets/aesthetic-mappings.html#basic-use-of-ggplot",
    "title": "Aesthetic mappings",
    "section": "Basic use of ggplot",
    "text": "Basic use of ggplot\nIn the most basic use of ggplot, we call the ggplot() function with a dataset and an aesthetic mapping (created with aes()), and then we add a geom, such as geom_line() to draw lines or geom_point() to draw points.\nTry this for yourself. Map the column day_of_year onto the x axis and the column temperature onto the y axis, and use geom_line() to display the data.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_houston, aes(x = day_of_year, y = temperature)) +\n  geom_line()\n\n\n\n\nTry again. Now use geom_point() instead of geom_line().\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_houston, aes(x = day_of_year, y = temperature)) +\n  geom_point()\n\n\n\n\nAnd now swap which column you map to x and which to y.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_houston, aes(x = temperature, y = day_of_year)) +\n  geom_point()"
  },
  {
    "objectID": "worksheets/aesthetic-mappings.html#more-complex-geoms",
    "href": "worksheets/aesthetic-mappings.html#more-complex-geoms",
    "title": "Aesthetic mappings",
    "section": "More complex geoms",
    "text": "More complex geoms\nYou can use other geoms to make different types of plots. For example, geom_boxplot() will make boxplots. For boxplots, we frequently want categorical data on the x or y axis. For example, we might want a separate boxplot for each month. Try this out. Puth month on the x axis, temperature on the y axis, and use geom_boxplot().\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temps_houston, aes(x = month, y = temperature)) +\n  ___()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_houston, aes(x = month, y = temperature)) +\n  geom_boxplot()\n\n\n\n\nNow put the month on the y axis and the temperature on the x axis.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temps_houston, aes(x = ___, y = ___)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_houston, aes(x = temperature, y = month)) +\n  geom_boxplot()"
  },
  {
    "objectID": "worksheets/aesthetic-mappings.html#adding-color",
    "href": "worksheets/aesthetic-mappings.html#adding-color",
    "title": "Aesthetic mappings",
    "section": "Adding color",
    "text": "Adding color\nNext we will be working with the dataset temperatures, which is similar to temps_houston but contains data for three more locations:\n\n\n\n\n\n\n\n\nMake a line plot of temperature against day_of_year, using the color aesthetic to color the lines by location.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temperatures, aes(x = day_of_year, y = temperature, color = ___)) +\n  geom_line()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temperatures, aes(x = day_of_year, y = temperature, color = location)) +\n  geom_line()\n\n\n\n\nTry again, this time using location as the location along the y axis and temperature for the color. This plot looks better with geom_point() than geom_line(). (Try it out to see why. Also, try geom_point(size = 5) to create larger points.)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temperatures, aes(x = ___, y = ___, color = ___)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temperatures, aes(x = day_of_year, y = location, color = temperature)) +\n  geom_point()"
  },
  {
    "objectID": "worksheets/aesthetic-mappings.html#using-the-fill-aesthetic",
    "href": "worksheets/aesthetic-mappings.html#using-the-fill-aesthetic",
    "title": "Aesthetic mappings",
    "section": "Using the fill aesthetic",
    "text": "Using the fill aesthetic\nSome geoms use a fill aesthetic, which is similar to color but applies to shaded areas. (color applies to lines and points.) For example, we can use the fill aesthetic with geom_boxplot() to color the interior of the box. Try this yourself. Plot month on x, temperature on y, and color the interior of the box by location.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temperatures, aes(x = month, y = ___, fill = ___)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temperatures, aes(x = month, y = temperature, fill = location)) +\n  geom_boxplot()\n\n\n\n\nCan you color the lines of the boxplot by location and the interior by month? Try it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temperatures, aes(x = month, y = temperature, color = ___, fill = ___)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temperatures, aes(x = month, y = temperature, color = location, fill = month)) +\n  geom_boxplot()"
  },
  {
    "objectID": "worksheets/aesthetic-mappings.html#using-aesthetics-as-parameters",
    "href": "worksheets/aesthetic-mappings.html#using-aesthetics-as-parameters",
    "title": "Aesthetic mappings",
    "section": "Using aesthetics as parameters",
    "text": "Using aesthetics as parameters\nMany of the aesthetics (such as color, fill, and also size to change line size or point thickness) can be used as parameters inside a geom rather than inside an aes() statement. The difference is that when you use an aesthetic as a parameter, you specify a specific value, such as color = \"blue\", rather than a mapping, such as aes(color = location). Notice the difference: Inside the aes() function, we don’t actually specify the specific color values, ggplot does that for us. We only say that we want the data values of the location column to correspond to different colors. (We will learn later how to tell ggplot to use specific colors in this mapping.)\nTry this with the boxplot example from the previous section. Map location onto the fill aesthetic but set the color of the lines to \"navyblue\".\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temperatures, aes(x = month, y = temperature, fill = ___)) +\n  geom_boxplot(color = ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temperatures, aes(x = month, y = temperature, fill = location)) +\n  geom_boxplot(color = \"navyblue\")\n\n\n\n\nNow do the reverse. Map location onto the line colors but fill the box with the color \"navyblue\".\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temperatures, aes(x = month, y = temperature, color = ___)) +\n  geom_boxplot(fill = ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temperatures, aes(x = month, y = temperature, color = location)) +\n  geom_boxplot(fill = \"navyblue\")"
  }
]