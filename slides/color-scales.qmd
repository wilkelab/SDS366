---
title: "Color scales"
author: "Claus O. Wilke"
date: last-modified
format: 
  revealjs:
    theme:
      - default
      - Wilke-theme.scss
    auto-stretch: false
    chalkboard: true
execute:
  fig-format: svg
  fig-asp: 0.618
  fig-width: 5.5
---

```{r}
#| include: false
library(tidyverse)
library(cowplot)
library(ggthemes)
library(colorspace)
library(ggrepel)
library(here)

# ggplot2 settings so plots scale well for slide size 
theme_set(theme_gray(14))
update_geom_defaults("point", list(size = 2))
#update_geom_defaults("line", list(linewidth = 1))
```

## Uses of color in data visualization

<table style = "border: none; line-height: 2.5;">
<tr style = "border: none; background: white;">
<td style = "text-align: left; width: 55%; padding: 0.1em 0em;">
1\. Distinguish categories (qualitative)
</td>
<td>
<img src = "../assets/color-scales/qualitative.png" width = 100% style = "text-align: right; vertical-align: middle;"></img>
</td>
</tr>
</table>

## Qualitative scale example

```{r}
#| label: popgrowth-vs-popsize-colored
#| message: false
#| fig.width: 7.5
#| fig-cap: "&nbsp;"
#| out.width: "75%"
US_census <- read_csv(here("datasets", "US_census.csv"))
US_regions <- read_csv(here("datasets", "US_regions.csv"))

popgrowth <- left_join(US_census, US_regions) |>
    group_by(region, division, state) |>
    summarize(
      pop2000 = sum(pop2000, na.rm = TRUE),
      pop2010 = sum(pop2010, na.rm = TRUE),
      popgrowth = (pop2010-pop2000)/pop2000
    ) |>
    arrange(popgrowth) |>
    ungroup() |>
    mutate(
      #state = factor(state, levels = state),
      region = factor(region, levels = c("West", "South", "Midwest", "Northeast"))
    )

region_colors <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442")

labeled_states <- c(
  "Alaska", "Arizona", "California", "Florida", "Wisconsin", 
  "Louisiana", "Nevada", "Michigan", "Montana", "New Mexico",
  "Pennsylvania", "New York", "Oregon", "Rhode Island",
  "Tennessee", "Texas", "Utah", "Vermont"
)

df_repel <- select(popgrowth, x = pop2000, y = popgrowth, state) |>
  mutate(label = ifelse(state %in% labeled_states, as.character(state), ""))

p <- ggplot(popgrowth, aes(x = pop2000, y = popgrowth, color = region, fill = region)) +
  geom_text_repel(
    data = df_repel,
    aes(x, y, label = label),
    segment.alpha = 0.5, point.padding = 0.25,
    box.padding = .8,
    force = 1,
    min.segment.length = 0.1,
    max.overlaps = 1000,
    size = 10/.pt,
    seed = 7586,
    inherit.aes = FALSE
  ) +
  geom_point(size = 4, color = "white") +
  geom_point(size = 3, shape = 21) +
  scale_x_log10(
    breaks = c(1e6, 3e6, 1e7, 3e7),
    labels = expression(10^6, 3 %*% 10^6, 10^7, 3 %*% 10^7)
  ) +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
  xlab("population size in 2000") +
  ylab("population growth, 2000 to 2010") +
  theme_minimal_grid(14)

p +  
  scale_fill_manual(values = region_colors) +
  scale_color_manual(values = darken(region_colors, .3))
```

::: {.move-up-1em}
Palette name: Okabe-Ito
:::

## Qualitative scale example

```{r}
#| label: popgrowth-vs-popsize-colored2
#| message: false
#| fig.width: 7.5
#| fig-cap: "&nbsp;"
#| out.width: "75%"
region_colors <- RColorBrewer::brewer.pal(4, "Set1")

p +  
  scale_fill_manual(values = region_colors) +
  scale_color_manual(values = darken(region_colors, .3))
```

::: {.move-up-1em}
Palette name: ColorBrewer Set1
:::

## Qualitative scale example

```{r}
#| label: popgrowth-vs-popsize-colored3
#| message: false
#| fig.width: 7.5
#| fig-cap: "&nbsp;"
#| out.width: "75%"
region_colors <- RColorBrewer::brewer.pal(4, "Set3")

p +  
  scale_fill_manual(values = region_colors) +
  scale_color_manual(values = darken(region_colors, .3))
```

::: {.move-up-1em}
Palette name: ColorBrewer Set3
:::

## Uses of color in data visualization

<table style = "border: none; line-height: 2.5;">
<tr style = "border: none; background: white;">
<td style = "text-align: left; width: 55%; padding: 0.1em 0em;">
1\. Distinguish categories (qualitative)
</td>
<td>
<img src = "../assets/color-scales/qualitative.png" width = 100% style = "text-align: right; vertical-align: middle;"></img>
</td>
</tr>

<tr style = "border: none; background: white;">
<td style = "text-align: left; padding: 0.1em 0em;">
2\. Represent numeric values (sequential)
</td>
<td>
<img src = "../assets/color-scales/sequential.png" width = 100% style = "text-align: right; vertical-align: middle"></img>
</td>
</tr>
</table>

## Sequential scale example

::: {.move-down-1em}
```{r}
#| label: four-locations-temps-by-month
#| message: false
#| fig.width: 9
#| fig.asp: 0.3
#| fig-cap: "&nbsp;"
#| out.width: "90%"
temps_months <- read_csv(here("datasets", "tempnormals.csv")) |>
  group_by(location, month_name) |>
  summarize(mean = mean(temperature)) |>
  mutate(
    month = factor(
      month_name,
      levels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
    ),
    location = factor(
      location, levels = c("Death Valley", "Houston", "San Diego", "Chicago")
    )
  ) |>
  select(-month_name)

p <- ggplot(temps_months, aes(x = month, y = location, fill = mean)) + 
  geom_tile(width = .95, height = 0.95) + 
  scale_y_discrete(name = NULL) +
  coord_fixed(expand = FALSE) +
  theme_half_open() +
  theme(
    axis.line = element_blank(),
    axis.ticks = element_blank(),
    legend.title = element_text(size = 12)
  )

p + scale_fill_viridis_c(
    option = "D",
    name = "temperature (°F)"
  )
```
:::

::: {.move-up-1em}
Palette name: Viridis
:::

## Sequential scale example

::: {.move-down-1em}
```{r}
#| label: four-locations-temps-by-month2
#| message: false
#| fig.width: 9
#| fig.asp: 0.3
#| fig-cap: "&nbsp;"
#| out.width: "90%"
p + scale_fill_viridis_c(
    option = "B", begin = 0.15, end = 0.98,
    name = "temperature (°F)"
  )
```
:::

::: {.move-up-1em}
Palette name: Inferno
:::

## Sequential scale example

::: {.move-down-1em}
```{r}
#| label: four-locations-temps-by-month3
#| message: false
#| fig.width: 9
#| fig.asp: 0.3
#| fig-cap: "&nbsp;"
#| out.width: "90%"
p + scale_fill_viridis_c(
    option = "E",
    name = "temperature (°F)"
  )
```
:::

::: {.move-up-1em}
Palette name: Cividis
:::


## Uses of color in data visualization

<table style = "border: none; line-height: 2.5;">
<tr style = "border: none; background: white;">
<td style = "text-align: left; width: 55%; padding: 0.1em 0em;">
1\. Distinguish categories (qualitative)
</td>
<td>
<img src = "../assets/color-scales/qualitative.png" width = 100% style = "text-align: right; vertical-align: middle;"></img>
</td>
</tr>

<tr style = "border: none; background: white;">
<td style = "text-align: left; padding: 0.1em 0em;">
2\. Represent numeric values (sequential)
</td>
<td>
<img src = "../assets/color-scales/sequential.png" width = 100% style = "text-align: right; vertical-align: middle"></img>
</td>
</tr>

<tr style = "border: none; background: white;">
<td style = "text-align: left; padding: 0.1em 0em;">
3\. Represent numeric values (diverging)
</td>
<td>
<img src = "../assets/color-scales/diverging.png" width = 100% style = "text-align: right; vertical-align: middle"></img>
</td>
</tr>
</table>

## Diverging scale example

```{r}
#| label: forensic-correlations1
#| message: false
#| fig.width: 4
#| fig.asp: 1
#| fig-cap: "&nbsp;"
#| out.width: "40%"
forensic_glass <- read_csv(here("datasets", "forensic_glass.csv"))

cm <- cor(select(forensic_glass, -type, -RI, -Si))
df_wide <- as.data.frame(cm)
df_long <- stack(df_wide)
names(df_long) <- c("cor", "var1")
df_long <- cbind(df_long, var2 = rep(rownames(cm), length(rownames(cm))))
clust <- hclust(as.dist(1-cm), method="average") 
levels <- clust$labels[clust$order]
df_long$var1 <- factor(df_long$var1, levels = levels)
df_long$var2 <- factor(df_long$var2, levels = levels)

p <- ggplot(filter(df_long, as.integer(var1) < as.integer(var2)),
       aes(var1, var2, fill=cor)) + 
  geom_tile(color = "white", linewidth = 1) + 
  scale_x_discrete(position = "top", name = NULL, expand = c(0, 0)) +
  scale_y_discrete(name = NULL, expand = c(0, 0)) +
  guides(
    fill = guide_colorbar(
      direction = "horizontal",
      label.position = "bottom",
      title.position = "top",
      barwidth = grid::unit(140, "pt"),
      barheight = grid::unit(17.5, "pt"),
      ticks.linewidth = 1
    )
  ) +
  coord_fixed() +
  theme_half_open(rel_small = 1) +
  theme(
    axis.line = element_blank(),
    axis.ticks = element_blank(),
    axis.ticks.length = grid::unit(3, "pt"),
    legend.position = c(.97, .0),
    legend.justification = c(1, 0),
    legend.title.align = 0.5
  )
p + scale_fill_distiller(
  name = "correlation",
  limits = c(-.5, .5),
  breaks = c(-.5, 0, .5),
  labels = c("–0.5", "0.0", "0.5"),
  type = "div",
  palette = "PiYG",
  direction = 1
)
```

::: {.move-up-1em}
Palette name: ColorBrewer PiYG
:::

## Diverging scale example

```{r}
#| label: forensic-correlations2
#| message: false
#| fig.width: 4
#| fig.asp: 1
#| fig-cap: "&nbsp;"
#| out.width: "40%"
p + scale_fill_continuous_divergingx(
  name = "correlation",
  limits = c(-.5, .5),
  breaks = c(-.5, 0, .5),
  labels = c("–0.5", "0.0", "0.5"),
  palette = "Earth",
  rev = FALSE
)
```

::: {.move-up-1em}
Palette name: Carto Earth
:::

## Diverging scale example

```{r}
#| label: forensic-correlations3
#| message: false
#| fig.width: 4
#| fig.asp: 1
#| fig-cap: "&nbsp;"
#| out.width: "40%"
p + scale_fill_continuous_diverging(
  name = "correlation",
  limits = c(-.5, .5),
  breaks = c(-.5, 0, .5),
  labels = c("–0.5", "0.0", "0.5"),
  palette = "Blue-Red",
  rev = TRUE
)
```

::: {.move-up-1em}
Palette name: Blue-Red
:::


## Uses of color in data visualization

<table style = "border: none; line-height: 2.5;">
<tr style = "border: none; background: white;">
<td style = "text-align: left; width: 55%; padding: 0.1em 0em;">
1\. Distinguish categories (qualitative)
</td>
<td>
<img src = "../assets/color-scales/qualitative.png" width = 100% style = "text-align: right; vertical-align: middle;"></img>
</td>
</tr>

<tr style = "border: none; background: white;">
<td style = "text-align: left; padding: 0.1em 0em;">
2\. Represent numeric values (sequential)
</td>
<td>
<img src = "../assets/color-scales/sequential.png" width = 100% style = "text-align: right; vertical-align: middle"></img>
</td>
</tr>

<tr style = "border: none; background: white;">
<td style = "text-align: left; padding: 0.1em 0em;">
3\. Represent numeric values (diverging)
</td>
<td>
<img src = "../assets/color-scales/diverging.png" width = 100% style = "text-align: right; vertical-align: middle"></img>
</td>
</tr>

<tr style = "border: none; background: white;">
<td style = "text-align: left; padding: 0.1em 0em;">
4\. Highlight
</td>
<td>
<img src = "../assets/color-scales/highlight.png" width = 100% style = "text-align: right; vertical-align: middle"></img>
</td>
</tr>
</table>

## Highlight example

```{r}
#| label: Aus-athletes-track
#| message: false
#| fig.width: 6
#| fig-cap: "&nbsp;"
#| out.width: "65%"
male_Aus <- ggridges::Aus_athletes |>
  filter(sex == "m") |>
  filter(
    sport %in% c("basketball", "field", "swimming", "track (400m)", "track (sprint)", "water polo")
  ) |>
  mutate(
    sport = 
      case_when(
        sport == "track (400m)" ~ "track",
        sport == "track (sprint)" ~ "track",
        TRUE ~ sport
      ),
    sport = factor(
      sport,
      levels = c("track", "field", "water polo", "basketball", "swimming")
    )
  )

p <- ggplot(male_Aus, aes(x=height, y=pcBfat, shape=sport, color = sport, fill = sport)) +
  geom_point(size = 3) +
  scale_shape_manual(values = 21:25) +
  xlab("height (cm)") +
  ylab("% body fat") +
  theme_minimal_grid(14)

colors <- c("#BD3828", rep("#808080", 4))
fills <- c(
  alpha(colors[1], .815),
  alpha(colors[2:5], .5)
)

p + 
  scale_color_manual(values = colors) +
  scale_fill_manual(values = fills)
```

::: {.move-up-1em}
Palette name: Grays with accents
:::

## Highlight example

```{r}
#| label: Aus-athletes-track2
#| message: false
#| fig.width: 6
#| fig-cap: "&nbsp;"
#| out.width: "65%"
accent_OkabeIto <- c("#E69F00", "#56B4E9", "#CC79A7", "#F0E442", "#0072B2", "#009E73", "#D55E00")
accent_OkabeIto[1:4] <- desaturate(lighten(accent_OkabeIto[1:4], .4), .8)
accent_OkabeIto[5:7] <- darken(accent_OkabeIto[5:7], .3)

colors <- c(accent_OkabeIto[5], darken(accent_OkabeIto[1:4], .2))
fills <- c(
  alpha(accent_OkabeIto[5], .7),
  alpha(accent_OkabeIto[1:4], .7)
)

p + 
  scale_color_manual(values = colors) +
  scale_fill_manual(values = fills)
```

::: {.move-up-1em}
Palette name: Okabe Ito accent
:::

## Highlight example

```{r}
#| label: Aus-athletes-track3
#| message: false
#| fig.width: 6
#| fig-cap: "&nbsp;"
#| out.width: "65%"
accent_Brewer <- RColorBrewer::brewer.pal(7, name = "Accent")[c(7, 1:4)]

colors <- darken(accent_Brewer, .2)
fills <- c(accent_Brewer[1], alpha(accent_Brewer[2:5], .7))

p + 
  scale_color_manual(values = colors) +
  scale_fill_manual(values = fills)
```

::: {.move-up-1em}
Palette name: ColorBrewer accent
:::

<!-- Segment ends here -->

# Color scales in **ggplot2**

## Getting the data

::: {.tiny-font}
The `temps_months` dataset:
```{r}
#| echo: true
#| message: false
temps_months <- read_csv("https://wilkelab.org/SDS366/datasets/tempnormals.csv") |>
  group_by(location, month_name) |>
  summarize(mean = mean(temperature)) |>
  mutate(
    month = factor(
      month_name,
      levels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
    ),
    location = factor(location, levels = c("Death Valley", "Houston", "San Diego", "Chicago"))
  ) |>
  select(-month_name)

temps_months
```
:::

## Getting the data

::: {.tiny-font}
The `popgrowth` dataset:

```{r}
#| echo: true
#| message: false
US_census <- read_csv("https://wilkelab.org/SDS366/datasets/US_census.csv")
US_regions <- read_csv("https://wilkelab.org/SDS366/datasets/US_regions.csv")

popgrowth <- left_join(US_census, US_regions) |>
    group_by(region, division, state) |>
    summarize(
      pop2000 = sum(pop2000, na.rm = TRUE),
      pop2010 = sum(pop2010, na.rm = TRUE),
      popgrowth = (pop2010-pop2000)/pop2000,
      .groups = "drop"
    ) |>
    mutate(region = factor(region, levels = c("West", "South", "Midwest", "Northeast")))

popgrowth
```
:::

## **ggplot2** color scale functions are a bit of a mess

::: {.smaller-font}
Scale&nbsp;function&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Aesthetic&nbsp;&nbsp;&nbsp;  | Data&nbsp;type&nbsp;&nbsp;&nbsp;&nbsp;   | Palette type
:-----------              | :----------  | :------------ | :------------
`scale_color_hue()`       | `color`      | discrete      | qualitative 
:::

## **ggplot2** color scale functions are a bit of a mess

::: {.smaller-font}
Scale&nbsp;function&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Aesthetic&nbsp;&nbsp;&nbsp;  | Data&nbsp;type&nbsp;&nbsp;&nbsp;&nbsp;   | Palette type
:-----------              | :----------  | :------------ | :------------
`scale_color_hue()`       | `color`      | discrete      | qualitative 
`scale_fill_hue()`        | `fill `      | discrete      | qualitative
:::

## **ggplot2** color scale functions are a bit of a mess

::: {.smaller-font}
Scale&nbsp;function&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Aesthetic&nbsp;&nbsp;&nbsp;  | Data&nbsp;type&nbsp;&nbsp;&nbsp;&nbsp;   | Palette type
:-----------              | :----------  | :------------ | :------------
`scale_color_hue()`       | `color`      | discrete      | qualitative 
`scale_fill_hue()`        | `fill `      | discrete      | qualitative
`scale_color_gradient()`  | `color`      | continuous    | sequential
:::

## **ggplot2** color scale functions are a bit of a mess

::: {.smaller-font}
Scale&nbsp;function&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Aesthetic&nbsp;&nbsp;&nbsp;  | Data&nbsp;type&nbsp;&nbsp;&nbsp;&nbsp;   | Palette type
:-----------              | :----------  | :------------ | :------------
`scale_color_hue()`       | `color`      | discrete      | qualitative 
`scale_fill_hue()`        | `fill `      | discrete      | qualitative
`scale_color_gradient()`  | `color`      | continuous    | sequential
`scale_color_gradient2()` | `color`      | continuous    | diverging
:::

## **ggplot2** color scale functions are a bit of a mess

::: {.smaller-font}
Scale&nbsp;function&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Aesthetic&nbsp;&nbsp;&nbsp;  | Data&nbsp;type&nbsp;&nbsp;&nbsp;&nbsp;   | Palette type
:-----------              | :----------  | :------------ | :------------
`scale_color_hue()`       | `color`      | discrete      | qualitative 
`scale_fill_hue()`        | `fill `      | discrete      | qualitative
`scale_color_gradient()`  | `color`      | continuous    | sequential
`scale_color_gradient2()` | `color`      | continuous    | diverging
`scale_fill_viridis_c()`  | `color`      | continuous    | sequential
`scale_fill_viridis_d()`  | `fill`       | discrete      | sequential
`scale_color_brewer()`    | `color`      | discrete      | qualitative, diverging, sequential
`scale_fill_brewer()`     | `fill`       | discrete      | qualitative, diverging, sequential
`scale_color_distiller()` | `color`      | continuous    | qualitative, diverging, sequential
:::

... and there are many many more

## Examples

```{r}
#| label: temps-tiles
#| echo: true
#| message: false
#| fig-show: hold
#| fig.width: 7
#| fig.asp: 0.3
#| fig-cap: "&nbsp;"
#| out.width: "90%"
ggplot(temps_months, aes(x = month, y = location, fill = mean)) + 
  geom_tile(width = 0.95, height = 0.95) + 
  coord_fixed(expand = FALSE) +
  theme_classic()
  # no fill scale defined, default is scale_fill_gradient()
```

## Examples

```{r}
#| label: temps-tiles2
#| echo: true
#| message: false
#| fig-show: hold
#| fig.width: 7
#| fig.asp: 0.3
#| fig-cap: "&nbsp;"
#| out.width: "90%"
ggplot(temps_months, aes(x = month, y = location, fill = mean)) + 
  geom_tile(width = 0.95, height = 0.95) + 
  coord_fixed(expand = FALSE) +
  theme_classic() +
  scale_fill_gradient()
```

## Examples

```{r}
#| label: temps-tiles3
#| echo: true
#| message: false
#| fig-show: hold
#| fig.width: 7
#| fig.asp: 0.3
#| fig-cap: "&nbsp;"
#| out.width: "90%"
ggplot(temps_months, aes(x = month, y = location, fill = mean)) + 
  geom_tile(width = 0.95, height = 0.95) + 
  coord_fixed(expand = FALSE) +
  theme_classic() +
  scale_fill_viridis_c() # the _c stands for continuous
```

## Examples

```{r}
#| label: temps-tiles4
#| echo: true
#| message: false
#| fig-show: hold
#| fig.width: 7
#| fig.asp: 0.3
#| fig-cap: "&nbsp;"
#| out.width: "90%"
ggplot(temps_months, aes(x = month, y = location, fill = mean)) + 
  geom_tile(width = 0.95, height = 0.95) + 
  coord_fixed(expand = FALSE) +
  theme_classic() +
  scale_fill_viridis_c(option = "B", begin = 0.15)
```

## Examples

```{r}
#| label: temps-tiles5
#| echo: true
#| message: false
#| fig-show: hold
#| fig.width: 7
#| fig.asp: 0.3
#| fig-cap: "&nbsp;"
#| out.width: "90%"
ggplot(temps_months, aes(x = month, y = location, fill = mean)) + 
  geom_tile(width = 0.95, height = 0.95) + 
  coord_fixed(expand = FALSE) +
  theme_classic() +
  scale_fill_distiller(palette = "YlGnBu")
```

## The **colorspace** package creates some order

Scale name: `scale_<aesthetic>_<datatype>_<colorscale>()`

::: {.fragment .small-font .move-down-1em}
`<aesthetic>`: name of the aesthetic (`fill`, `color`, `colour`)
:::

::: {.fragment .small-font}
`<datatype>`: type of variable plotted (`discrete`, `continuous`, `binned`)
:::

::: {.fragment .small-font}
`<colorscale>`: type of the color scale (`qualitative`, `sequential`, `diverging`, `divergingx`)
:::

::: {.fragment .smaller-font .move-down-2em}
Scale function                       | Aesthetic | Data type  | Palette type
:-----------                         | :--------  | :--------- | :------------
`scale_color_discrete_qualitative()` | `color`    | discrete   | qualitative
`scale_fill_continuous_sequential()` | `fill`     | continuous | sequential
`scale_colour_continous_divergingx()` | `colour`   | continuous | diverging
:::

## Examples

```{r}
#| label: temps-tiles6
#| echo: true
#| message: false
#| fig-show: hold
#| fig.width: 7
#| fig.asp: 0.3
#| fig-cap: "&nbsp;"
#| out.width: "90%"
ggplot(temps_months, aes(x = month, y = location, fill = mean)) + 
  geom_tile(width = 0.95, height = 0.95) + 
  coord_fixed(expand = FALSE) +
  theme_classic() +
  scale_fill_continuous_sequential(palette = "YlGnBu", rev = FALSE)
```

## Examples

```{r}
#| label: temps-tiles7
#| echo: true
#| message: false
#| fig-show: hold
#| fig.width: 7
#| fig.asp: 0.3
#| fig-cap: "&nbsp;"
#| out.width: "90%"
ggplot(temps_months, aes(x = month, y = location, fill = mean)) + 
  geom_tile(width = 0.95, height = 0.95) + 
  coord_fixed(expand = FALSE) +
  theme_classic() +
  scale_fill_continuous_sequential(palette = "Viridis", rev = FALSE)
```

## Examples

```{r}
#| label: temps-tiles8
#| echo: true
#| message: false
#| fig-show: hold
#| fig.width: 7
#| fig.asp: 0.3
#| fig-cap: "&nbsp;"
#| out.width: "90%"
ggplot(temps_months, aes(x = month, y = location, fill = mean)) + 
  geom_tile(width = 0.95, height = 0.95) + 
  coord_fixed(expand = FALSE) +
  theme_classic() +
  scale_fill_continuous_sequential(
    palette = "Inferno", begin = 0.15, rev = FALSE
  )
```

## {#all-sequential-palettes data-menu-title="All sequential palettes"}

::: {.tiny-font}
```{r}
#| echo: true
#| label: colorspace-palettes-seq
#| fig.width: 12
#| fig.asp: 0.5
#| fig-cap: "&nbsp;"
#| out.width: "100%"
# all sequential palettes provided by the colorspace package
colorspace::hcl_palettes(type = "sequential", plot = TRUE)
```
:::

## {#all-diverging-palettes data-menu-title="All diverging palettes"}

::: {.tiny-font}
```{r}
#| echo: true
#| label: colorspace-palettes-div
#| fig.width: 6
#| fig.asp: 1
#| fig-cap: "&nbsp;"
#| out.width: "60%"
# all diverging palettes provided by the colorspace package
colorspace::hcl_palettes(type = "diverging", plot = TRUE, n = 9)
```
:::

## {#all-divergingx-palettes data-menu-title="All divergingx palettes"}

::: {.tiny-font}
```{r}
#| echo: true
#| label: colorspace-palettes-divx
#| fig.width: 8
#| fig.asp: .7
#| fig-cap: "&nbsp;"
#| out.width: "80%"
# all divergingx palettes provided by the colorspace package
colorspace::divergingx_palettes(plot = TRUE, n = 9)
```
:::

<!-- Segment ends here -->

# Setting colors manually for discrete, qualitative scales

## Discrete, qualitative scales are best set manually

```{r}
#| echo: true
#| label: qual-scales-example1
#| message: false
#| fig.width: 6
#| fig-cap: "&nbsp;"
#| out.width: "60%"
#| fig-show: hold
ggplot(popgrowth, aes(x = pop2000, y = popgrowth, color = region)) +
  geom_point() +
  scale_x_log10()
  # no color scale defined, default is scale_color_hue()
```

## Discrete, qualitative scales are best set manually

```{r}
#| echo: true
#| label: qual-scales-example2
#| message: false
#| fig.width: 6
#| fig-cap: "&nbsp;"
#| out.width: "60%"
#| fig-show: hold
ggplot(popgrowth, aes(x = pop2000, y = popgrowth, color = region)) +
  geom_point() +
  scale_x_log10() +
  scale_color_hue()
```

## Discrete, qualitative scales are best set manually

```{r}
#| echo: true
#| label: qual-scales-example3
#| message: false
#| fig.width: 6
#| fig-cap: "&nbsp;"
#| out.width: "60%"
#| fig-show: hold
library(ggthemes)  # for scale_color_colorblind()

ggplot(popgrowth, aes(x = pop2000, y = popgrowth, color = region)) +
  geom_point() +
  scale_x_log10() +
  scale_color_colorblind()  # uses Okabe-Ito colors
```

## Discrete, qualitative scales are best set manually

```{r}
#| echo: true
#| label: qual-scales-example4
#| message: false
#| fig.width: 6
#| fig-cap: "&nbsp;"
#| out.width: "60%"
#| fig-show: hold
ggplot(popgrowth, aes(x = pop2000, y = popgrowth, color = region)) +
  geom_point() +
  scale_x_log10() +
  scale_color_manual(
    values = c(West = "#E69F00", South = "#56B4E9",
               Midwest = "#009E73", Northeast = "#F0E442")
  )
```

## Okabe-Ito RGB codes

![](https://clauswilke.com/dataviz/pitfalls_of_color_use_files/figure-html/palette-Okabe-Ito-1.png){width="100%}

::: {.smaller-font}
Name           | Hex code &nbsp;&nbsp; | R, G, B (0-255)
:----------    | :-------  | :--------
orange         | #E69F00   | 230, 159, 0
sky blue	     | #56B4E9   | 86, 180, 233
bluish green   | #009E73   | 0, 158, 115
yellow	       | #F0E442   | 240, 228, 66
blue	         | #0072B2   | 0, 114, 178
vermilion	     | #D55E00   | 213, 94, 0
reddish purple | #CC79A7   | 204, 121, 167
black	         | #000000   | 0, 0, 0
:::

<!-- Segment ends here -->

## Further reading

- Fundamentals of Data Visualization: [Chapter 4: Color scales](https://clauswilke.com/dataviz/color-basics.html)
- Fundamentals of Data Visualization: [Figure 19.10: Okabe-Ito color palette](https://clauswilke.com/dataviz/color-pitfalls.html#fig:palette-Okabe-Ito)
- **ggplot2** book: [Colour scales and legends](https://ggplot2-book.org/scale-colour.html)
- **ggplot2** reference documentation: [Scales](https://ggplot2.tidyverse.org/reference/index.html#section-scales)
- **colorspace** package: [HCL-Based Color Scales for ggplot2](https://colorspace.r-forge.r-project.org/articles/ggplot2_color_scales.html)
