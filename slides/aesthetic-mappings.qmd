---
title: "Aesthetic mappings"
author: "Claus O. Wilke"
date: last-modified
format: 
  revealjs:
    theme:
      - default
      - Wilke-theme.scss
    auto-stretch: false
    chalkboard: true
execute:
  fig-format: svg
  fig-asp: 0.618
  fig-width: 5.5
---

```{r}
#| include: false
library(tidyverse)
library(cowplot)
library(colorspace)

# ggplot2 settings so plots scale well for slide size 
theme_set(theme_gray(14))
update_geom_defaults("point", list(size = 2))
update_geom_defaults("line", list(linewidth = 1))

# this function should be added to cowplot
align_legend <- function(p, hjust = 0.5)
{
  # extract legend
  g <- cowplot::plot_to_gtable(p)
  grobs <- g$grobs
  legend_index <- which(sapply(grobs, function(x) x$name) == "guide-box")
  legend <- grobs[[legend_index]]

  # extract guides table
  guides_index <- which(sapply(legend$grobs, function(x) x$name) == "layout")

  # there can be multiple guides within one legend box  
  for (gi in guides_index) {
    guides <- legend$grobs[[gi]]
    
    # add extra column for spacing
    # guides$width[5] is the extra spacing from the end of the legend text
    # to the end of the legend title. If we instead distribute it by `hjust:(1-hjust)` on
    # both sides, we get an aligned legend
    spacing <- guides$width[5]
    guides <- gtable::gtable_add_cols(guides, hjust*spacing, 1)
    guides$widths[6] <- (1-hjust)*spacing
    title_index <- guides$layout$name == "title"
    guides$layout$l[title_index] <- 2

    # reconstruct guides and write back
    legend$grobs[[gi]] <- guides
  }
  
  # reconstruct legend and write back
  g$grobs[[legend_index]] <- legend
  g
}
```

# Plots map data onto graphical elements

## Dataset:<br>Daily average temperatures for various locations

::: {.tiny-font}
```{r echo=FALSE, message=FALSE}
temps_long <- read_csv("https://wilkelab.org/SDS366/datasets/tempnormals.csv") |>
  mutate(
    location = factor(
      location, levels = c("Death Valley", "Houston", "San Diego", "Chicago")
    )
  )

temps_long |>
  select(location, day_of_year, month, temperature) |>
  head(n = 13L) |>
  knitr::kable("html")
```
:::

## Temperatures mapped onto y position

```{r}
#| label: temp-normals-vs-time
#| echo: false
#| message: false
#| fig-width: 7
#| fig-cap: "&nbsp;"
#| out-width: "80%"
ggplot(temps_long, aes(x = date, y = temperature, color = location)) +
  geom_line(linewidth = 1) +
  scale_x_date(
    name = "month",
    limits = c(ymd("0000-01-01"), ymd("0001-01-04")),
    breaks = c(
      ymd("0000-01-01"), ymd("0000-04-01"), ymd("0000-07-01"),
      ymd("0000-10-01"), ymd("0001-01-01")
    ),
    labels = c("Jan", "Apr", "Jul", "Oct", "Jan"), expand = c(1/366, 0)
  ) + 
  scale_y_continuous(
    limits = c(19.9, 107),
    breaks = seq(20, 100, by = 20),
    name = "temperature (°F)"
  ) +
  scale_color_manual(
    name = NULL,
    values = c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")
  ) +
  theme_minimal_grid(16)
```

## Temperatures mapped onto color

<br>

```{r}
#| label: four-locations-temps-by-month
#| echo: false
#| message: false
#| fig-width: 8.5
#| fig-asp: 0.3
#| fig-cap: "&nbsp;"
#| out-width: "100%"

mean_temps <- temps_long %>%
  group_by(location, month_name) %>%
  summarize(mean = mean(temperature)) %>%
  mutate(
    month_name = factor(
      month_name,
      levels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
    )
  )

ggplot(mean_temps, aes(x = month_name, y = location, fill = mean)) + 
  geom_tile(width = .95, height = 0.95) + 
  scale_fill_viridis_c(
    option = "B", begin = 0.15, end = 0.98,
    name = "temperature (°F)"
  ) + 
  scale_x_discrete(name = "month") +
  scale_y_discrete(name = NULL) +
  coord_fixed(expand = FALSE) +
  theme_half_open(16) +
  theme(
    axis.line = element_blank(),
    axis.ticks = element_blank(),
    legend.title = element_text(size = 14, hjust = 0.5)
  )
```

## Commonly used aesthetics

![](https://clauswilke.com/dataviz/aesthetic_mapping_files/figure-html/common-aesthetics-1.png){width=90% fig-align="center"}

## The same data values can be mapped to different aesthetics

![](https://clauswilke.com/dataviz/aesthetic_mapping_files/figure-html/basic-scales-example-1.png){width=90% fig-align="center"}

## We can use many different aesthetics at once

```{r}
#| label: mtcars-five-scale
#| echo: false
#| message: false
#| fig-width: 6
#| fig-asp: 0.8
#| fig-cap: "&nbsp;"
#| out-width: "60%"
ggplot(mtcars, aes(disp, mpg, fill = hp, shape = factor(cyl), size = wt)) + 
  geom_point(color = "white") +
  scale_shape_manual(values = c(23, 24, 21), name = "cylinders") +
  scale_fill_continuous_sequential(
    palette = "Emrld", name = "power (hp)",
    breaks = c(100, 200, 300),
    rev = FALSE
  ) +
  xlab("displacement (cu. in.)") +
  ylab("fuel efficiency (mpg)") +
  guides(
    fill = guide_colorbar(order = 1),
    shape = guide_legend(
      override.aes = list(size = 4, fill = "#329D84"),
      order = 3
    ),
    size = guide_legend(
      override.aes = list(shape = 21, fill = "#329D84"),
      title = "weight (1000 lbs)",
      order = 2
    )
  ) +
  theme_half_open(14) + background_grid() +
  theme(
    legend.box.background = element_rect(fill = "white", color = "white"),
    legend.position = "inside",
    legend.position.inside = c(1, 1),
    legend.justification = c(1, 1),
    legend.direction = "vertical",
    legend.box = "horizontal",
    legend.box.margin = margin(7, 7, 7, 7)
  )
```

<!-- Segment ends here -->


# Creating aesthetic mappings in ggplot

## Getting the data

All examples will use the `temperatures` dataset:

```{r}
#| echo: true
#| message: false
temperatures <- read_csv("https://wilkelab.org/SDS366/datasets/tempnormals.csv") |>
  mutate(
    location = factor(
      location, levels = c("Death Valley", "Houston", "San Diego", "Chicago")
    )
  ) |>
  select(location, station_id, day_of_year, month, temperature)
```

## We define the mapping with `aes()`

```{r}
#| label: ggplot-temps-example
#| echo: true
#| fig-cap: "&nbsp;"
#| out-width: "65%"
ggplot(
  data = temperatures,
  mapping = aes(x = day_of_year, y = temperature, color = location)
) + 
  geom_line()
```

## We define the mapping with `aes()`

```{r}
#| label: ggplot-temps-example2
#| echo: true
#| fig-width: 7.86 # = 5.5*6/4.2
#| fig-asp: 0.3
#| fig-cap: "&nbsp;"
#| out-width: "85%"
ggplot(
  data = temperatures,
  mapping = aes(x = day_of_year, y = location, color = temperature)
) + 
  geom_point(size = 5)
```

## We frequently omit argument names

Long form, all arguments are named:

```r
ggplot(
  data = temperatures,
  mapping = aes(x = day_of_year, y = location, color = temperature)
) + geom_point(size = 5)
```

::: {.fragment}
<br>

Abbreviated form, common arguments remain unnamed:

```r
ggplot(temperatures, aes(day_of_year, location, color = temperature)) + 
  geom_point(size = 5)
```
:::

## The geom determines how the data is shown

```{r}
#| label: ggplot-temps-example5
#| echo: true
#| fig-cap: "&nbsp;"
#| out-width: "65%"
ggplot(temperatures, aes(day_of_year, temperature, color = location)) + 
  geom_line()
```

## The geom determines how the data is shown

```{r}
#| label: ggplot-temps-example6
#| echo: true
#| fig-width: 7.86 # = 5.5*6/4.2
#| fig-asp: 0.3
#| fig-cap: "&nbsp;"
#| out-width: "85%"
ggplot(temperatures, aes(day_of_year, location, color = temperature)) + 
  geom_point(size = 5)
```

## The geom determines how the data is shown

```{r}
#| label: ggplot-temps-example7
#| echo: true
#| fig-width: 6.5
#| fig-asp: 0.6
#| fig-cap: "&nbsp;"
#| out-width: "75%"
ggplot(temperatures, aes(month, temperature, color = location)) + 
  geom_boxplot()
```

## The geom determines how the data is shown

```{r}
#| label: ggplot-temps-example8
#| echo: true
#| fig-width: 9
#| fig-asp: 0.44
#| fig-cap: "&nbsp;"
#| out-width: "90%"
ggplot(temperatures, aes(month, temperature, fill = location)) + 
  geom_violin() + 
  facet_wrap(~location) # make separate panel per location
```

<!-- Segment ends here -->

# Important: Distinguish between `color` and `fill`

## Distinguish between `color` and `fill`

<br>

::: {.fragment}
`color`<br>
Applies color to points, lines, text, borders
:::

<br>

::: {.fragment}
`fill`<br>
Applies color to any filled areas 
:::

## Many geoms use both `color` and `fill`

```{r}
#| label: ggplot-color-fill
#| echo: true
#| fig-width: 6.5
#| fig-asp: 0.6
#| fig-cap: "&nbsp;"
#| out-width: "75%"
ggplot(temperatures, aes(month, temperature, color = location)) + 
  geom_boxplot()
```

## Many geoms use both `color` and `fill`

```{r}
#| label: ggplot-color-fill2
#| echo: true
#| fig-width: 6.5
#| fig-asp: 0.6
#| fig-cap: "&nbsp;"
#| out-width: "75%"
ggplot(temperatures, aes(month, temperature, fill = location)) + 
  geom_boxplot()
```

## Many geoms use both `color` and `fill`

```{r}
#| label: ggplot-color-fill3
#| echo: true
#| fig-width: 6.5
#| fig-asp: 0.6
#| fig-cap: "&nbsp;"
#| out-width: "75%"
ggplot(temperatures, aes(month, temperature, color = location, fill = location)) + 
  geom_boxplot()
```

## Aesthetics can also be used as parameters

```{r}
#| label: ggplot-color-fill-params
#| echo: true
#| fig-width: 6.5
#| fig-asp: 0.6
#| fig-cap: "&nbsp;"
#| out-width: "75%"
ggplot(temperatures, aes(month, temperature, fill = location)) + 
  geom_boxplot(color = "steelblue")
```

## Aesthetics can also be used as parameters

```{r}
#| label: ggplot-color-fill-params2
#| echo: true
#| fig-width: 6.5
#| fig-asp: 0.6
#| fig-cap: "&nbsp;"
#| out-width: "75%"
ggplot(temperatures, aes(month, temperature, color = location)) + 
  geom_boxplot(fill = "steelblue")
```

<!-- Segment ends here -->

## Further reading

::: {.small-font}
- Fundamentals of Data Visualization: [Chapter 2: Visualizing data](https://clauswilke.com/dataviz/aesthetic-mapping.html)
- Data Visualization—A Practical Introduction: [Chapter 3: Make a plot](https://socviz.co/makeplot.html#makeplot)
- [**ggplot2** reference documentation](https://ggplot2.tidyverse.org/reference/index.html)
- [**ggplot2** book](https://ggplot2-book.org/)
- [**ggplot2** cheatsheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-visualization.pdf)
:::

