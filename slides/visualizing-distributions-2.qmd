---
title: "Visualizing distributions 2"
author: "Claus O. Wilke"
date: last-modified
format: 
  revealjs:
    theme:
      - default
      - Wilke-theme.scss
    auto-stretch: false
    chalkboard: true
execute:
  fig-format: svg
  fig-asp: 0.618
  fig-width: 5.5
---

```{r}
#| include: false
library(tidyverse)
library(cowplot)
library(colorspace)
library(ggridges)
library(ggforce)
library(here)

# ggplot2 settings so plots scale well for slide size 
theme_set(theme_gray(14))
update_geom_defaults("point", list(size = 2))
#update_geom_defaults("line", list(linewidth = 1))

lincoln_temps <- readRDS(here("datasets", "lincoln_temps.rds"))
```

## Reminder: Density estimates visualize distributions

:::: {.columns}

::: {.column width="50%" .small-font}
Mean temperatures in Lincoln, NE, in January 2016:

```{r}
lincoln_temps |>
  filter(month == "Jan") |>
  select(date, `mean temp` = mean_temp) |>
  slice(1:10) |>
  knitr::kable()
```
:::

::: {.fragment .column width="50%"}
```{r}
#| label: temps-densities-january
#| fig-cap: "&nbsp;"
#| out-width: "100%"
lincoln_temps |>
  filter(month == "Jan") |>
  ggplot(aes(mean_temp)) +
  geom_density(fill = "#56B4E9", alpha = 0.7) +
  scale_x_continuous(
    name = "mean temperature (°F)",
    expand = c(0, 0)
  ) +
  scale_y_continuous(expand = expansion(mult = c(0, 0.06))) +
  ggtitle("Temperature distribution") +
  theme_minimal_grid(18) +
  theme(
    plot.title.position = "plot",
    plot.title = element_text(face = "plain")
  )
```
::: {.fragment .move-up-1em}
How can we compare distributions across months?
:::

:::

::::

## A bad idea: Many overlapping density plots

```{r}
#| label: temps-densities-overlapping
#| fig-cap: "&nbsp;"
#| fig-width: 8
#| out-width: "90%"
p <- lincoln_temps |>
  mutate(
    month_long = fct_rev(month_long)
  ) |>
  ggplot(aes(mean_temp, fill = month)) +
  geom_density(alpha = 0.5) +
  scale_x_continuous(
    name = "mean temperature (°F)",
    expand = c(0, 0)
  ) +
  scale_y_continuous(expand = expansion(mult = c(0, 0.06))) +
  scale_fill_viridis_d(option = "D") +
  labs(subtitle = "") + # empty subtitle for some vertical space
  theme_minimal_grid(16)

stamp_bad(p)
```

## Another bad idea: Stacked density plots

```{r}
#| label: temps-densities-stacked
#| fig-cap: "&nbsp;"
#| fig-width: 8
#| out-width: "90%"
p <- lincoln_temps |>
  mutate(
    month_long = fct_rev(month_long)
  ) |>
  ggplot(aes(mean_temp, fill = month)) +
  geom_density(alpha = 0.7, position = "stack") +
  scale_x_continuous(
    name = "mean temperature (°F)",
    expand = c(0, 0)
  ) +
  scale_y_continuous(expand = expansion(mult = c(0, 0.06))) +
  scale_fill_viridis_d(option = "D") +
  labs(subtitle = "") + # empty subtitle for some vertical space
  theme_minimal_grid(16)

stamp_bad(p)
```

## Somewhat better: Small multiples

::: {.move-up-half-em}
```{r}
#| label: temps-densities
#| fig-cap: "&nbsp;"
#| fig-width: 8
#| out-width: "95%"
lincoln_temps %>%
  mutate(
    month_long = fct_rev(month_long)
  ) %>%
  ggplot(aes(mean_temp)) +
  geom_density(fill = "#56B4E9") +
  scale_x_continuous(
    name = "mean temperature (°F)",
    expand = c(0, 0)
  ) +
  scale_y_continuous(expand = expansion(mult = c(0, 0.06))) +
  facet_wrap(vars(month_long)) +
  theme_minimal_grid(16, color = "gray65") +
  theme(
    panel.background = element_rect(fill = "gray95")
  )
```
:::

## Instead: Show values along y, conditions along x

```{r}
#| label: temps-boxplots
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| out-width: "80%"
ggplot(lincoln_temps, aes(x = month, y = mean_temp)) +
  geom_boxplot(fill = "gray90") + 
  xlab("month") + 
  ylab("mean temperature (°F)") +
  theme_half_open()
```

::: {.fragment .move-up-2em}
A boxplot is a crude way of visualizing a distribution.
:::

## How to read a boxplot

```{r}
#| label: boxplot-schematic
#| fig-cap: "&nbsp;"
#| fig-width: 8
#| out-width: "80%"
set.seed(3423)

y <- c(rnorm(100), 3.4)
s <- boxplot.stats(y)
df <- tibble(
  y = c(s$stats, max(y)),
  x = c(1.03, 1.405, 1.405, 1.405, 1.03, 1.04),
  label = c("minimum", "first quartile", "median", "third quartile", "maximum within upper fence", "outlier")
)

p_points <- ggplot(tibble(y), aes(x = 0, y = y)) + 
  geom_point(position = position_jitter(width = .4, height = 0, seed = 320)) +
  annotate("text", label = "data", x = 0, y = 4, hjust = 0.5, vjust = 1, size = 20/.pt) +
  scale_x_continuous(limits = c(-1.8, .4), expand = c(0, 0)) +
  scale_y_continuous(limits = c(-2.55, 4), expand = c(0, 0)) +
  coord_cartesian(clip = "off") +
  theme_nothing()

p_boxplot <- ggplot(tibble(y), aes(x = 1, y = y)) + 
  geom_boxplot(fill = "gray90", outlier.size = 2) +
  annotate("text", label = "boxplot", x = 1, y = 4, hjust = 0.5, vjust = 1, size = 20/.pt) +
  geom_text(
    data = df, aes(x, y, label = label), hjust = 0,
    size = 16/.pt
  ) +
  scale_x_continuous(limits = c(0, 3.5), expand = c(0, 0)) +
  scale_y_continuous(limits = c(-2.55, 4), expand = c(0, 0)) +
  coord_cartesian(clip = "off") +
  theme_nothing()

plot_grid(p_points, p_boxplot, rel_widths = c(.65, 1), nrow = 1)
```

## If you like density plots, consider violins

```{r}
#| label: temps-violins
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| out-width: "80%"
ggplot(lincoln_temps, aes(x = month, y = mean_temp)) +
  geom_violin(fill = "gray90") + 
  xlab("month") + 
  ylab("mean temperature (°F)") +
  theme_half_open()
```

::: {.fragment .move-up-2em}
A violin plot is a density plot rotated 90 degrees and then mirrored.
:::

## How to read a violin plot

```{r}
#| label: violin-schematic
#| fig-cap: "&nbsp;"
#| fig-width: 8
#| out-width: "80%"
set.seed(3423)

y <- c(rnorm(100), 3.4)
d <- density(y)
df <- tibble(
  y = c(min(y), d$x[which(d$y == max(d$y))], max(y)),
  x = c(1.1, 1.5, 1.08),
  label = c("minimum data value", "maximum point density", "maximum data value")
)

p_points <- ggplot(tibble(y), aes(x = 0, y = y)) + 
  geom_point(position = position_jitter(width = .4, height = 0, seed = 320)) +
  annotate("text", label = "data", x = 0, y = 4, hjust = 0.5, vjust = 1, size = 20/.pt) +
  scale_x_continuous(limits = c(-1.8, .4), expand = c(0, 0)) +
  scale_y_continuous(limits = c(-2.55, 4), expand = c(0, 0)) +
  coord_cartesian(clip = "off") +
  theme_nothing()

p_violin <- ggplot(tibble(y), aes(x = 1, y = y)) + 
  geom_violin(fill = "gray90") +
  annotate("text", label = "violin plot", x = 1, y = 4, hjust = 0.5, vjust = 1, size = 20/.pt) +
  geom_text(
    data = df, aes(x, y, label = label), hjust = 0,
    size = 16/.pt
  ) +
  scale_x_continuous(limits = c(0, 3.5), expand = c(0, 0)) +
  scale_y_continuous(limits = c(-2.55, 4), expand = c(0, 0)) +
  coord_cartesian(clip = "off") +
  theme_nothing()

plot_grid(p_points, p_violin, rel_widths = c(.65, 1), nrow = 1)
```

## For small datasets, you can also use a strip chart

Advantage: Can see raw data points instead of abstract representation.

::: {.fragment}
```{r}
#| label: temps-stripchart
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| out-width: "70%"
ggplot(lincoln_temps, aes(x = month, y = mean_temp)) +
  geom_point(
    position = position_jitter(width = .15, height = 0, seed = 320),
    size = 0.75
  ) +
  xlab("month") + 
  ylab("mean temperature (°F)") +
  theme_half_open()
```
:::

::: {.fragment .move-up-2em}
Horizontal jittering may be necessary to avoid overlapping points.
:::

## For small datasets, you can also use a strip chart

Advantage: Can see raw data points instead of abstract representation.

```{r}
#| label: temps-stripchart2
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| out-width: "70%"
ggplot(lincoln_temps, aes(x = month, y = mean_temp)) +
  geom_point(size = 0.75) +
  xlab("month") + 
  ylab("mean temperature (°F)") +
  theme_half_open()
```

::: {.move-up-2em}
Horizontal jittering may be necessary to avoid overlapping points.
:::

## For small datasets, you can also use a strip chart

Advantage: Can see raw data points instead of abstract representation.

```{r}
#| label: temps-stripchart3
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| out-width: "70%"
ggplot(lincoln_temps, aes(x = month, y = mean_temp)) +
  geom_point(
    position = position_jitter(width = .15, height = 0, seed = 320),
    size = 0.75
  ) +
  xlab("month") + 
  ylab("mean temperature (°F)") +
  theme_half_open()
```

::: {.move-up-2em}
Horizontal jittering may be necessary to avoid overlapping points.
:::

## We can also jitter points into violins

```{r}
#| label: temps-sina
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| out-width: "80%"
ggplot(lincoln_temps, aes(x = month, y = mean_temp)) +
  geom_violin(fill = "gray90", color = NA) + 
  geom_sina(size = 0.75) + 
  xlab("month") + 
  ylab("mean temperature (°F)") +
  theme_half_open()
```

::: {.fragment .move-up-2em}
Such plots are called sina plots, to honor [Sina Hadi Sohi.](https://clauswilke.com/dataviz/boxplots-violins.html#fig:lincoln-temp-sina)
:::

## But maybe there's hope for overlapping density plots?

```{r}
#| label: temps-densities-overlapping2
#| fig-cap: "&nbsp;"
#| fig-width: 8
#| out-width: "80%"
lincoln_temps %>%
  mutate(
    month_long = fct_rev(month_long)
  ) %>%
  ggplot(aes(mean_temp, fill = month)) +
  geom_density(alpha = 0.5) +
  scale_x_continuous(
    name = "mean temperature (°F)",
    expand = c(0, 0),
    breaks = c(0, 25, 50, 75)
  ) +
  scale_y_continuous(expand = expansion(mult = c(0, 0.06))) +
  scale_fill_viridis_d(option = "D") +
  theme_minimal_grid(16)
```

::: {.fragment .move-up-2em}
How about we stagger the densities vertically?
:::

## Vertically staggered density plots are called ridgelines

```{r}
#| label: temps-ridgeline-polished
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| out-width: "80%"
ggplot(lincoln_temps, aes(x = mean_temp, y = month_long)) +
  geom_density_ridges(
    scale = 3,
    rel_min_height = 0.01,
    bandwidth = 3.4,
    fill = lighten("#56B4E9", .3),
    color = "white"
  ) +
  scale_x_continuous(
    name = "mean temperature (°F)",
    expand = c(0, 0)#, breaks = c(0, 25, 50, 75)
  ) +
  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +
  theme_minimal_grid(16) +
  theme(
    axis.text.y = element_text(vjust = 0)
  )
```

::: {.fragment .move-up-2em}
Notice the single fill color. More colors would be distracting.
:::

<!-- Segment ends here -->

# Making boxplots, violins, etc. in **ggplot2**

## Getting the data

::: {.smaller-font}
All examples will use the `lincoln_temps` dataset:

```{r}
#| echo: true
#| message: false
lincoln_temps <- readRDS(url("https://wilkelab.org/SDS366/datasets/lincoln_temps.rds"))

lincoln_temps
```
:::

## Making boxplots, violins, etc. in **ggplot2**

::: {.center-text .move-down-1em}
Plot type    | Geom                    | Notes
:----------- | :-----------------      | :-------------------------
boxplot      | `geom_boxplot()`        |
violin plot  | `geom_violin()`         |
strip chart  | `geom_point()`          | Jittering requires `position_jitter()`
sina plot    | `geom_sina()`           | From package **ggforce**
ridgeline    | `geom_density_ridges()` | From package **ggridges**
:::

## Examples: Boxplot

::: {.small-font}
```{r}
#| label: temps-examples-boxplot
#| echo: true
#| fig-width: 6
#| fig-cap: "&nbsp;"
#| out-width: "60%"
ggplot(lincoln_temps, aes(x = month, y = mean_temp)) +
  geom_boxplot(fill = "skyblue") 
```
:::

## Examples: Violins

::: {.small-font}
```{r}
#| label: temps-examples-violins
#| echo: true
#| fig-width: 6
#| fig-cap: "&nbsp;"
#| out-width: "60%"
ggplot(lincoln_temps, aes(x = month, y = mean_temp)) +
  geom_violin(fill = "skyblue") 
```
:::

## Examples: Strip chart (no jitter)

::: {.small-font}
```{r}
#| label: temps-examples-stripchart
#| echo: true
#| fig-width: 6
#| fig-cap: "&nbsp;"
#| out-width: "60%"
ggplot(lincoln_temps, aes(x = month, y = mean_temp)) +
  geom_point(size = 0.75)  # reduce point size to minimize overplotting 
```
:::

## Examples: Strip chart (w/ jitter)

::: {.small-font}
```{r}
#| label: temps-examples-stripchart-jitter
#| echo: true
#| fig-width: 6
#| fig-cap: "&nbsp;"
#| out-width: "60%"
ggplot(lincoln_temps, aes(x = month, y = mean_temp)) +
  geom_point(size = 0.75,  # reduce point size to minimize overplotting 
    position = position_jitter(
      width = 0.15,  # amount of jitter in horizontal direction
      height = 0     # amount of jitter in vertical direction (0 = none)
    )
  )
```
:::

## Examples: Sina plot

::: {.small-font}
```{r}
#| label: temps-examples-sina
#| echo: true
#| fig-width: 6
#| fig-cap: "&nbsp;"
#| out-width: "60%"
library(ggforce) # for geom_sina()

ggplot(lincoln_temps, aes(x = month, y = mean_temp)) +
  geom_violin(fill = "skyblue", color = NA) + # violins in background
  geom_sina(size = 0.75) # sina jittered points in foreground
```
:::

## Examples: Ridgeline plot

::: {.small-font}
```{r}
#| label: temps-examples-ridgeline
#| echo: true
#| fig-width: 6
#| fig-cap: "&nbsp;"
#| out-width: "60%"
library(ggridges) # for geom_density_ridges

ggplot(lincoln_temps, aes(x = mean_temp, y = month_long)) +
  geom_density_ridges()
```
:::

<!-- Segment ends here -->

## Further reading

- Fundamentals of Data Visualization: [Chapter 7: Visualizing many distributions at once](https://clauswilke.com/dataviz/boxplots-violins.html)
- **ggplot2** reference documentation: [`geom_boxplot()`](https://ggplot2.tidyverse.org/reference/geom_histogram), [`geom_violin()`](https://ggplot2.tidyverse.org/reference/geom_violin), [`position_jitter()`](https://ggplot2.tidyverse.org/reference/position_jitter.html)
- **ggforce** reference documentation: [`geom_sina()`](https://ggforce.data-imaginist.com/reference/geom_sina.html)
- **ggridges** reference documentation: [`geom_density_ridges()`](https://wilkelab.org/ggridges/reference/geom_density_ridges.html)
